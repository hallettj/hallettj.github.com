<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flow Cookbook | sitr.us]]></title>
  <link href="http://sitr.us/blog/categories/flow-cookbook/atom.xml" rel="self"/>
  <link href="http://sitr.us/"/>
  <updated>2017-12-18T16:09:27-04:00</updated>
  <id>http://sitr.us/</id>
  <author>
    <name><![CDATA[Jesse Hallett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flow Cookbook: Flow & React]]></title>
    <link href="http://sitr.us/2017/01/03/flow-cookbook-react.html"/>
    <updated>2017-01-03T00:00:00-04:00</updated>
    <id>http://sitr.us/2017/01/03/flow-cookbook-react</id>
    <content type="html"><![CDATA[<p><em>This recipe is part of the <a href="/2016/12/20/flow-cookbook.html">Flow Cookbook</a> series.</em></p>

<p>Flow and React are both Facebook projects -
so as you might imagine, they work quite well together.
React components can take type parameters to specify types for props and state.
Type-checking works well with both <a href="https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components">functional and class components</a>.</p>

<p>Flow type annotations provide an alternative to <code>propTypes</code> runtime checks.
Flow’s static checking has some advantages:</p>

<ul>
  <li>Problems are reported immediately - it is not necessary to run tests that
evaluate every component to identify <code>props</code> mismatches.</li>
  <li>Flow types can be more precise and concise than <code>propTypes</code>.</li>
  <li>Flow can also check <code>state</code> as well as <code>props</code>.</li>
  <li>In addition to checking that a component gets the correct <code>props</code>,
Flow checks that <code>props</code> and <code>states</code> are used correctly within the component’s
<code>render</code> method,
and in other component methods.</li>
</ul>

<!-- more -->

<p>Flow changed the way that it handles React types in <a href="https://github.com/facebook/flow/blob/master/Changelog.md#0530">version 0.53.0</a>.
This recipe assumes that you are using Flow v0.53.0 or later.</p>

<h2 id="how-it-works">How it works</h2>

<p>With Flow you specify the types of <code>props</code> and <code>state</code> using type parameters on
the <code>React.Component</code> class.
The form for type parameters is:</p>

<p><code>js
class MyComponent extends React.Component&lt;Props, State&gt; {
  /* ... */
}
</code></p>

<p>Where <code>Props</code>, and <code>State</code> can be whatever object types you want.
If your component has the props <code>title</code>, <code>createdAt</code>, and <code>authorId</code>
then a definition for <code>Props</code> could look like this:</p>

<p><code>js
type Props = {
  title: string,
  createdAt: Date,
  authorId: number,
}
</code></p>

<p>If your component is stateless then you can omit the <code>State</code> parameter,
in which case the state type defaults to <code>void</code>.</p>

<p><code>Props</code> should list types for <em>all</em> props -
even props that are optional or that have default values.
If you add a <code>defaultProps</code> value to your component then Flow will
automatically infer that fields from <code>defaultProps</code> are not required when your
component is called.
So you should not use a <code>?</code> in the corresponding field in your <code>Props</code> type.
Leaving out the <code>?</code> lets you avoid unnecessary <code>undefined</code> checks in your
component’s methods.</p>

<p>```js
type Props = {
  updatedAt?: Date,      // optional prop, no default value
  commentsEnabled: bool, // optional, but has a default value in <code>defaultProps</code>
}</p>

<p>class MyComponent extends React.Component<props> {
  static defaultProps = { commentsEnabled: true }</props></p>

<p>/* … */
}
```</p>

<p>To declare a type for <code>props</code> in a stateless functional component use
a type annotation like this:</p>

<p><code>js
function MyComponent(props: Props) {
  /* ... */
}
</code></p>

<p>Once again, <code>Props</code> can be any object type that you want,
and should include types for all props, even those that have default values.
The return type for a functional component is <code>React.Element&lt;*&gt;</code> -
but Flow can infer that so don’t bother with a return type annotation.</p>

<p>Type definitions for React are built into Flow.
The Flow documentation includes a
<a href="https://flow.org/en/docs/react/types/">type reference for React types</a>.
It is useful to look at those definitions to see exactly what Flow expects.
You can also go straight to the source:
a lot of what I know about using Flow came from examining
<a href="https://github.com/facebook/flow/blob/master/lib/react.js">Flow’s type definition file for React</a>
and other files in the same directory.</p>

<p>The Flow documentation also includes its own guide on
<a href="https://flow.org/en/docs/react/">using Flow with React</a>.</p>

<h2 id="a-hacker-news-client">A Hacker News client</h2>

<p>Let’s build on the code from the <a href="/2016/12/20/flow-cookbook-unpacking-json.html">Unpacking JSON API data</a> recipe,
and build a simple Hacker News client.
The client will fetch lists of stories from the Hacker News API to display.
When the user selects a story,
the client will fetch and display comments.</p>

<p>Let’s start with a component that displays a Hacker News story as a single line,
and accepts a callback to do something if the user selects that story.
First we define a type for the props that this component will accept.</p>

<p>```js
import { type Story } from ‘flow-cookbook-hacker-news’</p>

<p>type StoryListItemProps = {
  story: Story,
  onSelect: () =&gt; void,
}
```</p>

<p>We import the <code>Story</code> type from <code>'flow-cookbook-hacker-news'</code>,
which is the example code from the <a href="/2016/12/20/flow-cookbook-unpacking-json.html">Unpacking JSON API data</a> recipe.
That <code>Story</code> type is a ready-made type that describes everything we will want
to display in the new client.
Take a look at the <a href="https://github.com/hallettj/flow-cookbook-hacker-news/blob/master/index.js.flow#L9">source file</a> to see what <code>Story</code> looks like.
(The <code>import { type T }</code> bit is <a href="https://flowtype.org/docs/syntax.html#importing-and-exporting-types">Flow syntax</a> -
it is not part of Javascript.)</p>

<p>The <code>StoryListItemProps</code> type lists the props that will be given to our
component.
The props are a <code>story</code>,
and a callback called <code>onSelect</code>.
The type indicates that <code>onSelect</code> must be a function that takes zero arguments,
and that returns <code>undefined</code> (a.k.a. <code>void</code>).
It is not necessary to require that the return type be <code>undefined</code> -
you could use <code>mixed</code> instead if you do not want to put any constraint on the
callback’s return type.</p>

<p>My opinion is that using <code>void</code> is a clear indication to the caller that the
component will not do anything with a return value.
On the other hand you might get an irritating type error if you provide
a single-expression arrow function that implicitly returns a value.</p>

<p>And here is the <code>StoryListItem</code> component itself:</p>

<p>```js
function StoryListItem(props: StoryListItemProps) {
  const { by, title } = props.story
  return &lt;p&gt;
    &lt;a href=”#” onClick={event =&gt; selectStory(props, event)}&gt;
      {title}
    &lt;/a&gt; posted by {by}
  &lt;/p&gt;
}</p>

<p>function selectStory(props: StoryListItemProps, event: Event) {
  event.preventDefault()
  props.onSelect()
}
```</p>

<p>The type annotation, <code>props: StoryListItemProps</code>,
does two things for us:
when <code>StoryListItem</code> is rendered, Flow will check that it is given the required
props of the appropriate types;
and Flow will also check uses of <code>props</code> in the body of the <code>StoryListItem</code>
function for consistency with <code>StoryListItemProps</code>.
Checking props from both directions ensures that a component is in alignment
with its callers.</p>

<p>In general if a component does not have internal state,
and does not use life cycle callbacks such as <code>componentDidMount</code>,
then I prefer to use a functional component, like <code>StoryListItem</code>.
A functional component cannot have methods that refer to <code>this.props</code>;
so I made the <code>selectStory</code> event handler a top-level function that accepts
a reference to the component’s props as an argument.
Reusing the <code>StoryListItemProps</code> type in the signatures for the component and
for the event handler means that we can easily keep track of available props in
both functions.</p>

<p><code>selectStory</code> also takes an <code>event</code> argument.
The <code>Event</code> type is built into Flow,
and Flow knows about the <code>preventDefault</code> method.
Flow’s version of the <code>Event</code> type is defined in Flow’s
<a href="https://github.com/facebook/flow/blob/master/lib/dom.js#L210">DOM type definitions file</a>.</p>

<p>To populate instances of the <code>StoryListItem</code> component,
we will need to make API requests and update some state.
Here is a type for that state,
and the parameters for the top-level component, which will manage that state:</p>

<p>```js
type AppProps = {
  numStories: number,
}</p>

<p>type AppState = {
  selectedStory?: ?Story,
  stories?: Story[],
  error?: Error,
}</p>

<p>class App extends React.Component&lt;AppProps, AppState&gt; {
  constructor(props: AppProps) {
    super(props)
    this.state = {}
  }</p>

<p>/* … */
}
```</p>

<p>The definition of <code>AppState</code> shows that the state will hold an array of <code>stories</code>,
which will not be defined while stories are loading;
a <code>selectedStory</code>,
which will be defined when the user is viewing comments on a story;
and an <code>error</code>,
in case something goes wrong while loading stories.</p>

<p>Because every property in <code>AppState</code> is optional,
<code>state</code> can be initialized as an empty object.
(The question mark at the end of a property name indicates that property might
not be set.)
<code>selectedStory</code> is optional, and its type is nullable,
so there are two question marks on that line.
That is because <code>selectedStory</code> is initially not set,
and after a user views a story and then backs out to the story list
<code>selectedStory</code> will be set to <code>null</code>.</p>

<p>Since <code>App</code> has a <code>constructor</code>,
we specify the props type both in the second class type parameter,
and again in the type of the <code>props</code> argument to <code>constructor</code>.
That is because a subclass can define a constructor with a signature that
differs from the parent class’ constructor.
It would not make much sense to do that in a React Component;
but Flow must be able to check all sorts of classes,
so it does not make assumptions about types of constructor arguments.</p>

<p><code>App</code> will fetch stories when it is mounted.
So we extend its definition with a <code>componentDidMount</code> callback.</p>

<p>```js
import { fetchTopStories } from ‘flow-cookbook-hacker-news’</p>

<p>class App extends React.Component&lt;AppProps, AppState&gt; {
  /* … same as before */</p>

<p>componentDidMount() {
    fetchTopStories(this.props.numStories /* number of stories to fetch */)
      .then(stories =&gt; {
        // On success, update component state with an array of stories
        this.setState({ stories })
      })
      .catch(error =&gt; {
        // On error, update state to capture the error for display
        this.setState({ error })
      })
  }</p>

<p>/* … */
}
```</p>

<p><code>fetchTopStories</code> takes an argument that specifies the number of stories to
fetch,
and it returns a promise.</p>

<p>Once stories are loaded we can display them via a <code>render</code> method.
But the component will initially display while the API request is loading;
so we will have to check whether stories have loaded,
and display a loading indicator if they are not ready.</p>

<p>```js
class App extends React.Component&lt;AppProps, AppState&gt; {
  /* … */</p>

<p>render() {
    const { error, selectedStory, stories } = this.state</p>

<pre><code>let content
if (error) {
  // an error occurred fetching stories
  content = &lt;p className="error"&gt;{error.message}&lt;/p&gt;
}
else if (selectedStory) {
  // the user is looking at comments on a story
  content = &lt;StoryView
    story={selectedStory}
    onNavigateBack={() =&gt; this.deselectStory()}
  /&gt;
}
else if (stories) {
  // stories are loaded, so display a line item for each story
  content = stories.map(story =&gt; (
    &lt;StoryListItem
      story={story}
      onSelect={() =&gt; this.selectStory(story)}
      key={story.id}
    /&gt;
  ))
}
else {
  // no error and no stories means that stories are still loading
  content = &lt;p className="loading"&gt;loading...&lt;/p&gt;
}

return (
  &lt;div className="App"&gt;
    &lt;div className="App-header"&gt;
      &lt;h1&gt;Flow Cookbook: React Example&lt;/h1&gt;
    &lt;/div&gt;
    &lt;div&gt;
      {content}
    &lt;/div&gt;
  &lt;/div&gt;   }
</code></pre>

<p>/* … */
}
```</p>

<p>The import piece of the JSX that is finally returned from <code>render</code> is <code>content</code>,
which is assigned a different value depending on whether an error occurred
while fetching stories,
a specific story has been selected,
or there is an array of stories available, and none has been selected.
If none of those cases applies,
then it means that stories are still loading.</p>

<p>When displaying a list of stories, <code>content</code> is populated by a list of
instances of <code>StoryListItem</code>,
which we defined earlier.
There is nothing special about rendering a type-checked component -
you pass props the same way as with any component.</p>

<p>Flow can track changes to the type of a variable over a series of statements.
Flow infers that when <code>content</code> is first defined its type is <code>void</code>;
and it infers that no matter which code path gets executed,
by the time we get to the <code>return</code> statement the type has changed to either
<code>React.Element&lt;*&gt;</code> or <code>React.Element&lt;*&gt;[]</code> -
either of which is compatible with Flow’s expectations for JSX content.</p>

<p>The event handling methods <code>selectStory</code> and <code>deselectStory</code> make state changes
to track whether the user is looking at a specific story:</p>

<p>```js
class App extends React.Component&lt;AppProps, AppState&gt; {
  /* … */</p>

<p>selectStory(story: Story) {
    this.setState({ selectedStory: story })
  }</p>

<p>deselectStory() {
    this.setState({ selectedStory: null })
  }
}
```</p>

<p>Those state changes affect the output from <code>render</code> to switch between displaying
a list of story titles, or a detail view for a single story.</p>

<p>At this point
we have made references to <code>App</code>’s state in <code>componentDidMount</code>, <code>render</code>,
<code>selectStory</code>, and <code>deselectStory</code>.
Flow checks all of those uses against the definition of <code>AppState</code>.
For example, if we made a mistaken assumption that <code>selectedStory</code> holds an ID,
as opposed to a value of type <code>Story</code>,
and tried to write something like <code>this.setState({ selectedStory: story.id })</code>
Flow would report an error, and point out the mismatch.</p>

<p>I have not given the implementation of <code>StoryView</code>,
which is responsible for displaying comments on a story.
It happens that <code>StoryView</code> is quite similar to <code>App</code> -
except that <code>StoryView</code> loads comments where <code>App</code> loads stories.
The interested reader can see the full details of <code>StoryView</code> in the
<a href="https://github.com/hallettj/flow-cookbook-react/blob/master/src/StoryView.js">accompanying code</a>.</p>

<p>Complete working code is available at
<a href="https://github.com/hallettj/flow-cookbook-react">https://github.com/hallettj/flow-cookbook-react</a>.
Your next assignment is to clone that code and to add some features.
Some ideas to try are to add links to the original article for each story,
or to display profile pages for posters and commenters.</p>

<p>The example code here uses React’s own state features to manage app state.
That helps to keep this recipe self-contained.
But in my opinion the best practice is to keep state in a third-party
state-management framework such as <a href="http://redux.js.org/">Redux</a>.
For details on using Flow with Redux and <a href="http://redux.js.org/docs/basics/UsageWithReact.html">react-redux</a>
take a look at the next recipe, <a href="/todo.html">Flow &amp; Redux</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow Cookbook: Unpacking JSON API data]]></title>
    <link href="http://sitr.us/2016/12/20/flow-cookbook-unpacking-json.html"/>
    <updated>2016-12-20T00:00:00-04:00</updated>
    <id>http://sitr.us/2016/12/20/flow-cookbook-unpacking-json</id>
    <content type="html"><![CDATA[<p><em>This recipe is part of the <a href="/2016/12/20/flow-cookbook.html">Flow Cookbook</a> series.</em></p>

<p>Hacker News provides <a href="https://github.com/HackerNews/API">a public API</a>.
One of the endpoints of that API accepts an ID and responds with an item:</p>

<p><code>js
fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)
</code></p>

<p>Here is an example of a response:</p>

<p><code>js
{
  "by" : "todd8",
  "dead" : true,
  "id" : 13225417,
  "score" : 1,
  "time" : 1482277147,
  "title" : "U.S. Department of Energy Misconduct [pdf]",
  "type" : "story",
  "url" : "http://freebeacon.com/wp-content/uploads/2016/12/2016-12-19-Final-Staff-Report-LDRR.pdf"
}
</code></p>

<p>An “item” might be a story, a comment, a question, a job posting, a poll, or
a voting option in a poll.
Each item type has different properties -
for example stories have a <code>title</code>, but comments do not.
If you don’t have context for the ID,
the only way to know what you have fetched is to check the <code>type</code> property of
the response at runtime.
To add type safety to a call to this API,
it is necessary to describe a type that encompasses all of the possible shapes
that the returned data might take.
That is going to be a <a href="https://flowtype.org/docs/union-intersection-types.html">union type</a>, which will look something like this:</p>

<!-- more -->

<p><code>js
type Item =
  | { type: 'story',   /* story properties */ }
  | { type: 'ask',     /* ask properties */ }
  | { type: 'job',     /* job properties */ }
  | { type: 'poll',    /* poll properties */ }
  | { type: 'pollopt', /* pollopt properties */ }
  | { type: 'comment', /* comment properties */ }
</code></p>

<p>There are not a huge number of properties in the API responses -
but if we list out all of the properties in every branch the result will be too
big and dense for light reading.
So let’s start by factoring out common properties into helper types.</p>

<p>All of the different item types have <code>by</code>, <code>id</code>, and <code>time</code> properties.
So we can put those all into one type:</p>

<p><code>js
// Properties common to all item types
type ItemCommon = {
  by:   Username,
  id:   ID,
  time: number,
}
</code></p>

<p>Those <code>Username</code> and <code>ID</code> types are just aliases that I defined for primitive
types:</p>

<p><code>js
// These type aliases just help to illustrate the purpose of certain properties
type Username = string
type ID = number
type URL = string
</code></p>

<p>I think that using aliases like these helps to provide clarity on the purpose
of each property.
If we had a property with the type <code>by: string</code> it would not be obvious whether
the value of that property is an ID that happens to be a string,
or a human-readable value.
Using the <code>Username</code> type alias makes it obvious that the property will contain
a value that might be suitable for display to users.
Otherwise the types <code>string</code> and <code>Username</code> are interchangeable.</p>

<p>There is more common structure in Hacker News item types:
the story, ask, job, and poll response types all represent top-level submissions,
which have several properties in common:</p>

<p><code>js
// Properties common to top-level item types
type TopLevel = {
  descendents: number,
  score: number,
  title: string,
}
</code></p>

<p>With those helper types in place,
we can produce a type that describes all possible items:</p>

<p><code>js
type Item =
  | { type: 'story', kids: ID[], url: URL }                 &amp; ItemCommon &amp; TopLevel
  | { type: 'ask',  kids: ID[], text: string, url: URL }    &amp; ItemCommon &amp; TopLevel
  | { type: 'job', text: string, url: URL }                 &amp; ItemCommon &amp; TopLevel
  | { type: 'poll', kids: ID[], parts: ID[], text: string } &amp; ItemCommon &amp; TopLevel
  | { type: 'pollopt', parent: ID, score: number, text: string } &amp; ItemCommon
  | { type: 'comment', kids: ID[], parent: ID, text: string }    &amp; ItemCommon
</code></p>

<p>An <a href="https://flowtype.org/docs/union-intersection-types.html">intersection type</a> like
<code>{ type: 'story', kids: ID[], url: URL } &amp; ItemCommon &amp; TopLevel</code>
is essentially a shorthand for an object type with a <code>type</code> property that is
always equal to <code>'story'</code>, combined with all of the properties listed in the
<code>ItemCommon</code> and <code>TopLevel</code> types.
Each branch of the union type contains a type intersection that combines common
properties with the properties that are particular to each item
type.[^top-level union]</p>

<p><code>type Item = ItemCommon &amp; (/* union type */)</code>.
That would put the union type inside of the intersection type.
But due to a quirk in Flow as of version 0.36 the union type must be the
outermost layer of of composition for type narrowing to work.</p>

<p>We don’t have to do anything special to parse incoming data into that type.
<a href="TODO">Flow types are duck types</a> -
<code>Item</code> is just an alias for plain Javascript objects with a certain structure.
We just need to declare that API responses have the <code>Item</code> type.
That is done with with the return type in this function signature:</p>

<p><code>js
function fetchItem(id: ID): Promise&lt;Item&gt; {
  return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)
    .then(res =&gt; res.json())
}
</code></p>

<p>You might have noticed something a little strange about the types of the <code>type</code>
properties in <code>Item</code>.
We used string literals where there should have been type expressions!
For example, we gave <code>'story'</code> as a type in the first branch of the union type.
In fact string literals <em>are</em> types.
In a type expression, the literal <code>'story'</code> is a type with exactly one possible
value: the string <code>'story'</code>.
(<code>'story'</code> is a subtype of the more general type, <code>string</code>.)
This is useful because it signals to Flow which branch of the union type is
applicable inside the body of a <code>case</code> or <code>if</code> statement.</p>

<p>Consider this function, which does not type-check:</p>

<p><code>js
function getTitle(item: Item): string {
  // Fails because not every branch of the union type has a `title` property.
  return item.title
}
</code></p>

<p>Flow can narrow the type of a variable in certain contexts.
A runtime comparison with a static string literal does the trick:</p>

<p><code>js
function getTitle(item: Item): ?string {
  if (item.type === 'story') {
    // This works because this line is only reachable if the type of
    // `item.type` is `'story'`, which means that `item` can be expected to
    // have a `title` property.
    return item.title
  }
}
</code></p>

<p>Hacker News does provide endpoints for fetching recent submissions of
a specific item type (e.g., the latest stories).
But to demonstrate the flexibility of the <code>Item</code> type,
let’s write some code that fetches and displays the latest items of any type.
We will need to switch on the <code>type</code> property of each item to display it
properly:</p>

<p><code>js
function formatItem(item: Item): string {
  switch (item.type) {
    case 'story':
      return `"${item.title}" submitted by ${item.by}`
    case 'ask':
      return `${item.by} asked: ${item.title}`
    case 'job':
      return `job posting: ${item.title}`
    case 'poll':
      return `poll: "${item.title}" - choose one of ${item.kids.length} options`
    case 'pollopt':
      return `poll option: ${item.text}`
    case 'comment':
      return `${item.by} commented: ${item.text.slice(0,60)}...`
    default:
      throw new Error(`unknown item type: ${item.type}`)
  }
}
</code></p>

<p>Flow is able to infer which item type is given in each <code>case</code> body.
This is just like how type-narrowing worked in the <code>if</code> body in the <code>getTitle</code>
function.</p>

<p>Flow’s checking has an added bonus:
if you have a <code>case</code> body with no <code>return</code> or <code>break</code> statement,
execution falls through into the next <code>case</code> body.
When switching on <code>item.type</code>, a fall-through would result in a situation
where a <code>case</code> body might be executed with any of several different item types.
For example:</p>

<p><code>js
function getTitleCowboyStyle(item: Item): ?string {
  switch (item.type) {
    case 'story':
    case 'ask':
    case 'job':
    case 'poll':
      return item.title
  }
}
</code></p>

<p>Flow allows this, because all of the types listed in that example have
a <code>title</code> property.
But if a <code>case</code> body did something not compatible with all of the different
item types that could fall-through into it, then Flow would report an error.</p>

<p>Next up are functions to determine which items to fetch, and to make the
necessary requests:</p>

<p>```js
// Fetches the largest ID, which should be the ID of the most recently-created
// item.
function fetchMaxItemId(): Promise<id> {
  return nodeFetch(`https://hacker-news.firebaseio.com/v0/maxitem.json`)
    .then(res =&gt; res.json())
}</id></p>

<p>async function fetchLatestItems(n: number): Promise&lt;Item[]&gt; {
  const maxId = await fetchMaxItemId()
  const fetches = []
  for (let i = 0; i &lt; n; i++) {
    fetches.push(fetchItem(maxId - i))
  }
  return Promise.all(fetches)
}
```</p>

<p>And finally, some code to set everything running:</p>

<p><code>js
async function main() {
  const latestItems = await fetchLatestItems(15)
  latestItems.forEach(item =&gt; {
    console.log(formatItem(item) + "\n")
  })
}
</code></p>

<h2 id="refining-the-model">Refining the model</h2>

<p>Later on we may realize that it would be useful to be able to refer to each
item type individually.
To do that, we can create a named alias for each item type:</p>

<p><code>js
type Story   = { type: 'story', kids: ID[], url: URL }                 &amp; ItemCommon &amp; TopLevel
type Ask     = { type: 'ask',  kids: ID[], text: string, url: URL }    &amp; ItemCommon &amp; TopLevel
type Job     = { type: 'job', text: string, url: URL }                 &amp; ItemCommon &amp; TopLevel
type Poll    = { type: 'poll', kids: ID[], parts: ID[], text: string } &amp; ItemCommon &amp; TopLevel
type PollOpt = { type: 'pollopt', parent: ID, score: number, text: string } &amp; ItemCommon
type Comment = { type: 'comment', kids: ID[], parent: ID, text: string }    &amp; ItemCommon
</code></p>

<p>Then we can replace the earlier definition of <code>Item</code> with a simpler one:</p>

<p><code>js
type Item = Story | Ask | Job | Poll | PollOpt | Comment
</code></p>

<p>This well let us write specialized functions,
such as a function that specifically formats a poll with its options.</p>

<p><code>js
function formatPoll({ by, title }: Poll, opts: PollOpt[]): string {
  const headline = `${by} started a poll: "${title}"`
  return headline + opts.map(opt =&gt; `  - ${opt.text}`)
}
</code></p>

<p>So how do we get to a point where we can call a function that accepts only
polls?
The answer is, once again, type-narrowing:</p>

<p>```js
async function fetchPollOpts({ parts }: Poll): Promise&lt;PollOpt[]&gt; {
  const promises = parts.map(fetchItem)
  const items = await Promise.all(promises)
  return flatMap(items, item =&gt; (
    item.type === ‘pollopt’ ? [item] : []
  ))
}</p>

<p>async function displayItem(item) {
  if (item.type === ‘poll’) {
    // At this point the type of <code>item</code> has been narrowed so that we can pass it
    // to specialized functions.
    const opts = await fetchPollOpts(item)
    formatPoll(item, opts)
  }
  else if (item.type === ‘pollopt’) {
    // do nothing
  }
  else {
    console.log(formatItem(item) + “\n”)
  }
}
```</p>

<p>Notice the use of <code>flatMap</code> in <code>fetchPollOpts</code>.
This filters results to check that the results are actually poll options.
At the same time, Flow is able to infer that the filtered results all have the
<code>PollOpt</code> type.
This uses a custom definition for <code>flatMap</code>:</p>

<p><code>js
// Provides flexible array processing - this function can be used to remove
// items from an array, to replace individual items with multiple items in the
// output array, or pretty much anything you might need.
function flatMap&lt;A, B&gt;(xs: A[], fn: (x: A) =&gt; B[]): B[] {
  const result = []
  for (const x of xs) {
    result.push.apply(result, fn(x))
  }
  return result
}
</code></p>

<p>If you trust that all of the items that are fetched will be of the right type,
and you do not want to bother with a runtime check,
then you could use a type-cast instead:</p>

<p><code>js
async function fetchPollOpts({ parts }: Poll): Promise&lt;PollOpt[]&gt; {
  const promises = parts.map(fetchItem)
  return (Promise.all(promises):any)
}
</code></p>

<p>Finally, here is a function that feeds fetched items to the new-and-improved
item formatting function:</p>

<p><code>js
export async function betterClient() {
  const latestItems = await fetchLatestItems(15)
  for (const item of latestItems) {
    await displayItem(item)
  }
}
</code></p>

<p>The code from this article is available at
<a href="https://github.com/hallettj/hacker-news-example">https://github.com/hallettj/hacker-news-example</a>.
I encourage you to check out the code to tinker with it.
Try building more functionality,
and see how type-checking affects the way you write code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow Cookbook]]></title>
    <link href="http://sitr.us/2016/12/20/flow-cookbook.html"/>
    <updated>2016-12-20T00:00:00-04:00</updated>
    <id>http://sitr.us/2016/12/20/flow-cookbook</id>
    <content type="html"><![CDATA[<p>Type-checking can be a useful asset in a Javascript project.
A type checker can catch problems that are introduced when adding features or
refactoring, which can reduce the amount of time spent debugging and testing.
Type annotations provide a form of always-up-to-date documentation that makes
it easier for developers to understand an unfamiliar code base.
But it is important to use type-checking effectively to get its full benefit.</p>

<p>The Javascript community is fortunate to have a choice of two great type
checkers.
These recipes focus on <a href="https://flowtype.org/">Flow</a>, and introduce patterns for using Flow
effectively.</p>

<!-- more -->

<p>To get updates when new recipes or extras are posted,
subscribe to the <a href="http://feeds.feedburner.com/hallettj">Atom feed</a>,
or follow <a href="https://twitter.com/FlowCookbook">@FlowCookbook</a>.
I appreciate your requests, questions, and suggestions!
Please send feedback by leaving comments here, or on recipes or extras;
or send messages to <a href="https://twitter.com/FlowCookbook">@FlowCookbook</a>.</p>

<h2 id="recipes">Recipes</h2>

<p>These are primers on practical patterns for Flow.
I recommend using these patterns in any project that uses Flow.</p>

<p>(Coming soon) <em>Flow types are duck types</em> -
Flow is not a new, strait-jacketed OOP language.
Flow is not Java or C#.
Flow is a codification of previously-unwritten Javascript idioms.</p>

<p>(Coming soon) <em>Uses for union types</em>
introduces a pattern for managing data that comes in different shapes.
Union types are helpful for describing Redux actions,
for unpacking incoming JSON data,
and for passing messages over a channel.
If you have been tempted to use subclasses,
take a look at union types to see if they might be a better fit.</p>

<p><a href="/2016/12/20/flow-cookbook-unpacking-json.html">Unpacking JSON API data</a> -
Javascript’s flexibility is useful for handling incoming data in whatever form
it may take.
Flow is designed to be just as flexible when type-checking functions that
process data.
This is a case study that uses the Hacker News API as an example for type-safe
data processing.</p>

<p><a href="/2017/01/03/flow-cookbook-react.html">Flow &amp; React</a> -
This recipe demonstrates how to use Flow effectively when creating React
components.
Including type parameters in <a href="https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components">functional and class components</a> provides an
alternative to <code>propTypes</code> that can provide better safety and modularity.</p>

<p>(Coming soon) <em>Flow &amp; Redux</em> -
Flow and Redux could have been made for each other.
This recipe demonstrates several patterns that are useful for building Redux
action creators and reducers.
This is a companion to the post on React.</p>

<h2 id="extras">Extras</h2>

<p>Extras are not about practical patterns.
In these articles we explore ideas just because they are interesting.
Read these if you want to dig deeper into type theory,
or to learn about Flow’s lesser-known capabilities.</p>

<p>(Coming soon) <em>What are types?</em>
The short answer is, types are sets of possible values.
This post gets into what that means,
and shows that Flow takes more of a purist approach to types compared to most
object-oriented languages.</p>

<p>(Coming soon) <em>The “algebra” in “algebraic data types”</em> -
In the recipe <em>Uses for union types</em> I mentioned that union types are also
called “sum types” or “algebraic data types”.
This post gives a brief background on type algebra so that you can understand
where those terms come from.</p>

<p>(Coming soon) <em>Advanced algebraic data types</em> -
Union types are great, but not perfect.
This post introduces an alternative formulation for sum types that allows Flow
to check for missing pattern matches.
It also shows that GADTs are <em>almost</em> possible in Flow.</p>

<h2 id="more-resources">More resources</h2>

<p>Flow has inspired many programmers to put bits to screen.
Here are some articles that I found to particularly helpful:</p>

<p><a href="https://flowtype.org/docs/getting-started.html">Getting started with Flow</a>
is a tutorial from the official documentation.
If you don’t know where to start, start there.</p>

<p>Why use type-checking?
And if you do, <a href="https://blog.aria.ai/post/why-use-flow/">Why Use Flow?</a>
Follow that link for the answers,
and learn some things that you might not know about Flow.
Aria Fallah covers a lot of background,
and also introduces some interesting work from <a href="https://medium.com/@gcanti">Giulio Canti</a>.</p>

<p><a href="http://javascriptplayground.com/blog/2017/01/npm-flowjs-javascript/">Authoring and publishing JavaScript modules with Flow</a>
is a detailed guide on publishing an NPM module with Flow type annotations
included,
so that anyone who uses the library can benefit from those annotations if they
choose to use Flow as well.</p>

]]></content>
  </entry>
  
</feed>
