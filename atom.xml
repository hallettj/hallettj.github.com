<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sitr.us]]></title>
  <link href="http://sitr.us/atom.xml" rel="self"/>
  <link href="http://sitr.us/"/>
  <updated>2014-09-17T15:35:43-07:00</updated>
  <id>http://sitr.us/</id>
  <author>
    <name><![CDATA[Jesse Hallett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript generators and functional reactive programming]]></title>
    <link href="http://sitr.us/2014/08/02/javascript-generators-and-functional-reactive-programming.html"/>
    <updated>2014-08-02T00:00:00-07:00</updated>
    <id>http://sitr.us/2014/08/02/javascript-generators-and-functional-reactive-programming</id>
    <content type="html"><![CDATA[<p>tl;dr: ECMAScript 6 introduces a language feature called <a href="http://tobyho.com/2013/06/16/what-are-generators/">generators</a>, which
are really great for working with asynchronous code that uses promises.  But
they do not work well for <a href="http://sitr.us/2013/05/22/functional-reactive-programming-in-javascript.html">functional reactive programming</a>.</p>

<p>ES6 generators allow asynchronous code to be written in a way that looks
synchronous.  This example uses a hypothetical library called Do (implementation
below) that makes <a href="http://sitr.us/2012/07/31/promise-pipelines-in-javascript.html">promises</a> work with generators:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">postWithAuthor</span> <span class="o">=</span> <span class="nx">Do</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">post</span>   <span class="o">=</span> <span class="nx">yield</span> <span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/posts/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">author</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/users/&#39;</span><span class="o">+</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">post</span><span class="p">,</span> <span class="p">{</span> <span class="nx">author</span><span class="o">:</span> <span class="nx">author</span> <span class="p">})</span>
<span class="p">})</span>

<span class="nx">Do</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">post</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">postWithAuthor</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Post written by&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">author</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
<span class="p">})()</span>
</code></pre></div>

<p>It is possible to use generators now in Node.js version 0.11 by using the
<code>--harmony</code> flag.  Or you can use <a href="https://github.com/google/traceur-compiler">Traceur</a> to transpile ES6 code with
generators into code that can be run in any ES5-compatible web browser.</p>

<!-- more -->

<p>I recently saw an informative talk from <a href="http://jbr.me/">Jacob Rothstein</a> on <a href="https://github.com/visionmedia/co">Co</a> and
<a href="https://github.com/koajs/koa">Koa</a>.  Those are libraries that make full use of generators to make writing
asynchronous code pleasant.  The implementation of the above example in Co is
almost identical.</p>

<p>Co operates on promises and thunks, allowing them to be expanded with
the <code>yield</code> keyword.  It has nice options for pulling nested
asynchronous values out of arrays and objects, running asynchronous
operations in parallel, and so forth.  One can even use <code>try</code> / <code>catch</code>
to catch errors thrown in asynchronous code!</p>

<p>Co is specialized for asynchronous code.  But when I look at it I see something
that is really close to being a monad comprehension - very much like the <a href="http://learnyouahaskell.com/a-fistful-of-monads#do-notation">do
notation</a> feature in Haskell.  With just a little tweaking, the use of
generators that Co has pioneered can almost be generalized to work with any
kind of monad.</p>

<p>For example, libraries like <a href="http://reactive-extensions.github.io/RxJS/">RxJs</a> and <a href="https://github.com/baconjs/bacon.js/">Bacon.js</a> implement event streams,
which are a lot like promises, except that callbacks on event streams can run
more than once.  This example uses Bacon to manage a typeahead search feature in
a web interface:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">searchQueries</span> <span class="o">=</span> <span class="nx">Do</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">inputs</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;keyup change&#39;</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">singleInputEvent</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">inputs</span>
    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">singleInputEvent</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">query</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// passes the query through</span>
        <span class="k">return</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// excludes this query from the searchQueries stream</span>
        <span class="k">return</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">never</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">resultView</span> <span class="o">=</span> <span class="nx">Do</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">,</span> <span class="nx">resultsElement</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">searchQueries</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">fromPromise</span><span class="p">(</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/search/&#39;</span><span class="o">+</span> <span class="nx">query</span><span class="p">))</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">resultsElement</span><span class="p">).</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">results</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">)</span>
<span class="p">})</span>

<span class="nx">resultView</span><span class="p">(</span><span class="s1">&#39;#search&#39;</span><span class="p">,</span> <span class="s1">&#39;#results&#39;</span><span class="p">)</span>
</code></pre></div>

<p>The idea is that when the user enters more than two characters of text into
a search box, a background request is dispatched and search results appear on
the page automatically.  This example requires a library that is a little more
general than Co, that is able to operate on Bacon event streams in addition to
promises and thunks.  Here is a basic implementation of that library:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">Do</span><span class="p">(</span><span class="nx">mkGen</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="cm">/* arguments */</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">mkGen</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>

        <span class="kd">function</span> <span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
            <span class="k">return</span> <span class="nx">handleResult</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="kd">function</span> <span class="nx">handleError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">res</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">handleResult</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">e</span>
            <span class="p">}</span>

        <span class="p">}</span>

        <span class="kd">function</span> <span class="nx">handleResult</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">done</span> <span class="o">?</span> <span class="nx">res</span><span class="p">.</span><span class="nx">value</span> <span class="o">:</span> <span class="nx">flatMap</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">handleError</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">flatMap</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">m</span><span class="p">.</span><span class="nx">then</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>  <span class="c1">// handles promises</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">m</span><span class="p">.</span><span class="nx">flatMap</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">f</span><span class="p">).</span><span class="nx">onError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>  <span class="c1">// handles Bacon event streams (or properties)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;No implementation of flatMap for this type of argument.&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>This is the function that makes the example at the top of this post work.  It is
a simplified version of what Co does - the difference being that Do delegates to
a <code>flatMap</code> function to handle yielding.  We just need an implementation of
<code>flatMap</code> that can operate on some different monad types.  The one above works
with promises or with Bacon event streams.  An implementation that is easier to
extend would be nice; but I will leave that problem for another time.</p>

<p>Unfortunately, the Bacon example does not work.  Streams - unlike promises - get
many values.  That means that the code in each generator has to run many times
(once for each stream value).  But ES6 generators are not reentrant: after
resuming a generator from the point of a given <code>yield</code> expression, it is not
possible to jump back to that entry point again (assuming the generator does not
contain a loop).  With the Bacon example, after the first <code>keyup</code> or <code>change</code>
event the search result list will just stop updating.</p>

<p>Getting synchronous-style functional reactive programming to work well would
require stateless, reentrant generators.  ES6 generators are stateful: every
invocation of a generator changes the way that it will behave on the next
invocation:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">yield</span> <span class="mi">1</span>
    <span class="nx">yield</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>

<span class="nx">g</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">()</span>  <span class="c1">// initialize the generator</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
</code></pre></div>

<p>A stateless implementation would return a new object with a function for the
next generator entry point, instead of modifying the original generator:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">g</span>  <span class="o">=</span> <span class="nx">gen</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">g1</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g1</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">g2</span> <span class="o">=</span> <span class="nx">g1</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g2</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">g3</span> <span class="o">=</span> <span class="nx">g2</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g3</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span>

<span class="c1">// We can go back to previous entry points.</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g1</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>

<p>A stateless generator could be implemented with some simple syntactic
transforms.  The basic case:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="o">*</span><span class="p">(</span><span class="nx">args</span><span class="p">...)</span> <span class="p">{</span>
    <span class="nx">preceding_statements</span>
    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">x</span>
    <span class="nx">following_statements</span>
<span class="p">}</span>
</code></pre></div>

<p>would transform to:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">(</span><span class="nx">args</span><span class="p">...)</span> <span class="p">{</span>
    <span class="nx">preceding_statements</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="nx">x</span><span class="p">,</span>
        <span class="nx">next</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">following_statements</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>There would just need to be a few cases to handle appearances of <code>yield</code> in
a <code>return</code> statement, a <code>try</code>-<code>catch</code> block, or as its own statement.  With that
kind of stateless design, the Bacon example would work fine.  But as far as
I know, there is no plan for stateless, reentrant generators in ECMAScript.</p>

<p>It is possible to make functional reactive programming work with non-reentrant
generators by using loops in the generators.  This approach is not as general or
as composable.  Asynchronous pieces would have to be declared specially at the
top of the function, for example.</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">searchQueries</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">inputs</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">searchInput</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;keyup change&#39;</span><span class="p">)</span> 
    <span class="nx">frp</span><span class="p">(</span><span class="nx">inputs</span><span class="p">,</span> <span class="kd">function</span><span class="o">*</span><span class="p">(</span><span class="nx">inputs_</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">singleInputEvent</span>
        <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">singleInputEvent</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">inputs_</span>
            <span class="nx">query</span> <span class="o">=</span> <span class="nx">singleInputEvent</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">query</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// passes the query through</span>
                <span class="nx">yield</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// excludes this query from the searchQueries stream</span>
                <span class="nx">yield</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">never</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div>

<p>Notice that <code>yield</code> is overloaded to accept asynchronous values and to return
results - which requires some awkward logic to inspect generator values.
I do not know how to implement <code>resultView</code> as a loop, since it requires
combining two event streams: search queries and JSON responses.  I do not see
any advantage of loops in generators over asynchronous-style callbacks.  But
maybe someone more imaginative than me can come up with a more elegant solution.</p>

<p><em>Edited 2014-08-04:</em> Fixed broken link, fixed incorrect indentation in code
snippets.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kinesis Advantage with DSA keycaps]]></title>
    <link href="http://sitr.us/2014/05/19/kinesis-advantage-with-dsa-keycaps.html"/>
    <updated>2014-05-19T00:00:00-07:00</updated>
    <id>http://sitr.us/2014/05/19/kinesis-advantage-with-dsa-keycaps</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/MPfjOyaNmMKZRL36XEekqRiaeoHcUFLQLN-Kx62XKbgN=w1024-h576-no" /></p>

<p>I now have a Kinesis Advantage keyboard for use at work.
I have been feeling some wrist strain recently;
and some of my coworkers were encouraging me to try one.
So I borrowed a Kinesis for a week, and found that I really liked it.
The contoured shape makes reaching for keys comfortable;
I find the column layout to be nicer than the usual staggered key arrangement;
and between the thumb-key clusters and the arrow keys,
there are a lot of options for mapping modifier keys that are in easy reach.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_175553491_HDR.jpg" width="" height="" title="Kinesis Advantage, before modification" /><span class="caption-text">Kinesis Advantage, before modification</span></span></p>

<p>But I really like the PBT keycaps on my <a href="http://imgur.com/a/XZ2hG">Leopold</a>.
I would not enjoy going back to plain, old ABS.
I also don’t want my keyboard to be just like every other Kinesis.
So I decided to get replacement keycaps.</p>

<!-- more -->

<p>I did some research on buying PBT keycaps with the same profiles as the stock Kinesis keys.
I assumed that I would end up getting blank keycaps -
putting together a set with legends appropriate for a Kinesis seemed like it would be a painful undertaking,
since there don’t seem to be any sets made specifically for the Kinesis.</p>

<p>Most keyboards - including the Kinesis Advantage - use what is called a DCS profile,
where the keys in each row have different heights and angles.
(That does not include laptop keyboards,
or island-style keyboards such as the ones that Apple sells.
Those are in their own categories.)
<span class="caption-wrapper left"><img class="caption" src="http://sitr.us/images/kinesis-dsa/angle3.jpg" width="" height="" title="DCS family: medium profile, cylindrical top, sculptured. &lt;br&gt; Image from Signature Plastics." /><span class="caption-text">DCS family: medium profile, cylindrical top, sculptured. <br /> Image from Signature Plastics.</span></span>
Input Nirvana on Geekhack has a post with <a href="http://geekhack.org/index.php?topic=29875.0">a list of all necessary keycap sizes and profiles</a>
to reproduce the arrangement on a stock Kinesis.
It is possible to order these individually from Signature Plastics;
but their inventory for <em>à la carte</em> orders varies depending on what they have left over
from production of large batches.
When I checked, SP did not have any row 5 PBT keycaps available.
I got the impression that building a custom DCS set would be somewhat difficult.</p>

<p>Then I saw prdlm2009 on Deskthority suggest that <a href="http://deskthority.net/photos-videos-f8/kinesis-advantage-with-spherical-keycaps-dsa-family-for-sp-t4842.html">DSA profile keycaps work well on a Kinesis</a>.
DSA is a uniform profile -
every key has the same height and angle.
It makes everything much simpler when dealing with unusual keyboard layouts,
or unusual keyboards.
<span class="caption-wrapper right"><img class="caption" src="http://sitr.us/images/kinesis-dsa/angle2.jpg" width="" height="" title="DSA family medium profile, spherical top, non-sculptured. &lt;br&gt; Image from Signature Plastics." /><span class="caption-text">DSA family medium profile, spherical top, non-sculptured. <br /> Image from Signature Plastics.</span></span>
DSA also features spherical tops.
If you look at the keys on a typical keyboard, you can see that the top curves up on the left and right sides -
as though someone had shaped them around a cylinder.
The tops of DSA keys are spherical; as though shaped around a large marble.
So the keys cup the fingertips from all sides.</p>

<p>Signature Plastics sells a variety of nice, blank DSA keycap sets.
I did not order the optimal combination of keycap sets;
but now I have a better idea of what that combination is.
The key count on an Advantage is:</p>

<ul>
  <li>56 – 1x keys (optionally including two homing keys)</li>
  <li>8 – 1.25x keys</li>
  <li>4 – 2x keys</li>
</ul>

<p>1x, 2x, etc. refers to the lengths of the keys.</p>

<p>One can get everything except the 1.25x keys with one <a href="http://keyshop.pimpmykeyboard.com/products/full-keysets/dsa-blank-numpad-sets-1">ErgoDox Base set</a>
and two <a href="http://keyshop.pimpmykeyboard.com/products/full-keysets/dsa-blank-numpad-sets">Numpad sets</a>.
The Numpad sets seem to be the cheapest way to get all 4 2x keycaps, along with additional 1x caps.
The only set that includes 1.25x caps is the Standard Modifier set,
which includes 7 of them.
(So close!)
I recommend ordering the 1.25x keycaps individually from the <a href="http://www.keycapsdirect.com/key-capsinventory.php">blank keycap inventory</a>.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_180022543_HDR.jpg" width="" height="" title="stock Kinesis keycaps (left), DSA keycaps (right)" /><span class="caption-text">stock Kinesis keycaps (left), DSA keycaps (right)</span></span></p>

<p>The keycaps from SP are much thicker than the stock keycaps.
And they are made from PBT plastic, which is denser than the more common keycap material, ABS.
What I like most about PBT caps is their texture.
The tops of the keys are usually slightly rough, somewhat pebbly.
It gives a little bit of grippiness,
and feels soothing on my fingers compared to featureless, flat plastic.
I also think that the sound of PBT keys being pressed is nicer.
It is slightly quieter, with a somewhat deeper tone.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_182527431_HDR.jpg" width="" height="" title="All of the stock keycaps have been removed, revealing Cherry MX Brown switches." /><span class="caption-text">All of the stock keycaps have been removed, revealing Cherry MX Brown switches.</span></span></p>

<p>The Kinesis Advantage comes with either <a href="http://deskthority.net/wiki/Cherry_MX_Brown">Cherry MX Brown</a> or <a href="http://deskthority.net/wiki/Cherry_MX_Red">Cherry MX Red</a> switches.</p>

<p>For anyone wondering how to remove keycaps from a keyboard with Cherry MX switches, here is a <a href="https://www.youtube.com/watch?v=FlUYCAZNNOw">video</a>.
What the video does not mention is that it is a good idea to wiggle the keycap puller while pulling up on the keycap.
That helps to avoid pulling with too much force, which could break a switch.</p>

<p>I have another keyboard that also has Cherry MX Brown switches,
and I really liked the change in key feel after installing o-rings.
O-rings make typing a little quieter,
and add some springiness to the bottom of the key travel.
A tradeoff is that they reduce the length of key travel a bit.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_182759811.jpg" width="" height="" title="installing o-rings in the new keycaps" /><span class="caption-text">installing o-rings in the new keycaps</span></span></p>

<p>I used <a href="http://www.wasdkeyboards.com/index.php/cherry-mx-rubber-o-ring-switch-dampeners-125pcs.html#ad-image-0">40A-R o-rings from WASD</a>, which are relatively thick and soft.
But when I tried these out with the DSA keycaps I could not discern any difference
between a key with an o-ring and one without.</p>

<p>Comparing the underside of a DSA keycap to a typical DCS keycap reveals the issue:</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_180233205.jpg" width="" height="" title="blank DSA keycaps from SP (top), keycaps from a Leopold FC660M (bottom)" /><span class="caption-text">blank DSA keycaps from SP (top), keycaps from a Leopold FC660M (bottom)</span></span></p>

<p>DCS keycaps have cross-shaped supports under the cap,
which contact the top of the switch housing when the key is fully depressed.
O-rings sit between those supports and the switch housing,
absorbing some force from contact.
But the DSA keycaps lack those supports.
That means that the switch can reach the bottom of its travel
before the underside of the keycap contacts the switch housing.</p>

<p>I found that doubling up o-rings pushed the rubber high enough to be effective.
But I was concerned that two o-rings shorted key travel too much
and introduced too much squishiness.
In the end I left the o-rings out entirely.
I may take another shot using either thinner, firmer o-rings,
or with small washers in place of a second o-ring.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_183902311.jpg" width="" height="" title="two o-rings installed in one keycap" /><span class="caption-text">two o-rings installed in one keycap</span></span></p>

<p>When I ordered my keycaps I got one ErgoDox Base set and one ErgoDox Modifier set.
I did not do enough checking - I assumed that the 1.5x keys in the Modifier set
would fit in the Kinesis.
But it turns out that the keys in the leftmost and rightmost columns of the Kinesis
take 1.25x keycaps.
The larger keycaps do not fit.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_190504044_HDR.jpg" width="" height="" title="Whoops!  That was supposed to be a 1.25x key, not a 1.5x." /><span class="caption-text">Whoops!  That was supposed to be a 1.25x key, not a 1.5x.</span></span></p>

<p>I have ordered some appropriately sized keycaps.
In the meantime, I am using 1x keycaps in the 1.25x positions.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_190751151_HDR.jpg" width="" height="" title="stock 1.25x Tab key next to its intended, blank replacement" /><span class="caption-text">stock 1.25x Tab key next to its intended, blank replacement</span></span></p>

<p>Even though the DSA keycaps are not the same shape as the stock caps,
they fit quite well on the Kinesis.
There are just two slightly problematic spots.
The photo below shows the one key that comes into contact with the edge of the keyboard case when it is not depressed.
Thankfully the operation of the key does not seem to be affected.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_190931944.jpg" width="" height="" title="The fit is tight in this corner." /><span class="caption-text">The fit is tight in this corner.</span></span></p>

<p>Due to small differences in switch positioning,
the key in the same position in the other well has a little bit of clearance.</p>

<p>The other problem is that two of my 2x keys overlap very slightly.
When I press the one on the right there is sometimes an extra <em>click</em>
as it pushes past its neighbor.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_194515105.jpg" width="" height="" title="There is not quite enough space between these two keys." /><span class="caption-text">There is not quite enough space between these two keys.</span></span></p>

<p>I am thinking of sanding down the corners of these keys a little bit to fix the problem.</p>

<p>This is another case where there is no problem with the keys in the same positions on the other side of the board.
It seems that the switches in the left thumb cluster just happen to be
a little too close together on my board.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_194232464_HDR.jpg" width="" height="" title="All done!" /><span class="caption-text">All done!</span></span></p>

<p>Since I had to use 1u keycaps for the leftmost and rightmost columns,
I ended up not having enough keycaps to replace the two keycaps in the top of each thumb cluster.
But I think that having tall keycaps there makes them easier to press -
those positions are a bit difficult to reach otherwise.
So I may just keep the stock caps on those keys.
Or I might try to get tall, DCS profile, PBT caps for those positions.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140515_194415103_HDR.jpg" width="" height="" title="closeup of one of the wells to show key spacing" /><span class="caption-text">closeup of one of the wells to show key spacing</span></span></p>

<p>The other positions where I think that DSA does not work really well are the four keys in the bottom row of each well.
I curl my fingers down to reach those;
and I tend to either hit the edges of the keys,
or to press them with my fingernail instead of with my finger.
The stock keycaps for those positions are angled toward the center of the well,
making it easier to reach the tops of the keys.</p>

<p>Those points aside,
I am very pleased with how these new keycaps worked out!
The DSA profile is quite comfortable.
I love the texture of the PBT keycaps.
And they make a more pleasant sound than the thinner ABS caps that came with the board.</p>

<p><span class="caption-wrapper"><img class="caption" src="http://sitr.us/images/kinesis-dsa/IMG_20140518_185154.jpg" width="" height="" title="shoe for science!" /><span class="caption-text">shoe for science!</span></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Category Theory proofs in Idris]]></title>
    <link href="http://sitr.us/2014/05/05/category-theory-proofs-in-idris.html"/>
    <updated>2014-05-05T00:00:00-07:00</updated>
    <id>http://sitr.us/2014/05/05/category-theory-proofs-in-idris</id>
    <content type="html"><![CDATA[<p><a href="http://www.idris-lang.org/">Idris</a> is a programming language with dependent types.
It is similar to <a href="http://wiki.portal.chalmers.se/agda/pmwiki.php">Agda</a>, but hews more closely to <a href="http://www.haskell.org/haskellwiki/Haskell">Haskell</a>.
The goal of Idris is to bring dependent types to general-purpose programming.
It supports multiple compilation targets, including C and Javascript.</p>

<p>Dependent types provide an unprecedented level of type safety.
A quick example is a <a href="https://www.youtube.com/watch?v=fVBck2Zngjo">type-safe printf implementation (video)</a>.
They are also useful for theorem proving.
According to the <a href="http://en.wikipedia.org/wiki/Curry–Howard_correspondence">Curry-Howard correspondence</a>,
mathematical propositions can be represented in a program as types.
An implementation that satisfies a given type
serves as a proof of the corresponding proposition.
In other words, inhabited types represent true propositions.</p>

<p>The Curry-Howard correspondence applies to every language with type checking.
But the type systems in most languages are not expressive enough
to build very interesting propositions.
On the other hand,
dependent types can express quantification
(i.e., the mathematical concepts of universal quantification (∀) and existential quantification (∃)).
This makes it possible to translate a lot of interesting math into machine-verified code.</p>

<!-- more -->

<p>This post is written in literate Idris.
The <a href="http://sitr.us/Cat.lidr">original markup</a> can be compiled and type-checked.
Code blocks that are prefixed with greater-than symbols (&gt;) in the markup are evaluated.
Blocks that are marked off with three backticks
are given for illustrative purposes and are not evaluated.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">Cat</span>
</span><span class="line">
</span><span class="line"><span class="kr">import</span> <span class="nn">Control.Isomorphism</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Data.Morphisms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Idris, partial functions are allowed by default.
A totality requirement can be specified per-function.
This line enforces totality checking by default for functions in this module.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="o">%</span><span class="kr">default</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A function that is <em>total</em> is guaranteed to terminate
and to return a well-typed output for every possible input.<sup id="fnref:totality"><a href="#fn:totality" rel="footnote">1</a></sup>
A function that does not terminate,
or that throws a runtime error for some inputs,
is said to be <em>partial</em>.</p>

<p>A partial function can introduce a logical contradiction,
which would make proofs unreliable.
So totality checking is useful for theorem proving.</p>

<h2 id="theorem-proving">Theorem proving</h2>

<p>Consider the definition of the natural number type in the Idris standard library:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Nat</span> <span class="ow">=</span> <span class="kt">Z</span> <span class="o">|</span> <span class="kt">S</span> <span class="kt">Nat</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This defines a type, <code>Nat</code>,
with two constructors for producing values:
a number may be zero (<code>Z</code>),
or it may be one greater than another number (<code>S Nat</code>).</p>

<p>A type can be <em>indexed</em> by another type.
That describes a type produced by a type constructor
that takes one or more values as parameters.
Here is a constructor for indexed types from the Idris standard library:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">LTE</span>  <span class="kt">:</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Type</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">lteZero</span> <span class="kt">:</span> <span class="kt">LTE</span> <span class="kt">Z</span>    <span class="n">right</span>
</span><span class="line">  <span class="n">lteSucc</span> <span class="kt">:</span> <span class="kt">LTE</span> <span class="n">left</span> <span class="n">right</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="p">(</span><span class="kt">S</span> <span class="n">left</span><span class="p">)</span> <span class="p">(</span><span class="kt">S</span> <span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This declares that <code>LTE</code> is a constructor that takes two <code>Nat</code> <em>values</em> as parameters,
and produces a concrete <code>Type</code>.
The types that <code>LTE</code> constructs also happen to be propositions which state that
one natural number is less than or equal to another.
It should be read,
“the natural number n is less than or equal to the natural number m”.</p>

<p>Two value constructors are given.
They are written so that a value that satisfies a given <code>LTE</code> type be written
if and only if the <code>n</code> in that type is less than or equal to the <code>m</code>.
In this way, a value that satisfies a type of the form <code>LTE n m</code>
is a proof that <code>n</code> really is less than or equal to <code>m</code>.</p>

<p><code>lteZero</code> is a singleton value - it is a constructor that takes no arguments.
But its type contains a variable; so it is polymorphic.
<code>lteZero</code> can satisfy any type of the form, <code>LTE Z n</code>.
<code>lteZero</code> is effectively an axiom, stating a fundamental property of natural numbers.</p>

<p>Given the definition of <code>LTE</code> it is possible to write a proposition,
such as,
“zero is less than or equal to every natural number”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">nonNegative</span> <span class="kt">:</span> <span class="p">(</span><span class="n">n</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="kt">Z</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The proposition is written as a function that takes a number as input.
The <em>value</em> that is given is assigned to the variable <code>n</code>,
which is used to specify the return type.
Thus the return type of <code>nonNegative</code> <em>depends</em> on the input value.
Wherever you see <code>(a : A)</code> it can be read as,
“Some value of type <code>A</code> will be given here,
and that value will be assigned to the variable <code>a</code>.”</p>

<p>To write an implementation for <code>nonNegative</code>,
it is necessary to produce a value of the appropriate <code>LTE</code> type
without any information about what input might be given -
other than the fact that it will be a natural number.
Totality checking is enabled,
so any implementation must be applicable to every possible input.
Thus a type of the form,
<code>(x : A) -&gt; P x</code> describes universal quantification over the type <code>A</code>.</p>

<p><code>nonNegative</code> happens to be a restatement of the axiom, <code>lteZero</code>.
So an implementation / proof is trivial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">nonNegative</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">lteZero</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On the other hand, <code>lteSucc</code> maps a given proof to a proof of a related proposition.
It is used in proofs-by-induction.
For example, a proof that every number is less than or equal to itself:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">lteReflexive</span> <span class="kt">:</span> <span class="p">(</span><span class="n">n</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="n">n</span> <span class="n">n</span>
</span><span class="line"><span class="nf">lteReflexive</span> <span class="kt">Z</span>     <span class="ow">=</span> <span class="n">lteZero</span>
</span><span class="line"><span class="nf">lteReflexive</span> <span class="p">(</span><span class="kt">S</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="n">lteSucc</span> <span class="p">(</span><span class="n">lteReflexive</span> <span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The proof that zero is equal to itself is given by the axiom.
For every other number, the proof is given as an inductive step
using a proof for the next-smallest number.</p>

<p>Because the type of <code>lteSucc</code> is that of a function,
it can be read as a proposition involving logical implication:
“n &lt;= m implies that n + 1 &lt;= m + 1.”
In general, types of the form
<code>P x -&gt; Q y</code>
can be read as logical implication.</p>

<p>We have seen that the input value to a function can be labelled and referenced
in the output type.
That is a special property of functions.
For example, it is not permissible to label the value in the first position of
a tuple type to reference it in the second position.
But there is a special construction, the dependent pair, which does allow this.
Dependent pairs are used to represent existential quantification.</p>

<p>A dependent pair type of the form
<code>(x : A ** P x)</code>
is read as existential quantification over the type <code>A</code>.</p>

<p>A proof of a proposition with existential quantification can be given as
a pair of an arbitrary value and a proof that the proposition holds for that value.
For example, here is a proof of the Archimedean Property of natural numbers,
“For every natural number, n, there exists a natural number, m, where m &gt; n”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">archimedean</span> <span class="kt">:</span> <span class="p">(</span><span class="n">n</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">m</span> <span class="kt">:</span> <span class="kt">Nat</span> <span class="o">**</span> <span class="kt">LTE</span> <span class="p">(</span><span class="kt">S</span> <span class="n">n</span><span class="p">)</span> <span class="n">m</span><span class="p">)</span>
</span><span class="line"><span class="nf">archimedean</span> <span class="n">n</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">S</span> <span class="n">n</span> <span class="o">**</span> <span class="n">lteReflexive</span> <span class="p">(</span><span class="kt">S</span> <span class="n">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The quantified proposition uses <code>(S n)</code> instead of just <code>n</code>
to indicate that <code>m</code> must be strictly greater than <code>n</code> -
greater-than-or-equal-to is not sufficient.
The proof supplies <code>S n</code> as a <em>witness</em> -
a specific value that is used to prove that the quantified proposition holds.
Remember that <code>S n</code> is just another way of writing <code>n + 1</code>.
The second component of the dependent pair value must be a proof that the witness
is greater than or equal to <code>S n</code> - as is required by the type.
Since <code>S n</code> and <code>S n</code> are equal, <code>lteReflexive</code> suffices.</p>

<h2 id="definition-of-category">Definition of Category</h2>

<p>I have been studying Category Theory;
so I decided to use that as a topic for exercises when learning about Idris.
If you are wondering what Category Theory is all about,
take a look at <a href="http://rs.io/2014/04/30/why-category-theory-matters.html">Why Category Theory Matters</a>.</p>

<p>There is <a href="https://github.com/copumpkin/categories">a much more complete description</a>
of Category Theory concepts written in Agda.
The definition below was an exercise for me in learning about
Category Theory concepts myself.</p>

<p>A category is a set of objects
combined with a set of arrows that encode relations between objects.
When talking about all possible categories,
the concepts of “object” and “arrow” are very abstract.
They could be pretty much anything.
Descriptions of specific categories make specific statements
about what objects are and what arrows are.</p>

<p>Let’s implement a type class to capture this definition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">class</span> <span class="kt">Category</span> <span class="n">obj</span> <span class="p">(</span><span class="n">arr</span> <span class="kt">:</span> <span class="n">obj</span> <span class="ow">-&gt;</span> <span class="n">obj</span> <span class="ow">-&gt;</span> <span class="kt">Type</span><span class="p">)</span> <span class="kr">where</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Arrows are indexed by objects.
That is, the type of an arrow carries its domain
(the object that an arrow originates from)
and its codomain
(the object that an arrow points to).
Note that <code>obj</code> is given as an unqualified variable.
In some categories objects will be types - as in the Set category.
In others they will be plain values.</p>

<p>The methods of this type class will define the category laws.
For starters, there must be an id arrow for every object.
This line specifies that an instance of this type class must provide
a <code>cId</code> implementation with the given type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cId</span>   <span class="kt">:</span> <span class="p">(</span><span class="n">a</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As was shown above,
a function type serves as a proposition with universal quantification.
So the type of <code>cId</code> states that every object must be both the domain
and codomain of at least one arrow.
The implementation will also provide a means to identify that arrow.</p>

<p>Arrows must be composable.
If one arrow points from objects <code>a</code> to <code>b</code>,
and another arrow points from ‘b’ to ‘c’,
then it must be possible to combine them
to produce an arrow from ‘a’ to ‘c’.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cComp</span> <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="n">arr</span> <span class="n">b</span> <span class="n">c</span> <span class="ow">-&gt;</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Arguments in curly braces are implicit parameters.
In most cases the compiler will infer those values.
So they are generally not given as explicit arguments when invoking the function.
However, it is possible to provide implicit parameters explicitly when needed.</p>

<p><code>cId</code> and <code>cComp</code> are the only required functions that actually produce arrows.
But it is necessary to provide more specific rules about how they should behave.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cIdLeft</span>  <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">cId</span> <span class="n">b</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="n">f</span>     <span class="ow">=</span> <span class="n">f</span>
</span><span class="line">  <span class="n">cIdRight</span> <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span>     <span class="n">f</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="n">cId</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>These propositions state that id arrows must not only have the same
object as domain and codomain -
they must also be identities under composition.
Implementations of <code>cIdLeft</code> and <code>cIdRight</code> will never be used at runtime -
they are just proofs that <code>cId</code> and <code>cComp</code> obey the category laws.</p>

<p>Here <code>(=)</code> is a type constructor, very much like <code>LTE</code>.
Its definition looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="p">(</span><span class="ow">=</span><span class="p">)</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kt">Type</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">refl</span> <span class="kt">:</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The parameters to <code>(=)</code> can be any expressions -
including plain values or types.
<code>refl</code> is another axiom, stating that equality is reflexive.
Basically, to prove that two expressions are equivalent
it is necessary to demonstrate to the type checker that
they have the same normal form.</p>

<p>This implies that there might be multiple arrows pointing between the same two objects;
and that those arrows are not necessarily equivalent.
When talking about all possible categories,
it is not possible to say what it is that makes arrows different or the same.
Rather, any specific category must have its own definition of equality of arrows.
Some categories will have many arrows between each pair of objects;
some will have at most one.</p>

<p>One more proof is required to complete the <code>Category</code> type class.
Arrow composition must be associative.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cCompAssociative</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">g</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">b</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">c</span> <span class="n">d</span><span class="p">)</span> <span class="ow">-&gt;</span>
</span><span class="line">                     <span class="n">h</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="p">(</span><span class="n">g</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">h</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="n">g</span><span class="p">)</span> <span class="p">`</span><span class="n">cComp</span><span class="p">`</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have cheated slightly.
In the types for <code>cIdLeft</code>, <code>cIdRight</code>, and <code>cCompAssociative</code>
I left the implicit arguments to <code>cComp</code> implicit.
But I was not able to get those definitions to type-check.
I actually had to list out the implicit parameters
when applying <code>cComp</code> in a type expression.
The working definitions are a bit more difficult to read:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cIdLeft</span>  <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="p">(</span><span class="n">cId</span> <span class="n">b</span><span class="p">)</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line">  <span class="n">cIdRight</span> <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">:</span> <span class="n">obj</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="n">f</span> <span class="p">(</span><span class="n">cId</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line">
</span><span class="line">  <span class="n">cCompAssociative</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">g</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">b</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="kt">:</span> <span class="n">arr</span> <span class="n">c</span> <span class="n">d</span><span class="p">)</span> <span class="ow">-&gt;</span>
</span><span class="line">                     <span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">c</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">d</span><span class="p">}</span> <span class="n">h</span> <span class="p">(</span><span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">c</span><span class="p">}</span> <span class="n">g</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span>
</span><span class="line">                       <span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">a</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">d</span><span class="p">}</span> <span class="p">(</span><span class="n">cComp</span> <span class="p">{</span><span class="n">a</span><span class="ow">=</span><span class="n">b</span><span class="p">}</span> <span class="p">{</span><span class="n">b</span><span class="ow">=</span><span class="n">c</span><span class="p">}</span> <span class="p">{</span><span class="n">c</span><span class="ow">=</span><span class="n">d</span><span class="p">}</span> <span class="n">h</span> <span class="n">g</span><span class="p">)</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It has been pointed out to me that the compiler is not able to determine
which implementation of <code>cidLeft</code>, <code>cIdRight</code>, or <code>cCompAssociative</code> should be invoked,
unless the implicit parameters are listed.
If Category were implemented as a record type instead of as a type class
this would probably not be necessary.</p>

<h2 id="a-partial-ordering-category">A partial ordering category</h2>

<p>With the definition of Category in place,
it is possible to describe specific categories -
and to prove that they obey the category laws.</p>

<p>The <code>LTE</code> type constructor can be used to
describe a category where arrows are <code>LTE</code> relations,
and objects are natural numbers.
In this category,
there are arrows that point from each number
to every other number that is larger,
and also back to the number itself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">instance</span> <span class="kt">Category</span> <span class="kt">Nat</span> <span class="kt">LTE</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">cId</span> <span class="kt">Z</span>     <span class="ow">=</span> <span class="n">lteZero</span>
</span><span class="line">  <span class="n">cId</span> <span class="p">(</span><span class="kt">S</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="n">lteSucc</span> <span class="p">(</span><span class="n">cId</span> <span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>An id arrow in this category is a proof that a number is less than or equal to itself.
This is the same thing that was proved by <code>lteReflexive</code>;
so the implementation is the same.</p>

<p>Arrow composition is a proof that the less-than-or-equal-to relation is transitive.
For reference, here is the type for <code>cComp</code> specialized for <code>LTE</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cComp</span> <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="n">b</span> <span class="n">c</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kt">LTE</span> <span class="n">a</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the proof construction:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cComp</span> <span class="kr">_</span> <span class="n">lteZero</span> <span class="ow">=</span> <span class="n">lteZero</span>
</span><span class="line">  <span class="n">cComp</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">g</span><span class="p">)</span> <span class="ow">=</span> <span class="n">lteSucc</span> <span class="p">(</span><span class="n">cComp</span> <span class="n">f</span> <span class="n">g</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the first equation, the second input is <code>lteZero</code>;
which implies that <code>a</code> is zero.
<code>a</code> is also the domain in the <code>LTE</code> result that we want to prove;
so the proof is trivial.
The second equation takes advantage of the fact that the <code>lteSucc</code>
constructors of input arrows can be recursively unwrapped,
until reaching the base case, where the second input is <code>lteZero</code>.</p>

<p>There is no pattern for a case where the first input is <code>lteZero</code>
where the second is not.
It is not required, because that case is not allowed by the type of <code>cComp</code> -
and the type checker is able to confirm that.
If it were necessary to make explicit that this case is not possible,
that could be stated with a third equation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cComp</span> <span class="n">lteZero</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">g</span><span class="p">)</span> <span class="n">impossible</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The keyword <code>impossible</code> is one tool available for proofs of falsehood.</p>

<p>Now to prove the remaining category laws.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cIdLeft</span> <span class="n">lteZero</span>     <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">  <span class="n">cIdLeft</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="p">(</span><span class="n">cIdLeft</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">cIdRight</span> <span class="n">lteZero</span>     <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">  <span class="n">cIdRight</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="p">(</span><span class="n">cIdRight</span> <span class="n">f</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Demonstrating identity under composition of proofs is a little strange.
What we need to show is that composing an identity arrow with any other arrow
does not introduce new information.</p>

<p>In the base case of <code>cIdLeft</code>, if the given arrow, <code>f</code>, is <code>lteZero</code>
then its domain must be zero.
Therefore the identity arrow it is composed with must also be <code>lteZero</code>.
Those are the same normal form,
so the proof invokes <code>refl</code> - the axiom of reflexivity of equality.</p>

<p>The inductive step applies <code>cong</code>,
which is a proof of congruence of equal expressions.
It is defined in the standard library:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">cong</span> <span class="kt">:</span> <span class="p">{</span><span class="n">f</span> <span class="kt">:</span> <span class="n">t</span> <span class="ow">-&gt;</span> <span class="n">u</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">=</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">b</span>
</span><span class="line"><span class="nf">cong</span> <span class="n">refl</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this case the <code>f</code> that <code>cong</code> infers as its implicit parameter is <code>lteSucc</code>.</p>

<p><code>cong</code> is an example of a proof constructor:
it takes a proof as input and returns a proof of a related proposition.
Functions like <code>cong</code> are the building blocks of multi-step proofs.</p>

<p>You may notice that <code>cong</code> takes <code>refl</code> as an argument and returns it.
<code>cong</code> has equality proofs as its input and output.
By definition, the only possible value of an equality type is <code>refl</code>.</p>

<p>The base case of <code>cIdRight</code> is not as trivial as the base case of <code>cIdLeft</code>.
the codomain of <code>lteZero</code> is not necessarily zero;
so the identity arrow involved could be some <code>lteSucc</code> value.
However the compiler is able to do some normalization automatically.
That means that it is not necessary to spell out every step.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line">  <span class="n">cCompAssociative</span> <span class="n">lteZero</span> <span class="kr">_</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">  <span class="n">cCompAssociative</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">f&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">g&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">lteSucc</span> <span class="n">h&#39;</span><span class="p">)</span> <span class="ow">=</span>
</span><span class="line">    <span class="n">cong</span> <span class="o">$</span> <span class="n">cCompAssociative</span> <span class="n">f&#39;</span> <span class="n">g&#39;</span> <span class="n">h&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The proof of associativity follows a similar pattern.</p>

<h2 id="a-monoid-as-a-category">A monoid as a category</h2>

<p>The natural numbers form a <a href="http://en.wikipedia.org/wiki/Monoid">monoid</a> under addition.
In particular:</p>

<ul>
  <li>Two numbers can be combined by addition to produce a third number.</li>
  <li>There is an additive identity (0).</li>
  <li>Addition is associative.</li>
</ul>

<p>The monoid also forms a category with just one object,
(which will be arbitrarily represented with <code>()</code>)
where the arrows are integers,
and arrows are composed by addition.
Since there are an unbounded number of natural numbers,
in this category
there are an unbounded number of arrows pointing from <code>()</code> back to <code>()</code>.</p>

<p>This category is made a bit complicated by the requirement that
arrows are indexed by domain and codomain.
Those indexes will not be meaningful in a category with just one object.
But for the sake of generality,
a trivial higher-kinded wrapper around <code>Nat</code> is needed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">NatArrow</span> <span class="kt">:</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="kt">Type</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getNat</span> <span class="kt">:</span> <span class="kt">Nat</span> <span class="ow">-&gt;</span> <span class="kt">NatArrow</span> <span class="nb">()</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Idris, as in Haskell,
<code>()</code> is a type with exactly one value,
which is also called <code>()</code>.</p>

<p>To make it clear that a <code>NatArrow</code> is really just a <code>Nat</code>,
we can prove that the two types are isomorphic.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">isoNatNatArrow</span> <span class="kt">:</span> <span class="kt">Iso</span> <span class="kt">Nat</span> <span class="p">(</span><span class="kt">NatArrow</span> <span class="nb">()</span> <span class="nb">()</span><span class="p">)</span>
</span><span class="line"><span class="nf">isoNatNatArrow</span> <span class="ow">=</span> <span class="kt">MkIso</span> <span class="n">to</span> <span class="n">from</span> <span class="n">toFrom</span> <span class="n">fromTo</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">to</span> <span class="kt">:</span> <span class="kt">Nat</span> <span class="ow">-&gt;</span> <span class="kt">NatArrow</span> <span class="nb">()</span> <span class="nb">()</span>
</span><span class="line">  <span class="n">to</span> <span class="ow">=</span> <span class="n">getNat</span>
</span><span class="line">
</span><span class="line">  <span class="n">from</span> <span class="kt">:</span> <span class="kt">NatArrow</span> <span class="nb">()</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="kt">Nat</span>
</span><span class="line">  <span class="n">from</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="n">n</span>
</span><span class="line">
</span><span class="line">  <span class="n">toFrom</span> <span class="kt">:</span> <span class="p">(</span><span class="n">y</span> <span class="kt">:</span> <span class="kt">NatArrow</span> <span class="nb">()</span> <span class="nb">()</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">to</span> <span class="p">(</span><span class="n">from</span> <span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="n">y</span>
</span><span class="line">  <span class="n">toFrom</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">
</span><span class="line">  <span class="n">fromTo</span> <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="kt">Nat</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">from</span> <span class="p">(</span><span class="n">to</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span>
</span><span class="line">  <span class="n">fromTo</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>An isomorphism is a bidirectional mapping that preserves information in both directions.
<code>to</code> and <code>from</code> specify the mapping;
<code>toFrom</code> and <code>fromTo</code> prove that information is preserved.</p>

<p>Now the definition of the Nat category:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">instance</span> <span class="kt">Category</span> <span class="nb">()</span> <span class="kt">NatArrow</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">cId</span> <span class="nb">()</span> <span class="ow">=</span> <span class="n">getNat</span> <span class="mi">0</span>
</span><span class="line">  <span class="n">cComp</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">g</span><span class="p">)</span> <span class="ow">=</span> <span class="n">getNat</span> <span class="p">(</span><span class="n">f</span> <span class="o">+</span> <span class="n">g</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">cIdLeft</span>  <span class="p">(</span><span class="n">getNat</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="p">(</span><span class="n">plusZeroLeftNeutral</span>  <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="n">cIdRight</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="p">(</span><span class="n">plusZeroRightNeutral</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="n">cCompAssociative</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">g</span><span class="p">)</span> <span class="p">(</span><span class="n">getNat</span> <span class="n">h</span><span class="p">)</span> <span class="ow">=</span>
</span><span class="line">    <span class="n">cong</span> <span class="p">(</span><span class="n">plusAssociative</span> <span class="n">h</span> <span class="n">g</span> <span class="n">f</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This implementation uses <code>(+)</code> for arrow composition.
It reuses proofs of identity and associativity for <code>(+)</code>.
It is only necessary to apply <code>cong</code> to the predefined proofs
to show that applying the <code>getNat</code> constructor to both sides of an equality
does not change anything.</p>

<p>For another look at monoids in Idris,
see <a href="https://www.youtube.com/watch?v=P82dqVrS8ik">Verifying the monoid laws using Idris (video)</a>.</p>

<h2 id="category-of-sets">Category of sets</h2>

<p>In the Set category, objects are sets and arrows are functions.
The implementation here will use <code>Type</code> as the type of objects.
In Idris, the type of every <em>small type</em> is <code>Type</code>.
For example, the type of <code>Nat</code> is <code>Type</code>.
The type of <code>String</code> is also <code>Type</code>.
The type of <code>Type</code> is <code>Type 1</code> -
meaning that <code>Type</code> is not a small type itself.</p>

<p>The definition of <code>Category</code> requires proofs of equivalence for arrows.
But there is no predefined comparison operator for functions in Idris.
All that you can really do with a function is to give it some inputs,
and check what its outputs are.</p>

<p>To produce a viable category, it is necessary to introduce
the axiom of <em>function extensionality</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">funext</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">((</span><span class="n">x</span> <span class="kt">:</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">g</span> <span class="n">x</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">g</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If two functions produce the same output for all possible inputs,
then they are equivalent.</p>

<p><code>funext</code> takes as input two functions
and a proof that those functions produce the same output for all inputs.
Note the parentheses in that type:
As function types serve as universal quantifiers,
higher-order functions provide a means to nest quantification
inside of larger propositions.</p>

<p>I am told that it is not possible to prove <code>funext</code> in Idris -
and that that limitation is not unique to Idris.
Therefore, function extensionality must be given as an axiom:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">funext</span> <span class="n">f</span> <span class="n">g</span> <span class="ow">=</span> <span class="n">believe_me</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>believe_me</code> is a “proof” to use sparingly.</p>

<p>Implementations for an identity function and for composition of functions
are provided in the standard library.
In fact, Idris includes a <code>Control.Category</code> module
with a predefined <code>Category</code> type class.
But that definition does not include all of the category laws.
What remains to be defined are proofs of identity and associativity.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">leftIdPoint</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">id</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span>
</span><span class="line"><span class="nf">leftIdPoint</span> <span class="n">f</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">
</span><span class="line"><span class="nf">rightIdPoint</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">id</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span>
</span><span class="line"><span class="nf">rightIdPoint</span> <span class="n">f</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Proving that <code>id (f x)</code> and <code>f (id x)</code> reduce to <code>f x</code>
is sufficiently easy that the compiler can do most of the work on its own.
To make the next step to <code>f x = f x -&gt; f = f</code>
is just a matter of applying <code>funext</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">leftId</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">id</span> <span class="o">.</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line"><span class="nf">leftId</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">funext</span> <span class="p">(</span><span class="n">id</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">f</span> <span class="o">$</span> <span class="n">leftIdPoint</span> <span class="n">f</span>
</span><span class="line">
</span><span class="line"><span class="nf">rightId</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="o">.</span> <span class="n">id</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line"><span class="nf">rightId</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">funext</span> <span class="p">(</span><span class="n">f</span> <span class="o">.</span> <span class="n">id</span><span class="p">)</span> <span class="n">f</span> <span class="o">$</span> <span class="n">rightIdPoint</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In order to prove associativity, it is helpful to have a helper proof
that could be described as, “pointful composition”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">compPoint</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">g</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">g</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="n">x</span>
</span><span class="line"><span class="nf">compPoint</span> <span class="n">f</span> <span class="n">g</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The proof of associativity is a bit complicated.
So it is broken into steps here,
with proven intermediate propositions given for each step.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">compAssociative</span> <span class="kt">:</span> <span class="p">(</span><span class="n">f</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">g</span> <span class="kt">:</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="kt">:</span> <span class="n">c</span> <span class="ow">-&gt;</span> <span class="n">d</span><span class="p">)</span> <span class="ow">-&gt;</span>
</span><span class="line">                  <span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="o">.</span> <span class="n">f</span>
</span><span class="line"><span class="nf">compAssociative</span> <span class="n">f</span> <span class="n">g</span> <span class="n">h</span> <span class="ow">=</span> <span class="n">qed</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">step_1</span>   <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">h</span> <span class="p">((</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">))</span> <span class="n">x</span>
</span><span class="line">  <span class="n">step_1</span>   <span class="ow">=</span> <span class="n">compPoint</span> <span class="n">h</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">step_2</span>   <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">))</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">h</span> <span class="p">((</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">  <span class="n">step_2</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">sym</span> <span class="p">(</span><span class="n">step_1</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">step_3</span>   <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="p">((</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">x</span>
</span><span class="line">  <span class="n">step_3</span>   <span class="ow">=</span> <span class="n">compPoint</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="n">f</span>
</span><span class="line">
</span><span class="line">  <span class="n">step_4</span>   <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">))</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">((</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">x</span>
</span><span class="line">  <span class="n">step_4</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">trans</span> <span class="p">(</span><span class="n">step_2</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">step_3</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">qed</span>      <span class="kt">:</span> <span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="o">.</span> <span class="n">f</span>
</span><span class="line">  <span class="n">qed</span>      <span class="ow">=</span> <span class="n">funext</span> <span class="p">(</span><span class="n">h</span> <span class="o">.</span> <span class="p">(</span><span class="n">g</span> <span class="o">.</span> <span class="n">f</span><span class="p">))</span> <span class="p">((</span><span class="n">h</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="n">step_4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are two standard library functions used here that have not been introduced yet.
They are:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">sym</span> <span class="kt">:</span> <span class="p">{</span><span class="n">l</span><span class="kt">:</span><span class="n">a</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">r</span><span class="kt">:</span><span class="n">a</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">r</span> <span class="ow">-&gt;</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">l</span>
</span><span class="line"><span class="nf">sym</span> <span class="n">refl</span> <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">
</span><span class="line"><span class="nf">trans</span> <span class="kt">:</span> <span class="p">{</span><span class="n">a</span><span class="kt">:</span><span class="n">x</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">b</span><span class="kt">:</span><span class="n">y</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">c</span><span class="kt">:</span><span class="n">z</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">c</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">c</span>
</span><span class="line"><span class="nf">trans</span> <span class="n">refl</span> <span class="n">refl</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When a free, lowercase variable appears in a type expression,
Idris inserts an additional implicit parameter at the beginning of the expression.
It is up to the compiler to infer the types of the free variables.
After carrying out that expansion, the type of <code>trans</code> looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">trans</span> <span class="kt">:</span> <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="kt">:</span> <span class="kr">_</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">a</span><span class="kt">:</span><span class="n">x</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">b</span><span class="kt">:</span><span class="n">y</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="p">{</span><span class="n">c</span><span class="kt">:</span><span class="n">z</span><span class="p">}</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">c</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There may be more steps listed in <code>compAssociative</code> than are really required.
Hopefully including them helps to clarify the proof.</p>

<p>In Haskell, <code>(-&gt;)</code> is an ordinary type constructor that could be used
as the arrow type in a type class like <code>Category</code>.
It seems that is not the case in Idris.
To work around that, the standard library includes a type, <code>Morphism</code>,
that is isomorphic to the function type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Morphism</span> <span class="kt">:</span> <span class="kt">Type</span> <span class="ow">-&gt;</span> <span class="kt">Type</span> <span class="ow">-&gt;</span> <span class="kt">Type</span> <span class="kr">where</span>
</span><span class="line">  <span class="kt">Mor</span> <span class="kt">:</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Morphism</span> <span class="n">a</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The proofs above provide everything that is required to prove the validity of
a category of Types and functions.
But the definition here uses Morphism for arrows;
so a little extra translating is necessary.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">mComp</span> <span class="kt">:</span> <span class="p">(</span><span class="n">b</span> <span class="o">~&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">~&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">~&gt;</span> <span class="n">c</span><span class="p">)</span>
</span><span class="line"><span class="nf">mComp</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">g</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Mor</span> <span class="p">(</span><span class="n">f</span> <span class="o">.</span> <span class="n">g</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The operator <code>(~&gt;)</code> is an infix alias for <code>Morphism</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">instance</span> <span class="kt">Category</span> <span class="kt">Type</span> <span class="kt">Morphism</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">cId</span> <span class="ow">=</span> <span class="kt">Mor</span> <span class="n">id</span>
</span><span class="line">  <span class="n">cComp</span> <span class="ow">=</span> <span class="n">mComp</span>
</span><span class="line">
</span><span class="line">  <span class="n">cIdLeft</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">qed</span> <span class="kr">where</span>
</span><span class="line">    <span class="n">step_1</span> <span class="kt">:</span> <span class="n">id</span> <span class="o">.</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line">    <span class="n">step_1</span> <span class="ow">=</span> <span class="n">leftId</span> <span class="n">f</span>
</span><span class="line">
</span><span class="line">    <span class="n">qed</span> <span class="kt">:</span> <span class="kt">Mor</span> <span class="p">(</span><span class="n">id</span> <span class="o">.</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Mor</span> <span class="n">f</span>
</span><span class="line">    <span class="n">qed</span> <span class="ow">=</span> <span class="n">cong</span> <span class="n">step_1</span>
</span><span class="line">
</span><span class="line">  <span class="n">cIdRight</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="p">(</span><span class="n">rightId</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="n">cCompAssociative</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">g</span><span class="p">)</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">h</span><span class="p">)</span> <span class="ow">=</span> <span class="n">cong</span> <span class="o">$</span> <span class="n">compAssociative</span> <span class="n">f</span> <span class="n">g</span> <span class="n">h</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As with <code>Nat</code> and <code>NatArrow</code>,
the correspondence between <code>(-&gt;)</code> and <code>Morphism</code> is made official
with a proof of isomorphism.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">isoMorphismFunction</span> <span class="kt">:</span> <span class="kt">Iso</span> <span class="p">(</span><span class="kt">Morphism</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="nf">isoMorphismFunction</span> <span class="ow">=</span> <span class="kt">MkIso</span> <span class="n">to</span> <span class="n">from</span> <span class="n">toFrom</span> <span class="n">fromTo</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">to</span> <span class="kt">:</span> <span class="p">(</span><span class="n">a</span> <span class="o">~&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">to</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span>
</span><span class="line">
</span><span class="line">  <span class="n">from</span> <span class="kt">:</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">~&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">from</span> <span class="ow">=</span> <span class="kt">Mor</span>
</span><span class="line">
</span><span class="line">  <span class="n">toFrom</span> <span class="kt">:</span> <span class="p">(</span><span class="n">y</span> <span class="kt">:</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">to</span> <span class="p">(</span><span class="n">from</span> <span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="n">y</span>
</span><span class="line">  <span class="n">toFrom</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">refl</span>
</span><span class="line">
</span><span class="line">  <span class="n">fromTo</span> <span class="kt">:</span> <span class="p">(</span><span class="n">x</span> <span class="kt">:</span> <span class="n">a</span> <span class="o">~&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">from</span> <span class="p">(</span><span class="n">to</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="n">x</span>
</span><span class="line">  <span class="n">fromTo</span> <span class="p">(</span><span class="kt">Mor</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="n">refl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is my hope that I can use these definitions to work out exercises
as I continue to explore Category theory.</p>
<div class="footnotes">
  <ol>
    <li id="fn:totality">
      <p>The <a href="http://en.wikipedia.org/wiki/Halting_problem">Halting Problem</a> states that there are programs that cannot be proven to terminate.  That does not mean that it is impossible to prove that any program terminates.  Idris and other languages with totality checking put some restrictions on the forms that functions are allowed to take so that totality checking is possible.<a href="#fnref:totality" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional data structures in JavaScript with Mori]]></title>
    <link href="http://sitr.us/2013/11/04/functional-data-structures.html"/>
    <updated>2013-11-04T00:00:00-08:00</updated>
    <id>http://sitr.us/2013/11/04/functional-data-structures</id>
    <content type="html"><![CDATA[<p>I have a long-standing desire for a JavaScript library that provides
good implementations of functional data structures.  Recently I found
<a href="http://swannodette.github.io/mori/">Mori</a>, and I think that it may be just the library that I have been
looking for.  Mori packages data structures from the <a href="http://clojure.org/">Clojure</a>
standard library for use in JavaScript code.</p>

<ul id="markdown-toc">
  <li><a href="#functional-data-structures">Functional data structures</a></li>
  <li><a href="#clojure-clojurescript-and-mori">Clojure, ClojureScript, and Mori</a></li>
  <li><a href="#installing-and-running">Installing and running</a></li>
  <li><a href="#examples">Examples</a>    <ul>
      <li><a href="#vector"><code>vector</code></a></li>
      <li><a href="#higher-order-functions">higher-order functions</a></li>
      <li><a href="#sortedsetby"><code>sorted_set_by</code></a></li>
      <li><a href="#hashmap"><code>hash_map</code></a></li>
    </ul>
  </li>
  <li><a href="#apples-to-apples">Apples to apples</a></li>
  <li><a href="#mori-pairs-well-with-bacon">Mori pairs well with Bacon</a></li>
  <li><a href="#list-versus-vector">List versus Vector</a></li>
  <li><a href="#equality-ordering-and-hashing">Equality, ordering, and hashing</a>    <ul>
      <li><a href="#hash">hash</a></li>
      <li><a href="#equals">equals</a></li>
      <li><a href="#compare">compare</a></li>
    </ul>
  </li>
  <li><a href="#different-map-and-set-implementations">Different map and set implementations</a></li>
  <li><a href="#laziness">Laziness</a>    <ul>
      <li><a href="#efficiency">Efficiency</a></li>
    </ul>
  </li>
</ul>

<h2 id="functional-data-structures">Functional data structures</h2>

<p>A functional data structure (also called a persistent data structure)
has two important qualities: it is immutable and it can be updated by
creating a copy with modifications (copy-on-write).  Creating copies
should be nearly as cheap as modifying a comparable mutable data
structure in place.  This is achieved with structural sharing: pointers
to unchanged portions of a structure are shared between copies so that
memory need only be allocated for changed portions of the data
structure.</p>

<p>A simple example is a <a href="https://en.wikipedia.org/wiki/Linked_list">linked list</a>.  A linked list is an object,
specifically a list node, with a value and a pointer to the next list
node, which points to the next list node.  (Eventually you get to the
end of the list where there is a node that points to the empty list.)
Prepending an element to the front of such a list is a constant-time
operation: you just create a new list element with a pointer to the
start of the existing list.  When lists are immutable there is no need
to actually copy the original list.  Removing an element from the front
of a list is also a constant-time operation: you just return a pointer
to the second element of the list.  Here is <a href="http://anorwell.com/index.php?id=61">a slightly more-detailed
explanation</a>.</p>

<p>Lists are just one example.  There are functional implementations of
maps, sets, and other types of structures.</p>

<p>Rich Hickey, the creator Clojure, describes functional data structures
as <a href="http://clojure.org/state">decoupling state and time</a>.  (Also available in
<a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">video form</a>.)  The idea is that code that uses
functional data structures is easier to reason about and to verify than
code that uses mutable data structures.</p>

<!-- more -->

<h2 id="clojure-clojurescript-and-mori">Clojure, ClojureScript, and Mori</h2>

<p><a href="http://clojure.org/">Clojure</a> is a functional language that compiles to JVM bytecode.  It
is a Lisp dialect.  Among Clojure’s innovations are implementations of
a number of functional data structures, old and new.  For example, other
Lisps tend to place prime importance on linked lists; but a lot of
Clojure code is based on <code>PersistentVector</code>, which supports efficient
random-access operations.</p>

<p><a href="https://github.com/clojure/clojurescript">ClojureScript</a> is an alternative Clojure compiler that produces
JavaScript code instead of JVM bytecode.  The team behind ClojureScript
has ported Clojure collections to ClojureScript implementations - which
are therefore within reach of JavaScript code.</p>

<p><a href="http://swannodette.github.io/mori/">Mori</a> incorporates the ClojureScript build tool and pulls out just
the standard library data structures.  It builds a JavaScript file that
can be used as a standalone library.  Mori adds some API customizations
to make the Clojure data structures easier to use in JavaScript - such
as helpers to convert between JavaScript arrays and Clojure structures.
Mori also includes a few helpers to make functional programming easier,
like <code>identity</code>, <code>constant</code>, and <code>sum</code> functions.  These are the data
structures provided in the latest version of Mori, v0.2.4:</p>

<table>
  <thead>
    <tr>
      <th>constructor</th>
      <th>Mori</th>
      <th>Clojure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>list</code></td>
      <td><a href="http://swannodette.github.io/mori/#list">Mori docs</a></td>
      <td><a href="http://clojure.org/data_structures#toc13">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>vector</code></td>
      <td><a href="http://swannodette.github.io/mori/#vector">Mori docs</a></td>
      <td><a href="http://clojure.org/data_structures#toc15">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>range</code></td>
      <td><a href="http://swannodette.github.io/mori/#range">Mori docs</a></td>
      <td><a href="http://clojuredocs.org/clojure_core/clojure.core/range">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>hash_map</code></td>
      <td><a href="http://swannodette.github.io/mori/#hash_map">Mori docs</a></td>
      <td><a href="http://clojure.org/data_structures#toc17">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>array_map</code></td>
      <td> </td>
      <td><a href="http://clojure.org/data_structures#toc21">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>sorted_map</code></td>
      <td> </td>
      <td><a href="http://clojure.org/data_structures#toc17">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>sorted_map_by</code></td>
      <td> </td>
      <td><a href="http://clojure.org/data_structures#toc17">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>set</code></td>
      <td><a href="http://swannodette.github.io/mori/#set">Mori docs</a></td>
      <td><a href="http://clojure.org/data_structures#toc22">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>sorted_set</code></td>
      <td><a href="http://swannodette.github.io/mori/#sorted_set">Mori docs</a></td>
      <td><a href="http://clojure.org/data_structures#toc22">Clojure docs</a></td>
    </tr>
    <tr>
      <td><code>sorted_set_by</code></td>
      <td> </td>
      <td><a href="http://clojure.org/data_structures#toc22">Clojure docs</a></td>
    </tr>
  </tbody>
</table>

<p>All of these data structures are immutable and can be efficiently
updated via copying and structural sharing.</p>

<p>The documentation for Mori is pretty good.  But it does skip over some
of the available data structures and functions.  Since most of the stuff
provided by Mori comes from Clojure, if you cannot find information that
you need in the Mori docs you can also look at the Clojure docs.
I provided links to the Clojure documentation for each data structure
where more detailed descriptions are available.</p>

<h2 id="installing-and-running">Installing and running</h2>

<p>To get Mori, install the <a href="https://docs.nodejitsu.com/articles/getting-started/npm/what-is-npm">npm</a> package <code>mori</code>.  Then you can require
the module <code>'mori'</code> in a <a href="http://nodejs.org/">Node.js</a> project; or copy the file
<code>mori.js</code> from the installed package and drop it into a web browser.</p>

<pre><code>$ npm install mori
$ cp node_modules/mori/mori.js my_app/public/scripts/
</code></pre>

<h2 id="examples">Examples</h2>

<p>Let’s take a look at the particular advantages of some of these
structures.</p>

<h3 id="vector"><code>vector</code></h3>

<p>A vector is an ordered, finite sequence that supports efficient
random-access lookups and updates.  Vectors are created using the
<a href="http://swannodette.github.io/mori/#vector"><code>vector</code></a> function from the <code>'mori'</code> module.  Any
arguments given to the function become elements of a new vector.  In
<a href="http://nodejs.org/">Node.js</a> you can import Mori and create a vector like this:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">mori</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mori&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">count</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1">// `count` gives the length of the vector</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div>

<p>Mori also works with <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a> implementations (such as <a href="http://requirejs.org/">RequireJS</a>) for
use in browser code:</p>

<div class="highlight"><pre><code class="js"><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;mori&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mori</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>

<p>Idiomatic Clojure is not object-oriented.  The convention in Clojure is
that instead of putting methods on objects / values, one defines
functions that take values as arguments.  Those functions are organized
into modules to group related functions together.  This approach makes
a lot of sense when values are mostly immutable; and it avoids name
collisions that sometimes come up in object-oriented code, since names
are scoped by module instead of by object.<sup id="fnref:polymorphism"><a href="#fn:polymorphism" rel="footnote">1</a></sup></p>

<p>Since Mori is an adaptation of Clojure code, it uses the same
convention.  Data structures created with Mori do not have methods.
Instead all functionality is provided by functions exported by the
<code>'mori'</code> module.  That is why the code here uses expressions like
<code>mori.count(v)</code> instead of <code>v.count()</code>.</p>

<p>Existing vectors can be modified:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">v1</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">v2</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">conj</span><span class="p">(</span><span class="nx">v1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>

<span class="nx">assert</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">v2</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[1 2 3 4]&#39;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">v1</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[1 2 3]&#39;</span><span class="p">);</span>  <span class="c1">// The original vector is unchanged.</span>
</code></pre></div>

<p><code>conj</code> is an idiom that is particular to Clojure.  It inserts one or
more values into a collection.  It behaves differently with different
collection types, using whatever insert strategy is most efficient for
the given collection.<sup id="fnref:conj"><a href="#fn:conj" rel="footnote">2</a></sup></p>

<h3 id="higher-order-functions">higher-order functions</h3>

<p>Mori provides a number of higher-order functions.  Here is an example
that computes the sum of the even values in a collection:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">even_sum</span><span class="p">(</span><span class="nx">coll</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">evens</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">is_even</span><span class="p">,</span> <span class="nx">coll</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">sum</span>   <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">evens</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">even_sum</span><span class="p">(</span><span class="nx">v2</span><span class="p">)</span> <span class="o">===</span> <span class="mi">6</span><span class="p">);</span>
</code></pre></div>

<p>Or, borrowing from <a href="http://swannodette.github.io/mori/#group_by">an example</a> in the Mori documentation, one
might compute a sum for even values and a separate sum for odd values:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">even_odd_sum</span><span class="p">(</span><span class="nx">coll</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">groups</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">group_by</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">is_even</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;even&#39;</span> <span class="o">:</span> <span class="s1">&#39;odd&#39;</span><span class="p">;</span>
    <span class="p">},</span> <span class="nx">coll</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">evens</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">groups</span><span class="p">,</span> <span class="s1">&#39;even&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">odds</span>  <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">groups</span><span class="p">,</span> <span class="s1">&#39;odd&#39;</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">array_map</span><span class="p">(</span>
        <span class="s1">&#39;even&#39;</span><span class="p">,</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">evens</span><span class="p">),</span>
        <span class="s1">&#39;odd&#39;</span><span class="p">,</span>  <span class="nx">mori</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">odds</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">even_odd_sum</span><span class="p">(</span><span class="nx">v2</span><span class="p">),</span> <span class="s1">&#39;even&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">6</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">even_odd_sum</span><span class="p">(</span><span class="nx">v2</span><span class="p">),</span> <span class="s1">&#39;odd&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div>

<p>The example above returns a map created with <a href="http://clojure.org/data_structures#toc21"><code>array_map</code></a>,
which is a map implementation that works well with a small number of
keys.</p>

<h3 id="sortedsetby"><code>sorted_set_by</code></h3>

<p>JavaScript does not have its own set implementation.  (Though it looks
like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">one will be introduced</a> in ECMAScript 6.)  Sets are
a feature that I often miss.</p>

<p>A sorted set is a heavenly blend of a sequence and a set.  Any duplicate
values that are added are ignored, and there is a specific ordering of
elements.  Unlike a list or a vector, ordering is not based on
insertion, but is determined by comparisons between elements.</p>

<p>One possible use for a sorted set is to implement a priority queue.
Consider an example of a calendar application.  <code>sorted_set_by</code> takes
a comparison function that is used to to maintain an ordering of added
values.  With the appropriate comparison appointments are added and are
automatically sorted by date:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">Calendar</span><span class="p">(</span><span class="nx">appts</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">appts</span> <span class="o">=</span> <span class="nx">appts</span> <span class="o">||</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">sorted_set_by</span><span class="p">(</span><span class="nx">compare_appts</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">cal</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="nx">cal</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">appt</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">with_appt</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">conj</span><span class="p">(</span><span class="nx">appts</span><span class="p">,</span> <span class="nx">appt</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">Calendar</span><span class="p">(</span><span class="nx">with_appt</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="nx">cal</span><span class="p">.</span><span class="nx">upcoming</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">futureAppts</span> <span class="o">=</span> <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">date</span> <span class="o">&gt;=</span> <span class="nx">start</span><span class="p">;</span>
        <span class="p">},</span> <span class="nx">appts</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">futureAppts</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">cal</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Returns a number that is:</span>
<span class="c1">// * positive, if a is larger</span>
<span class="c1">// *     zero, if a and b are equal</span>
<span class="c1">// * negative, if b is larger</span>
<span class="kd">function</span> <span class="nx">compare_appts</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">date</span> <span class="o">!==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">date</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">date</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span> <span class="p">.</span><span class="nx">localeCompare</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>Like the underlying set, this calendar implementation is immutable.
When an appointment is added you get a new calendar value.</p>

<p>The comparison function for comparing appointments sorts appointments by
date, and uses title as a secondary sort in case there are appointments
with the same date and time.  The sorted set uses this function to
determine equality as well as ordering; so if it made comparisons using
only the date field then the calendar would not accept multiple
appointments with the same date and time.</p>

<p>Appointments can be added to a calendar and queried in date order:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">my_cal</span> <span class="o">=</span> <span class="nx">Calendar</span><span class="p">().</span><span class="nx">add</span><span class="p">({</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Portland JavaScript Admirers&#39; Monthly Meeting&quot;</span><span class="p">,</span>
    <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-25T19:00-0700&quot;</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">add</span><span class="p">({</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Code &#39;n&#39; Splode Monthly Meeting&quot;</span><span class="p">,</span>
    <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-24T19:00-0700&quot;</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">add</span><span class="p">({</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;WhereCampPDX 6&quot;</span><span class="p">,</span>
    <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-28T09:00-0700&quot;</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">add</span><span class="p">({</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Synesthesia Bike Tour&quot;</span><span class="p">,</span>
    <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-22T15:00-0700&quot;</span><span class="p">)</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-20&quot;</span><span class="p">);</span>  <span class="c1">// or `new Date()` for the current time</span>
<span class="kd">var</span> <span class="nx">next_appts</span> <span class="o">=</span> <span class="nx">my_cal</span><span class="p">.</span><span class="nx">upcoming</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span> <span class="p">},</span> <span class="nx">next_appts</span><span class="p">);</span>
<span class="c1">// (&quot;Synesthesia Bike Tour&quot; &quot;Code &#39;n&#39; Splode Monthly Meeting&quot;)</span>
</code></pre></div>

<p>Looks good!  Now let’s add an undo feature.  In case the user changes
her mind about the last appointment that was added, the undo feature
should recreate the previous state without that appointment.  The
implementation of <code>Calendar</code> is the same as before except that the
constructor takes an additional optional argument, the <code>add</code> method
passes a reference from one calendar value to the next, and there is
a new <code>undo</code> method:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">Calendar</span><span class="p">(</span><span class="nx">appts</span><span class="p">,</span> <span class="nx">prev_cal</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nx">cal</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">appt</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">with_appt</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">conj</span><span class="p">(</span><span class="nx">appts</span><span class="p">,</span> <span class="nx">appt</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">Calendar</span><span class="p">(</span><span class="nx">with_appt</span><span class="p">,</span> <span class="nx">cal</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="nx">cal</span><span class="p">.</span><span class="nx">undo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">prev_cal</span> <span class="o">||</span> <span class="nx">Calendar</span><span class="p">();</span>
    <span class="p">};</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div>

<p>Assuming the same set of appointments, we can use the <code>undo</code> method to
step back to a state before the fourth appointment was added:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">my_prev_cal</span> <span class="o">=</span> <span class="nx">my_cal</span><span class="p">.</span><span class="nx">undo</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">next_appts_</span> <span class="o">=</span> <span class="nx">my_prev_cal</span><span class="p">.</span><span class="nx">upcoming</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span> <span class="p">},</span> <span class="nx">next_appts_</span><span class="p">);</span>
<span class="c1">// (&quot;Code &#39;n&#39; Splode Monthly Meeting&quot; &quot;Portland JavaScript Admirers&#39; Monthly Meeting&quot;)</span>
</code></pre></div>

<p>Immutability comes in handy in this scenario.  It is trivial to step
back in time.</p>

<p>Actually because <code>Calendar</code> is immutable, you don’t necessarily need a special
method to get undo behavior:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">makeCalendar</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">cal_0</span> <span class="o">=</span> <span class="nx">Calendar</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">cal_1</span> <span class="o">=</span> <span class="nx">cal_0</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Portland JavaScript Admirers&#39; Monthly Meeting&quot;</span><span class="p">,</span>
        <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-25T19:00-0700&quot;</span><span class="p">)</span>
    <span class="p">});</span>
    <span class="kd">var</span> <span class="nx">cal_2</span> <span class="o">=</span> <span class="nx">cal_1</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Code &#39;n&#39; Splode Monthly Meeting&quot;</span><span class="p">,</span>
        <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-24T19:00-0700&quot;</span><span class="p">)</span>
    <span class="p">});</span>
    <span class="kd">var</span> <span class="nx">cal_3</span> <span class="o">=</span> <span class="nx">cal_2</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;WhereCampPDX 6&quot;</span><span class="p">,</span>
        <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-28T09:00-0700&quot;</span><span class="p">)</span>
    <span class="p">});</span>
    <span class="kd">var</span> <span class="nx">cal_4</span> <span class="o">=</span> <span class="nx">cal_3</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Synesthesia Bike Tour&quot;</span><span class="p">,</span>
        <span class="nx">date</span><span class="o">:</span>  <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;2013-09-22T15:00-0700&quot;</span><span class="p">)</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">toReturn</span> <span class="o">=</span> <span class="nx">cal_4</span><span class="p">;</span>

    <span class="c1">// No wait! Undo!!</span>
    <span class="nx">toReturn</span> <span class="o">=</span> <span class="nx">cal_3</span><span class="p">;</span>

    <span class="c1">// That was close...</span>
    <span class="k">return</span> <span class="nx">toReturn</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>

<p>I’m sure that the Synesthesia Bike Tour is a lot of fun.  It’s just that
when demonstrating an undo feature, something has to take the fall.
That’s just the world that we live in, I suppose.</p>

<h3 id="hashmap"><code>hash_map</code></h3>

<p>All JavaScript objects are maps.  But those can only use strings as
keys.<sup id="fnref:es6-maps"><a href="#fn:es6-maps" rel="footnote">3</a></sup>  The <code>hash_map</code> provided by Mori can use any values as keys.</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">mori</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mori&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">2</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash_map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="s1">&#39;second&#39;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;second&#39;</span><span class="p">);</span>
</code></pre></div>

<p>If you use plain JavaScript objects as keys they will be compared by
reference identity.  If you use Mori data structures as keys they will
be compared by value using equality comparisons provided by
ClojureScript.</p>

<p>Mori maps are immutable; so there is never a need to create defensive
copies.  An update operation produces a new map.</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash_map</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">m1</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="nx">empty</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">m2</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">assoc</span><span class="p">(</span><span class="nx">m1</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;nao&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">m3</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">dissoc</span><span class="p">(</span><span class="nx">m2</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">m2</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">m2</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">m3</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span>
</code></pre></div>

<p>The function <code>assoc</code> adds any number key-value pairs to a map; and
<code>dissoc</code> removes keys.</p>

<p>All of this also applies to <code>array_map</code>, <code>sorted_map</code>, and
<code>sorted_map_by</code>.  See <a href="#different-map-and-set-implementations">Different map and set implementations</a>
below for information about those.</p>

<p>There is a common pattern in JavaScript of passing options objects to
constructors to avoid having functions that take zillions of arguments.
It is also common to have a set of default values for certain options.
So code like this is pretty typical:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">);</span>
</code></pre></div>

<p>I usually put in an empty object as the first argument to the Underscore
<a href="http://underscorejs.org/#extend"><code>_.extend</code></a> call so that I get a new object instead of modifying the
given options object in place.  Modifying the options object could cause
problems if it is reused somewhere outside of my constructor.  An
alternative to the defensive copy could be to use immutable Mori maps:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">MyFeature</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">into</span><span class="p">(</span><span class="nx">MyFeature</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">js_to_clj</span><span class="p">(</span><span class="nx">options</span><span class="p">));</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getPosition</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="s1">&#39;position&#39;</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getDestroyOnClose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="s1">&#39;destroyOnClose&#39;</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="nx">MyFeature</span><span class="p">.</span><span class="nx">defaults</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">into</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">hash_map</span><span class="p">(),</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">js_to_clj</span><span class="p">({</span>
    <span class="nx">destroyOnClose</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;below&#39;</span>
    <span class="c1">// etc...</span>
<span class="p">}));</span>

<span class="kd">var</span> <span class="nx">feat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyFeature</span><span class="p">({</span> <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;above&#39;</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">feat</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;above&#39;</span><span class="p">);</span>
</code></pre></div>

<p>The function <code>mori.into(coll, from)</code> adds all of the members of <code>from</code>
into a copy of <code>coll</code>.  Both <code>from</code> and <code>coll</code> can by any Mori
collection.</p>

<p>That does still involve copying the input <code>options</code> object into a new
Mori map.  It is also possible to provide a Mori sequence as input to
start with - <code>js_to_clj</code> will accept either a plain JavaScript object or
a Mori collection:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">feat_</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyFeature</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">hash_map</span><span class="p">(</span>
    <span class="s1">&#39;position&#39;</span><span class="p">,</span>       <span class="s1">&#39;above&#39;</span><span class="p">,</span>
    <span class="s1">&#39;destroyOnClose&#39;</span><span class="p">,</span> <span class="kc">true</span>
<span class="p">));</span>
</code></pre></div>

<p>There is probably no performance gain from using Mori in this situation.
It is unlikely to matter anyway, since the structures involved are
small.  In situations with larger data structures, or where data is
copied many times in a loop, Mori’s ability to create copies faster
using less memory could make a difference.</p>

<p>But in my opinion applying immutability consistently - even where there
are no significant performance gains - can simplify things.</p>

<h2 id="apples-to-apples">Apples to apples</h2>

<p>The transformations that are available in Mori - <code>map</code>, <code>filter</code>, etc.
- return lazy sequences no matter what the type of the input collection
is.  (See <a href="#laziness">Laziness</a> below for an explanation of what laziness is).
This is advantageous because the other collection implementations are
not lazy.  But what if you want to do something like create a new set
based on an existing set?  The answer is that you feed a lazy sequence
into a new empty collection using the appropriate constructor or the
<code>into</code> function, which dumps all of the content from one collection into
another:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">s_1</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">set</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
<span class="kd">var</span> <span class="nx">seq</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="p">},</span> <span class="nx">s_1</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">s_2</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">seq</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s_2</span><span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; #{25 16 9 4 1}</span>

<span class="kd">var</span> <span class="nx">empty_s</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">sorted_set_by</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">s_3</span>     <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">into</span><span class="p">(</span><span class="nx">empty_s</span><span class="p">,</span> <span class="nx">seq</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s_3</span><span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; #{1 4 9 16 25}</span>
</code></pre></div>

<p>Applying <code>map</code> to the first set is lazy - but building the second set
with <code>into</code> is not.  So a good practice is to avoid building non-lazy
collection until the last possible moment.</p>

<p>An odd quirk in Mori is that the <code>set</code> constructor takes a collection
argument, but most of the other constructors take individual values or
key-value pairs.  The <code>into</code> function behaves more consistently across
data structure implementations.</p>

<p>You might want to write transformations that are polymorphic - that can
operate on any type of collection and that return a collection of the
same type.  To do that use <code>mori.empty(coll)</code> to get an empty version of
a given collection.  This makes it possible to build a new collection
without having to know which constructor was used to create the
original.</p>

<p>Here is a function that removes <code>null</code> values from any Mori collection
and that returns a collection of the same type:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">compact</span><span class="p">(</span><span class="nx">coll</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">into</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">empty</span><span class="p">(</span><span class="nx">coll</span><span class="p">),</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">is_map</span><span class="p">(</span><span class="nx">coll</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="o">:</span> <span class="nx">elem</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">value</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">},</span> <span class="nx">coll</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>

<p>If the collection given is a map then the value of <code>elem</code> in the filter
callback will be a key-value pair.  So <code>compact</code> includes an <code>is_map</code>
check and extracts the value from that key-value pair if a map is given.</p>

<p>A nice advantage of <code>empty</code> is that if you use it on a <code>sorted_set_by</code>
or on a <code>sorted_map_by</code>, the new collection will inherit the same
comparison function that the original uses.</p>

<h2 id="mori-pairs-well-with-bacon">Mori pairs well with Bacon</h2>

<p>In a previous post, <a href="http://sitr.us/2013/05/22/functional-reactive-programming-in-javascript.html">Functional Reactive Programming in
JavaScript</a>, I wrote about functional reactive programming (FRP)
using <a href="https://github.com/raimohanska/bacon.js">Bacon.js</a> and <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>.  A typical assumption in FRP code is
that values contained in events and properties will never be updated in
place.  The immutable data structures that Mori provides are a perfect
fit.</p>

<h2 id="list-versus-vector">List versus Vector</h2>

<p>Linked lists are nice and simple - but become less appealing when it
becomes desirable to access elements at arbitrary positions in
a sequence, to append elements to the end of a sequence, or to update
elements at arbitrary indexes.  The running time for all of these
operations on lists is linear, and the append and update operations
require creating a full copy of the list up to the changed position.</p>

<p>Clojure’s PersistentVector is a sequence, like a list.  But
under-the-hood it is implemented as a tree with 32-way branching.  That
means that any vector index can be looked up in O(log_32 n) time.
Appending and updating arbitrary elements also takes place in
logarithmic time.  For more details read <a href="http://web.archive.org/web/20130119231848/http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/">Understanding Clojure’s
PersistentVector implementation</a>.</p>

<p>Sequences that are implemented as mutable arrays of contiguous memory
support constant-time lookups and modification (not including array
resizing when array length grows).  If O(log_32 n) does not seem
appealing in comparison, consider that if you are using 32-bit integers
as keys:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">max_int</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">log_32</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span> <span class="p">};</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">log_32</span><span class="p">(</span><span class="nx">max_int</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">7</span> <span class="p">);</span>
</code></pre></div>

<p>Which means that your keyspace will run out before your vector’s tree
becomes more than 7 layers deep.  Up to that point operations will be
O(7) or faster.</p>

<p>If your keys are JavaScript numbers, which are 64-bit floating point
values, the largest integer that you can count up to without skipping
any numbers is <code>Math.pow(2, 53)</code>.  The logarithm of that number is also
small:</p>

<pre><code>assert( log_32(Math.pow(2, 53)) &lt; 11 );
</code></pre>

<p>The <code>hash_map</code> and <code>set</code> implementations in Mori are also implemented as
trees with 32-way branching.  The sorted map and set structures are
implemented as binary trees.</p>

<h2 id="equality-ordering-and-hashing">Equality, ordering, and hashing</h2>

<p>Map and set lookups are based on either hashing or ordering comparisons,
depending on the implementation.  JavaScript does not have built-in hash
functions - at least not that are accessible to library code.  It also
does not have defined ordering or equality for most non-primitive
values.  So Mori uses its own functions, which it gets from
ClojureScript.</p>

<h3 id="hash">hash</h3>

<p>Every Mori value has a hash that identifies its content:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">vector</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1634041171</span> <span class="p">);</span>
</code></pre></div>

<p>If a value is recreated with the same content, it has the same hash:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">v2</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">vector</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">v2</span><span class="p">)</span> <span class="o">===</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div>

<p>Mori’s hash function delegates to a specific hash algorithm for each of
its data structures, which are ultimately based on internal algorithms
that Mori uses to compute hashes for primitive JavaScript values:</p>

<div class="highlight"><pre><code class="js"><span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>         <span class="o">===</span> <span class="mi">2</span>      <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span>       <span class="o">===</span> <span class="mi">50</span>     <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>     <span class="o">===</span> <span class="mi">101574</span> <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>      <span class="o">===</span> <span class="mi">1</span>      <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>     <span class="o">===</span> <span class="mi">0</span>      <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>      <span class="o">===</span> <span class="mi">0</span>      <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span>      <span class="p">);</span>
</code></pre></div>

<p>Since Mori also accommodates arbitrary JavaScript values as map keys and
set values, it also has a scheme for assigning hash values to other
JavaScript objects.</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span> <span class="p">);</span>
</code></pre></div>

<p>It seems that Mori has a monotonically increasing counter for object
hash values.  The first object that it computes a hash for gets the
value <code>1</code>; the second object gets <code>2</code>, and so on.  To keep track of
which object got which hash value, it stores the value on the object
itself:</p>

<div class="highlight"><pre><code class="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
<span class="c1">//&gt; [ &#39;foo&#39;, &#39;closure_uid_335348264&#39; ]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">closure_uid_335348264</span><span class="p">;</span>
<span class="c1">//&gt; 1</span>
</code></pre></div>

<p>There are obvious hash-collision issues between non-Mori objects,
numbers, and <code>true</code>.  But Mori data structures can handle hash
collisions.  If a collection uses all of those types as keys it could
end up with one hash bucket with three entries.</p>

<h3 id="equals">equals</h3>

<p>Mori has its own equals function, which also comes from ClojureScript.
As with hash, any two mori values that have the same content are
considered to be equal:</p>

<div class="highlight"><pre><code class="js"><span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">v2</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div>

<p>It works on primitive JavaScript values:</p>

<div class="highlight"><pre><code class="js"><span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div>

<p>When applied to non-Mori JavaScript objects, <code>equals</code> works the same way
that the built-in <code>===</code> function does:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">obj_1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">obj_2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="nx">assert</span><span class="p">(</span> <span class="o">!</span><span class="nx">mori</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">obj_1</span><span class="p">,</span> <span class="nx">obj_2</span><span class="p">)</span> <span class="p">);</span>
<span class="nx">assert</span><span class="p">(</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">obj_1</span><span class="p">,</span> <span class="nx">obj_1</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div>

<h3 id="compare">compare</h3>

<p>ClojureScript has a compare function, which Mori uses in its sorted data
structure implementations.  Mori does not export the compare function.
The function defines an ordering for Mori values and for primitive
JavaScript values - but not for other JavaScript objects.  So if you
want to put non-Mori objects into a sorted structure you will have to
use an implementation that accepts a custom comparison function.</p>

<h2 id="different-map-and-set-implementations">Different map and set implementations</h2>

<p><code>hash_map</code> and <code>set</code> use a hash function for lookups and have O(log<em>32
n) lookup times; the sorted variants use comparison functions for
lookups and have O(log</em>2 n) lookup times; and <code>array_map</code> is just an
array of key-value pairs, so it uses only an equality function for
lookups and has O(n) lookup times.</p>

<table>
  <thead>
    <tr>
      <th>constructor</th>
      <th style="text-align: right">insert time</th>
      <th style="text-align: right">lookup time</th>
      <th>how keys/values are checked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>hash_map</code></td>
      <td style="text-align: right">log_32 n</td>
      <td style="text-align: right">log_32 n</td>
      <td><code>hash(key) === hash(target_key) &amp;&amp; equals(key, target_key)</code></td>
    </tr>
    <tr>
      <td><code>array_map</code></td>
      <td style="text-align: right">1</td>
      <td style="text-align: right">n</td>
      <td><code>equals(key, target_key)</code></td>
    </tr>
    <tr>
      <td><code>sorted_map</code></td>
      <td style="text-align: right">log_2 n</td>
      <td style="text-align: right">log_2 n</td>
      <td><code>compare(key, target_key)</code></td>
    </tr>
    <tr>
      <td><code>sorted_map_by</code></td>
      <td style="text-align: right">log_2 n</td>
      <td style="text-align: right">log_2 n</td>
      <td>like <code>sorted_map</code> with a user-supplied comparison function</td>
    </tr>
    <tr>
      <td><code>set</code></td>
      <td style="text-align: right">log_32 n</td>
      <td style="text-align: right">log_32 n</td>
      <td><code>hash(val) === hash(target_val) &amp;&amp; equals(val, target_val)</code></td>
    </tr>
    <tr>
      <td><code>sorted_set</code></td>
      <td style="text-align: right">log_2 n</td>
      <td style="text-align: right">log_2 n</td>
      <td><code>compare(val, target_val)</code></td>
    </tr>
    <tr>
      <td><code>sorted_set_by</code></td>
      <td style="text-align: right">log_2 n</td>
      <td style="text-align: right">log_2 n</td>
      <td>like <code>sorted_set</code> with a user-supplied comparison function</td>
    </tr>
  </tbody>
</table>

<p><code>hash</code> and <code>equals</code> are provided by Mori.  <code>compare</code> is part of
ClojureScript, but is not exported by Mori.</p>

<p>Note that the sorted structures do not perform <code>equals</code> checks - instead
they rely on a comparison function to determine whether values or keys
are the same.  On the other hand, the hash structures do perform
<code>equals</code> checks to handle hash collisions.</p>

<p><code>array_map</code> is unique among the map and set implementations in that it
preserves the order of keys and values based on the order in which they
were inserted.  If a value is inserted into an <code>array_map</code> and then the
map is converted to a sequence (for example, using <code>mori.seq(m)</code>) then
the last key-value pair inserted appears last in the resulting sequence.
The ordering in a new <code>array_map</code> is determined by the order of
key-value pairs given to the constructor.</p>

<p><code>array_map</code> is a good choice for small maps that are accessed
frequently.  The linear lookup time looks slower than other map
implementations on paper.  But there is no hashing involved and only
simple vector traversal - so each of those n steps is faster than each
of the log_32 n steps in a <code>hash_map</code> lookup.</p>

<p>The <code>array_map</code> implementation has an internal notion of the upper limit
on an efficient size.  Once the map reaches that threshold, inserting
another key-value pair produces a <code>hash_map</code> instead of a larger
<code>array_map</code>.<sup id="fnref:ArrayMaps"><a href="#fn:ArrayMaps" rel="footnote">4</a></sup></p>

<p>The information here on implementations and running times mainly comes
from <a href="http://www.infoq.com/articles/in-depth-look-clojure-collections">An In-Depth Look at Clojure Collections</a>.</p>

<h2 id="laziness">Laziness</h2>

<p>Many of the functions provided by Mori return what is called a lazy
sequence.  Being a sequence this is like a list and can be transformed
using functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>.  What makes a
sequence lazy is that it is not actually computed right away.
Evaluation is deferred until some non-lazy function accesses one or more
elements of the transformed sequence.  At that point Mori computes and
memoizes transformations.</p>

<div class="highlight"><pre><code class="js"><span class="c1">// Sets, maps, vectors, and lists are actually not lazy.  But ranges</span>
<span class="c1">// are.</span>
<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">sorted_set_by</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;comparing&#39;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="c1">// Outputs approximately n * log_2(n) lines:</span>
<span class="c1">// &gt; comparing 4 5</span>
<span class="c1">// &gt; comparing 3 5</span>
<span class="c1">// &gt; comparing 3 4</span>
<span class="c1">// &gt; comparing 2 4</span>
<span class="c1">// &gt; comparing 2 3</span>
<span class="c1">// &gt; comparing 1 4</span>
<span class="c1">// &gt; comparing 1 3</span>
<span class="c1">// &gt; comparing 1 2</span>

<span class="c1">// `map` returns a lazy sequence of transformed values.</span>
<span class="kd">var</span> <span class="nx">seq</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;processed:&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span> <span class="o">-</span> <span class="nx">e</span><span class="p">;</span>
<span class="p">},</span> <span class="nx">s</span><span class="p">);</span>

<span class="c1">// No output yet.</span>

<span class="c1">// Getting the string representation of a collection or applying a</span>
<span class="c1">// non-lazy function like `reduce` forces evaluation.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">seq</span><span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; processed: 1</span>
<span class="c1">// &gt; processed: 2</span>
<span class="c1">// &gt; processed: 3</span>
<span class="c1">// &gt; processed: 4</span>
<span class="c1">// &gt; processed: 5</span>
<span class="c1">// &gt; (-1 -2 -3 -4 -5)</span>
</code></pre></div>

<p>The results of a lazy evaluation are cached.  If the same sequence is
forced again the map function will not be called a second time:</p>

<div class="highlight"><pre><code class="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">seq</span><span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; (-1 -2 -3 -4 -5)</span>
</code></pre></div>

<p>Mori runs just enough deferred computation to get whatever result is
needed.  It is often not necessary to compute an entire lazy sequence:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">seq_</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;processed:&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">e</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">},</span> <span class="nx">s</span><span class="p">);</span>

<span class="c1">// `take` returns a lazy sequence of the first n members of a</span>
<span class="c1">// collection.</span>
<span class="kd">var</span> <span class="nx">seq__</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">seq_</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">seq__</span><span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; processed: 1</span>
<span class="c1">// &gt; processed: 2</span>
<span class="c1">// &gt; (2 4)</span>
</code></pre></div>

<p>In the above case there is an intermediate lazy sequence that
theoretically contains five values: the results of doubling values in
the original set.  But only the first two values in that sequence are
needed.  The other three are never computed.</p>

<p>Laziness means that it is possible to create infinite sequences without
needing unlimited memory or time:</p>

<div class="highlight"><pre><code class="js"><span class="c1">// With no arguments, `range` returns a lazy sequence of all whole</span>
<span class="c1">// numbers from zero up.</span>
<span class="kd">var</span> <span class="nx">non_neg_ints</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">range</span><span class="p">();</span>

<span class="c1">// Dropping the first element, zero, results in a sequence of all of</span>
<span class="c1">// the natural numbers.</span>
<span class="kd">var</span> <span class="nx">nats</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">drop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">non_neg_ints</span><span class="p">);</span>

<span class="c1">// Let&#39;s take just the powers of 2.</span>
<span class="kd">var</span> <span class="nx">log_2</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">;</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">is_pow_2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">log_2</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">pows_2</span>   <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">is_pow_2</span><span class="p">,</span> <span class="nx">nats</span><span class="p">);</span>

<span class="c1">// What are the first 10 powers of 2?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">pows_2</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; (1 2 4 8 16 32 64 128 256 512)</span>

<span class="c1">// What is the 20th power of 2?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">nth</span><span class="p">(</span><span class="nx">pows_2</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; 1048576</span>
</code></pre></div>

<p>If you try this out in a REPL, such as node, be aware that when an
expression is entered a JavaScript REPL will usually try to print the
value of that expression, which has the effect of forcing evaluation of
lazy sequences.  If you enter a lazy sequence you will end up in an
infinite loop:</p>

<div class="highlight"><pre><code class="js"><span class="nx">non_neg_ints</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">range</span><span class="p">();</span>

<span class="c1">// Loops for a long time, then runs out of memory.</span>
</code></pre></div>

<p>The solution to this is to be careful to assign infinite sequences in
<code>var</code> statements.  That prevents the REPL from trying to print the
sequence:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">non_neg_ints</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">range</span><span class="p">();</span>

<span class="c1">// Prints &#39;undefined&#39;, all is well.</span>
</code></pre></div>

<p>Powers of two are actually a terrible example of a lazy sequence: any
element in that sequence could be calculated more quickly using
<code>Math.pow()</code>.  It just happens that powers of two are simple to
demonstrate.</p>

<p>Algorithms that really do benefit from infinite sequences are those
where computation of any element requires references to earlier values
in the sequence.  A good example is computing <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci numbers</a>.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">fibs</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">pairs</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">iterate</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">pair</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">return</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">];</span>
    <span class="p">},</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">first</span><span class="p">,</span> <span class="nx">pairs</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>

<p>This implementation uses the <a href="http://swannodette.github.io/mori/#iterate"><code>iterate</code></a> function, which takes
a function and an initial value.  It creates an infinite sequence by
repeatedly applying the given function.  The given starting value is
<code>[0, 1]</code>, and each invocation of the given function combines the second
value in the previous pair with the sum of the values in the previous
pair; so the resulting sequence is: <code>([0, 1] [1, 1] [1, 2] [2, 3] [3, 5]
...)</code>.  The <a href="http://swannodette.github.io/mori/#map"><code>map</code></a> function is applied to that, taking the first
value from each pair.</p>

<p>Using this sequence allows us to ask the questions:</p>

<div class="highlight"><pre><code class="js"><span class="c1">// What are the first ten values in the Fibonacci sequence?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">fibs</span><span class="p">())</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; (0 1 1 2 3 5 8 13 21 34)</span>

<span class="c1">// What is the 100th number in the Fibonacci sequence?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">nth</span><span class="p">(</span><span class="nx">fibs</span><span class="p">(),</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; 354224848179262000000</span>

<span class="c1">// What is the sum of the first 4 Fibonacci numbers that are also</span>
<span class="c1">// powers of 2?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">is_pow_2</span><span class="p">,</span> <span class="nx">fibs</span><span class="p">())))</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; 12</span>

<span class="c1">// What is the 5th Fibonacci number that is also a power of 2?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">nth</span><span class="p">(</span><span class="nx">mori</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">is_pow_2</span><span class="p">,</span> <span class="nx">fibs</span><span class="p">()),</span> <span class="mi">4</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// My computer runs for a long time with no apparent answer...</span>
</code></pre></div>

<p>A lazy sequence might also contain lines from a large file or chunks of
data flowing into a network server.  At the time of this writing I was
not able to write a program that traversed a long sequence in constant
space.  But I have verified that this is possible in JavaScript.  I may
find a solution and post an update later.</p>

<h3 id="efficiency">Efficiency</h3>

<p>In procedural code running a sequence through multiple operations that
apply to every element would result in multiple iterations of the entire
sequence.  Because Mori operates lazily it can potentially collect
transformations for each element and apply them in a single pass:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">seq_1</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;first pass:&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">e</span><span class="p">;</span>
<span class="p">},</span> <span class="nx">s</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">seq_2</span> <span class="o">=</span> <span class="nx">mori</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;second pass:&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">e</span><span class="p">;</span>
<span class="p">},</span> <span class="nx">seq_1</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="nx">mori</span><span class="p">.</span><span class="nx">take</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">seq_2</span><span class="p">);</span>
<span class="p">);</span>

<span class="c1">// Outputs:</span>
<span class="c1">// &gt; first pass: 1</span>
<span class="c1">// &gt; second pass: 1</span>
<span class="c1">// &gt; first pass: 2</span>
<span class="c1">// &gt; second pass: 2</span>
<span class="c1">// &gt; (1 2)</span>
</code></pre></div>

<p>If applying <code>map</code> to a collection twice resulted in two iterations we
would expect to see:</p>

<div class="highlight"><pre><code class="js"><span class="c1">// &gt; first pass: 1</span>
<span class="c1">// &gt; first pass: 2</span>
<span class="c1">// &gt; second pass: 1</span>
<span class="c1">// &gt; second pass: 2</span>
</code></pre></div>

<p>The fact that the first pass and second pass are interleaved suggests
that Mori collects transformations and applies all transformations to
a value at once.  This is the advantage of lazy evaluation: it
encourages writing code in a way that makes most logical sense rather
than thinking about performance.  You can write what are logically many
iterations over a collection and the library will rearrange computations
to minimize the actual work that is done.</p>

<p><em>Updated 2013-11-12: Added section on installing Mori.</em></p>
<div class="footnotes">
  <ol>
    <li id="fn:polymorphism">
      <p>You might be wondering how Clojure handles polymorphism, since the convention is to use functions instead of methods.  Clojure has a feature called <a href="http://clojure.org/protocols">protocols</a> that permit multiple implementations for functions depending on the type of a given argument.  Elsewhere in the functional world, <a href="http://www.haskell.org/haskellwiki/Haskell">Haskell</a> and <a href="http://www.scala-lang.org/">Scala</a> provide a similar, yet more powerful feature, called <a href="http://learnyouahaskell.com/types-and-typeclasses">type classes</a>.<a href="#fnref:polymorphism" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:conj">
      <p>When <code>conj</code> is used on a list it prepends elements (like <code>cons</code>) because prepending is much cheaper than inserting at other possible positions.  Given a vector <code>conj</code> appends values.  Appending is often desired, and appending to a vector is just as efficient as inserting at any other position.  <code>conj</code> works on sets and maps too - but in those cases the idea of insertion position is not usually meaningful.<a href="#fnref:conj" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:es6-maps">
      <p>It does look like ECMAScript 6 will add <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">a Map implementation</a> and a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a> to the language spec, both of which will take arbitrary objects as keys (only non-primitives in the WeakMap case).  But those implementations will not be immutable!<a href="#fnref:es6-maps" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:ArrayMaps">
      <p><a href="http://clojure.org/data_structures#Data%20Structures-ArrayMaps">http://clojure.org/data_structures#Data Structures-ArrayMaps</a><a href="#fnref:ArrayMaps" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Reactive Programming in JavaScript]]></title>
    <link href="http://sitr.us/2013/05/22/functional-reactive-programming-in-javascript.html"/>
    <updated>2013-05-22T00:00:00-07:00</updated>
    <id>http://sitr.us/2013/05/22/functional-reactive-programming-in-javascript</id>
    <content type="html"><![CDATA[<p>I had a great time at <a href="http://nodepdx.org/">NodePDX</a> last week.  There were many talks
packed into a short span of time and I saw many exciting ideas
presented.  One topic that seemed particularly useful to me was <a href="http://lanyrd.com/2013/nodepdx/schbpc/">Chris
Meiklejohn’s talk on Functional Reactive Programming (FRP)</a>.</p>

<p>I have talked and written about how useful promises are.  See <a href="http://sitr.us/2012/07/31/promise-pipelines-in-javascript.html">Promise
Pipelines in JavaScript</a>.  Promises are useful when you want
to represent the outcome of an action or a value that will be available
at some future time.  FRP is similar except that it deals with streams
of reoccurring events and dynamic values.</p>

<p>Here is an example of using FRP to subscribe to changes to a text input.
This creates an event stream that could be used for a typeahead search
feature:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">inputs</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#search&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;keyup change&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">;</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">throttled</span> <span class="o">=</span> <span class="nx">inputs</span><span class="p">.</span><span class="nx">throttle</span><span class="p">(</span><span class="mi">500</span> <span class="cm">/* ms */</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">distinct</span> <span class="o">=</span> <span class="nx">throttled</span><span class="p">.</span><span class="nx">skipDuplicates</span><span class="p">();</span>
</code></pre></div>

<p>This creates an event stream from all <code>keyup</code> and <code>change</code> events on the
given input.  The stream is transformed into a stream of strings matching
the value of the input when each event occurs.  Then that stream is
filtered so that subscribers to <code>inputs</code> will only receive events if the
value of the input has a length greater than two.</p>

<!-- more -->

<p>Streams can be assigned to variables, shared, and used as inputs to
create more specific streams.  In the example above <code>inputs</code> is used to
create two more streams: one that limits the stream so that events are
emitted at most every 500 ms and another that takes the throttled
stream and drops duplicate values that appear consecutively.  So when
the final stream, <code>distinct</code>, is consumed later it is guaranteed that
events 1) will be non-empty strings with length greater than two, 2)
will not occur too frequently, and 3) will not include duplicates.</p>

<p>That stream can be fed through a service via ajax calls to show a live
list of results:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">searchWikipedia</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;//en.wikipedia.org/w/api.php?callback=?&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;opensearch&#39;</span><span class="p">,</span>
        <span class="nx">format</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
        <span class="nx">search</span><span class="o">:</span> <span class="nx">term</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="nx">query</span><span class="o">:</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">results</span><span class="o">:</span> <span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">};</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">suggestions</span> <span class="o">=</span> <span class="nx">distinct</span><span class="p">.</span><span class="nx">flatMapLatest</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">fromPromise</span><span class="p">(</span><span class="nx">searchWikipedia</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">suggestions</span><span class="p">.</span><span class="nx">onValue</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">$results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#results&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
    <span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">s</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$results</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>

<p>Here <code>suggestions</code> is a new stream that has been transformed from
strings to search results using the <code>searchWikipedia</code> function.  All
of jQuery’s ajax methods return promises and <code>Bacon.fromPromise()</code>
turns a promise into an event stream.</p>

<p>The <code>flatMapLatest</code> transformer builds a new stream from an existing
stream and a stream factory - and it only emits events from the last
stream created.  This means that if the user types slowly and a lot of
ajax requests are made responses to all but the last request will be
disregarded.</p>

<p>The <code>suggestions</code> stream is ultimately used by calling its <code>onValue</code>
method.  That adds a subscriber that runs code for every event that
makes it all the way through the stream.  The result is a list of search
results that is updated live as the user types.</p>

<p>There are some other tricks available.  It is possible to bind data from
an event stream to a DOM element:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">suggestions</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">toProperty</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">);</span>

<span class="nx">query</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#query&#39;</span><span class="p">),</span> <span class="s1">&#39;text&#39;</span><span class="p">);</span>
</code></pre></div>

<p>This creates a new stream that is pared down to just the query used to
produce each set of results.  Whenever a result set is rendered the
corresponding query will also be output as the text content of the
<code>'#query'</code> element.  The new stream is converted to a property to make
this work.  A property is a value that varies over time.  The main
practical distinction between a property and an event stream is that
a property always has a value.  In other words a property is
<em>continuous</em> while an event stream is <em>discrete</em>.  This example provides
<code>'--'</code> as the initial value for the new property.</p>

<p>Notice that property binding as shown here is more general than some
data binding frameworks in that the destination is not limited to DOM
elements and the source is not limited to model instances.  This example
passes values to the <code>text</code> method of the given jQuery object.  It is
possible to push data to any method on any object.</p>

<p>Streams can be combined, split, piped, and generally manipulated in all
kinds of ways.  Properties can be bound, sampled, combined, transformed,
or whatever.</p>

<p>I put this code up on JSFiddle so you can try it out and play with it:
<a href="http://jsfiddle.net/hallettj/SqrNT/">http://jsfiddle.net/hallettj/SqrNT/</a></p>

<p>There are several FRP implementations out there.  Two that seem to be
prominent are <a href="https://github.com/raimohanska/bacon.js">Bacon.js</a> and <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>.  The examples above are code
from the RxJS documentation that I rewrote with Bacon.  That gave me an
opportunity to learn a bit about both libraries and to see how they
approach the same problem.  The original RxJS code is
<a href="https://github.com/Reactive-Extensions/RxJS#why-rxjs">here</a>.</p>

<p>With FRP it is possible to describe complicated processes in a clean,
declarative way.  FRP is also a natural way to avoid certain classes of
race conditions.  When I wrote the initial version of the sample code
above it worked perfectly on the first try.  In my view that is a sign
of a very well-designed library.</p>

<p>If you are interested in further reading I suggest the <a href="http://nullzzz.blogspot.fi/2012/11/baconjs-tutorial-part-i-hacking-with.html">series of
tutorials</a> from the author of Bacon.  And there is a great
deal of information on the RxJS and Bacon Github pages, including
documentation and more examples.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monkey patching document.write()]]></title>
    <link href="http://sitr.us/2012/09/04/monkey-patching-document-write.html"/>
    <updated>2012-09-04T00:00:00-07:00</updated>
    <id>http://sitr.us/2012/09/04/monkey-patching-document-write</id>
    <content type="html"><![CDATA[<p>This is one of the crazier workarounds that I have implemented.  I was
working on a web page that embeds third-party widgets.  The widgets are
drawn in the page document - they do not get their own frames.  And
sometimes the widgets are redrawn after page load.</p>

<p>We had a problem with one widget invoking <code>document.write()</code>.  In case
you are not familiar with it, if that method is called while the page is
rendering it inserts content into the DOM immediately after the script
tag in which the call is made.  But if <code>document.write()</code> is called
after page rendering is complete it erases the entire DOM.  When this
widget was redrawn after page load it would kill the whole page.</p>

<p>The workaround we went with was to disable <code>document.write()</code> after page
load by replacing it with a wrapper that checks whether the jQuery ready
event has fired.</p>

<div class="highlight"><pre><code class="js"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">originalWrite</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">jQuery</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">isReady</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">console</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;document.write called after page load&quot;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// In IE before version 8 `document.write()` does not</span>
            <span class="c1">// implement Function methods, like `apply()`.</span>
            <span class="k">return</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span>
                <span class="nx">originalWrite</span><span class="p">,</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">arguments</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div>

<p>The new implementation checks the value of <code>jQuery.isReady</code> and
delegates to the original <code>document.write()</code> implementation if the page
is not finished rendering yet.  Otherwise it does nothing other than to
output a warning message.</p>

<!-- more -->

<p>Disabling <code>document.write()</code> means that the problematic widget will not
be fully functional if it is redrawn after page load.  It happens that
in the case of this app that is ok.  The redrawn widget is only used as
a preview when editing widget layouts.</p>

<p>A particular problem came up with IE compatibility.  I wanted to use the
<code>apply</code> method that is implemented by all functions in JavaScript to
invoke the original <code>document.write()</code> implementation, like this:</p>

<div class="highlight"><pre><code class="js"><span class="k">return</span> <span class="nx">originalWrite</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</code></pre></div>

<p>But in older versions of Internet Explorer, <code>document.write()</code> is not
really a function.  There are a lot of examples in IE of native API
methods and properties that do not behave like regular JavaScript
values.  For example if you pass too many arguments to a DOM API method
in old IE you will get an exception.  Normal JavaScript functions just
silently ignore extra arguments.  If you look at the value of <code>typeof
document.write</code> the result is not <code>"function"</code>.  What is particularly
problematic in this case is that <code>document.write</code> does not implement
<code>call</code> or <code>apply</code>.</p>

<p>Fortunately I found that the Function prototype does implement both
<code>call</code> and <code>apply</code> and furthermore you can borrow those methods to use
on function-like values like <code>document.write</code>.  <code>call</code> and <code>apply</code> are
themselves real function values - so <code>call</code> and <code>apply</code> both implement
<code>call</code> and <code>apply</code>.  </p>

<div class="highlight"><pre><code class="js"><span class="k">typeof</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">.</span><span class="nx">apply</span><span class="p">.</span><span class="nx">apply</span>  <span class="c1">// evaluates to &#39;function&#39;</span>
<span class="k">typeof</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">.</span><span class="nx">call</span><span class="p">.</span><span class="nx">call</span>  <span class="c1">// evaluates to &#39;function&#39;</span>
</code></pre></div>

<p>In the workaround above I applied <code>apply</code> to <code>document.write</code> by taking
the <code>Function.prototype.apply</code> value and using its <code>call</code> method.  So
this expression,</p>

<div class="highlight"><pre><code class="js"><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">originalWrite</span><span class="p">,</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</code></pre></div>

<p>is equivalent to this one,</p>

<div class="highlight"><pre><code class="js"><span class="nx">originalWrite</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</code></pre></div>

<p>Except that the first version works in IE7.</p>

<p>If you find this difficult to follow, you are not alone.</p>

<p>We have had this workaround in our code for a couple of years now.  So
far it is working nicely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise Pipelines in JavaScript]]></title>
    <link href="http://sitr.us/2012/07/31/promise-pipelines-in-javascript.html"/>
    <updated>2012-07-31T00:00:00-07:00</updated>
    <id>http://sitr.us/2012/07/31/promise-pipelines-in-javascript</id>
    <content type="html"><![CDATA[<aside class="translations"><p>This page has been translated into <a href="http://www.webhostinghub.com/support/es/misc/las-bases-de">Spanish</a>
language by Maria Ramos  from <a href="http://www.webhostinghub.com/">Webhostinghub.com</a>.</p></aside>

<p>Promises, also know as deferreds or futures, are a wonderful abstraction
for manipulating asynchronous actions.  Dojo has had <a href="http://dojotoolkit.org/reference-guide/1.7/dojo/Deferred.html">Deferreds</a>
for some time.  jQuery introduced <a href="http://api.jquery.com/category/deferred-object/">its own Deferreds</a>
in version 1.5 based on the CommonJS <a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A</a> specification.  I’m
going to show you some recipes for working with jQuery Deferreds.  Use
these techniques to turn callback-based spaghetti code into elegant
declarative code.</p>

<h2 id="the-basics-of-jquery-deferreds">The basics of jQuery Deferreds</h2>

<p>A Deferred is an object that represents some future outcome.  Eventually
it will either resolve with one or more values if that outcome was
successful; or it will fail with one or more values if the outcome was
not successful.  You can get at those resolved or failed values by
adding callbacks to the Deferred.</p>

<p>In jQuery’s terms a promise is a read-only view of a deferred.</p>

<p>Here is a simple example of creating and then resolving a promise:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">fooPromise</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>

<p>Callbacks can be added to a deferred or a promise using the <code>.then()</code>
method.  The first callback is called on success, the second on failure:</p>

<!-- more -->

<div class="highlight"><pre><code class="js"><span class="nx">fooPromise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// prints &quot;foo&quot; after 1 second</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;something went wrong&quot;</span><span class="p">);</span> <span class="p">}</span>
<span class="p">);</span>
</code></pre></div>

<p>For more information see the
<a href="http://api.jquery.com/category/deferred-object/">jQuery Deferred documentation</a>.</p>

<p>Note that if you are using a version of jQuery prior to 1.8 you will
have to use <code>.pipe()</code> instead of <code>.then()</code>.  That goes for all
references to <code>.then()</code> in this article.</p>

<h2 id="sequential-operations">Sequential operations</h2>

<p>Actions, such as HTTP requests, need to be sequential if input to one
action depends on the output of another; or if you just want to make
sure that actions are performed in a particular order.</p>

<p>Consider a scenario where you have a post id and you want to display
information about the author of that post.  Your web services don’t
support embedding author information in a post resource.  So you will
have to download data on the post, get the author id, and then make
another request to get data for the author.  To start with you will want
functions for downloading a post and a user:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">getPost</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/posts/&#39;</span><span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/users/&#39;</span><span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>In jQuery 1.5 and later all ajax methods return a promise that, on
a successful request, resolves with the data in the response, the
response status, and the XHR object representing the request.</p>

<p>The <code>.then()</code> method produces a new promise that transforms the resolved
value of its input.  I used <code>.then()</code> here just because using <code>$.when()</code>
is simpler if each promise resolves to a single value.  We will get back
to that in parallel operations.  Since only one argument is provided to
<code>.then()</code> in these cases the new promises will have the same error
values as the originals if an error occurs.</p>

<p>The result is that <code>getUser()</code> returns a promise that should resolve to
data representing the user profile for a given id.  And <code>getPost()</code>
works the same way for posts and post ids.</p>

<p>Now, to fetch that author information:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">authorForPost</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">postPromise</span> <span class="o">=</span> <span class="nx">getPost</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
        <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

    <span class="nx">postPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">authorPromise</span> <span class="o">=</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">);</span>

        <span class="nx">authorPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">author</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">author</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>

<p>When <code>authorForPost()</code> is called it returns a new promise that resolves
with author information after both the post and author requests complete
successfully.  This is a straightforward way to get the job done.
Though it does not implement error handling; and it could be more
<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>.  More on that in a bit.</p>

<h2 id="parallel-operations">Parallel operations</h2>

<p>Let’s say that you want to fetch two user profiles to display
side-by-side.  Using the <code>getUser()</code> function from the previous section:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">getTwoUsers</span><span class="p">(</span><span class="nx">idA</span><span class="p">,</span> <span class="nx">idB</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">userPromiseA</span> <span class="o">=</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">idA</span><span class="p">),</span>
        <span class="nx">userPromiseB</span> <span class="o">=</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">idB</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">userPromiseA</span><span class="p">,</span> <span class="nx">userPromiseB</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>

<p>The requests for userA and userB’s profiles will be made in parallel so
that you can get the results back as quickly as possible.  This function
uses <code>$.when()</code> to synchronize the promises for each profile so that
<code>getTwoUsers()</code> returns one promise that resolves with the data for both
profiles when both responses come back.  If either request fails, the
promise that <code>getTwoUsers()</code> returns will fail with information about
the first failed request.</p>

<p>You might use <code>getTwoUsers()</code> like this:</p>

<div class="highlight"><pre><code class="js"><span class="nx">getTwoUsers</span><span class="p">(</span><span class="mi">1002</span><span class="p">,</span> <span class="mi">1008</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">userA</span><span class="p">,</span> <span class="nx">userB</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">render</span><span class="p">(</span><span class="nx">userA</span><span class="p">)).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;#users&#39;</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">render</span><span class="p">(</span><span class="nx">userB</span><span class="p">)).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;#users&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>

<p>The <code>getTwoUsers()</code> promise resolves with two values, one for each
profile.</p>

<p>We now have several well-defined functions that operate on asynchronous
actions.  Isn’t this nicer than the big mess of nested callbacks one
might otherwise see?</p>

<p>I mentioned above that using <code>$.when()</code> is simpler when each of its
input promises resolves to a single value.  That is because if an input
promise resolves to multiple values then the corresponding value in the
new promise that <code>$.when()</code> creates will be an array instead of a single
value.</p>

<p>Performing an arbitrary number of actions in parallel is similar:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">getPosts</span><span class="p">(</span><span class="nx">ids</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">postPromises</span> <span class="o">=</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">getPost</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">postPromises</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="cm">/* posts... */</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>This code fetches any number of posts in parallel.  I used <code>apply</code> to
pass the post promises to <code>$.when()</code> as though they are each a separate
argument.  The resulting promise resolves with a separate value for each
post.  It would be nicer if it resolved with an array of posts as one
value.  The use of <code>.then()</code> here takes those post values and transforms
them into an array.</p>

<h2 id="combining-sequential-and-parallel-operations">Combining sequential and parallel operations</h2>

<p>Let’s take the previous examples to their logical conclusion by creating
a function that, given two post ids, will download information about the
authors of each post to display them side-by-side.  No problem!</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">getAuthorsForTwoPosts</span><span class="p">(</span><span class="nx">idA</span><span class="p">,</span> <span class="nx">idB</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">authorForPost</span><span class="p">(</span><span class="nx">idA</span><span class="p">),</span> <span class="nx">authorForPost</span><span class="p">(</span><span class="nx">idB</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>

<p>From the perspective of a function that calls <code>authorForPost()</code>, it does
not matter that two sequential requests are made.  Because
<code>authorForPost()</code> returns a promise that represents the eventual result
of both requests, that detail is encapsulated.</p>

<h2 id="generalizing-sequential-operations">Generalizing sequential operations</h2>

<p>There are a couple of problems with the implementation of
<code>authorForPost()</code> as presented above.  We had to create a deferred by
hand, which should not be necessary.  And the promise that is returned
does not fail if any of the requests involved fail.</p>

<p>These issues are not present in the parallel examples because <code>$.when()</code>
does a nice job of generalizing synchronizing multiple promises.  What
we need is a function that does a similar job of generalizing flattening
nested promises.  Meet flatMap:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">.</span><span class="nx">flatMap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

    <span class="kd">function</span> <span class="nx">reject</span><span class="p">(</span><span class="cm">/* arguments */</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// The reject() method puts a deferred into its failure</span>
        <span class="c1">// state.</span>
        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">deferred</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="cm">/* values... */</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">newPromise</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>

        <span class="nx">newPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="cm">/* newValues... */</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">deferred</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">reject</span><span class="p">);</span>

    <span class="p">},</span> <span class="nx">reject</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>

<p>This function takes a promise and a callback that returns another
promise.  When the first promise resolves, <code>$.flatMap()</code> invokes the
callback with the resolved values as arguments, which produces a new
promise.  When that new promise resolves, the promise that <code>$.flatMap()</code>
returns also resolves with the same values.  On top of that,
<code>$.flatMap()</code> forwards errors to the promise that it returns.  If either
the input promise or the promise returned by the callback fails then the
promise that <code>$.flatMap()</code> returns will fail with the same values.</p>

<p>Using <code>$.flatMap()</code> it is possible to write a function like
<code>authorForPost()</code> a bit more succinctly:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">authorForPost</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">getPost</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>By using <code>$.flatMap()</code> you also get error handling for free.  If the
request to fetch a post fails or the request to fetch the post’s author
fails the promise that this version of <code>authorForPost()</code> returns will
also fail with the appropriate failure values.</p>

<p>Another potential problem is that <code>authorForPost()</code> does not give you
access to any of the information on the posts that it downloads.  You
can combine <code>$.flatMap()</code> and <code>.then()</code> to create a slightly different
function that exposes both the post and the author:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">postWithAuthor</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">getPost</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">author</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">post</span><span class="p">,</span> <span class="p">{</span> <span class="nx">author</span><span class="o">:</span> <span class="nx">author</span> <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>The promise that <code>postWithAuthor()</code> returns resolves to a post object
with an added author property containing author information.</p>

<p>It turns out that <code>.then()</code> leads a double life.  If the return value of
its callback is a promise, <code>.then()</code> behaves exactly like <code>$.flatMap()</code>!
This is the sort of thing that only a dynamic language like JavaScript
can do.  So if you want to skip the custom function, you could write
<code>postWithAuthor()</code> like this:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">postWithAuthor</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">getPost</span><span class="p">(</span><span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">author</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">post</span><span class="p">,</span> <span class="p">{</span> <span class="nx">author</span><span class="o">:</span> <span class="nx">author</span> <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<h2 id="other-uses-for-promises">Other uses for promises</h2>

<p>The examples above focus on HTTP requests.  But promises can be used in
any kind of asynchronous code.  They even come in handy in synchronous
code from time to time.</p>

<p>Here is an example of a promise used to represent the outcome of
a series of user interactions:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">getRegistrationDetails</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">detailsPromise</span> <span class="o">=</span> <span class="nx">openModal</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/registrations&#39;</span><span class="p">));</span>

    <span class="nx">detailsPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">details</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/registrations&#39;</span><span class="p">,</span> <span class="nx">details</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">openModal</span><span class="p">(</span><span class="nx">markupPromise</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">(),</span>
        <span class="nx">modal</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;modalWindow&#39;</span><span class="p">),</span>
        <span class="nx">loadingSpinner</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span&gt;&lt;/span&gt;&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">);</span>

    <span class="nx">modal</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">loadingSpinner</span><span class="p">);</span>

    <span class="c1">// Use .always() to add a callback to a promise that runs on success</span>
    <span class="c1">// or failure.</span>
    <span class="nx">markupPromise</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">loadingSpinner</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">markupPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">markup</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">modal</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">markup</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">modal</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">serialize</span><span class="p">();</span>
        <span class="nx">modal</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">modal</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#registerButton&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="nx">getRegistrationDetails</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>

<p>I suggest considering using promises anywhere you would otherwise pass
a callback as an argument.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The promise transformations <code>.then()</code>, <code>$.when()</code>, and <code>$.flatMap()</code>
work together to build promise pipelines.  Using these functions you can
define arbitrary parallel and sequential operations with nice
declarative code.  Furthermore, small promise pipelines can be
encapsulated in helper functions which can be composed to form longer
pipelines.  This promotes reusability and maintainability in your code.</p>

<p>Use <code>.then()</code> to transform  individual promises.</p>

<p>Use <code>$.when()</code> to synchronize parallel operations.</p>

<p>Use <code>$.flatMap()</code> or <code>.then()</code> to create chains of sequential
operations.</p>

<p>Mix and match as desired.</p>

<p>I would like to thank <a href="https://github.com/munro">Ryan Munro</a> for coming up with the “pipeline” analogy.</p>

<p><em>Update 2012-08-01:</em> <code>.pipe()</code> was added in jQuery 1.6.  And it turns
out that it behaves like <code>$.flatMap()</code> when its callback returns
a promise.  In jQuery 1.8 <code>.then()</code> will be updated to behave exactly
like <code>.pipe()</code>, and <code>.pipe()</code> will be deprecated.  So there is actually
no need to add a custom method - you can just use <code>.pipe()</code> or <code>.then()</code>
instead of <code>$.flatMap()</code>.</p>

<p><em>Update 2013-01-30:</em> jQuery 1.8 has been released, so I replaced
references to <code>.pipe()</code> with <code>.then()</code>.  I also included a more
prominent explanation that <code>.then()</code> can do the same thing that
<code>$.flatMap()</code> does.</p>

<h2 id="promises-and-category-theory">Promises and Category theory</h2>

<p>Good news!  If you are able to follow the examples in this post then you
have a working understanding of Monads.  Specifically, <code>$.flatMap()</code> is
a <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">monad</a> transformation, <code>.then()</code> with one argument is a <a href="http://en.wikipedia.org/wiki/Functor">functor</a>
transformation, and <code>$.when()</code> is almost a <a href="http://en.wikipedia.org/wiki/Monoid">monoid</a> transformation.</p>

<p>Monads, monoids, and functors are concepts from <a href="http://en.wikipedia.org/wiki/Category_theory">category theory</a> that
can be applied to functional programming.  Really they are just
generalizations of this idea of creating pipelines to transform values.</p>

<p>I bring this up because category theory can be useful, but is difficult
to explain.  My hope is that seeing examples of category theory in
action will help programmers to get a feel for the patterns involved.</p>

<p>For more information on category theory in programming I recommend
a series of blog posts titled <a href="http://james-iry.blogspot.com/2007/09/monads-are-elephants-part-1.html">Monads are Elephants</a>.  If you have
read that and want to go further, I found the the book <a href="http://learnyouahaskell.com/">Learn You
a Haskell for Great Good!</a> to be very informative.  And as a bonus
it teaches you Haskell.</p>

<p>Those who are already into category theory will note that <code>$.flatMap()</code>
could also be defined in terms of <code>.then()</code> and a <code>$.join()</code> function:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">.</span><span class="nx">flatMap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">f</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">join</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

    <span class="kd">function</span> <span class="nx">reject</span><span class="p">(</span><span class="cm">/* arguments */</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">deferred</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">nestedPromise</span><span class="p">)</span> <span class="p">{</span>

        <span class="nx">nestedPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="cm">/* values... */</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">deferred</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">reject</span><span class="p">);</span>

    <span class="p">},</span> <span class="nx">reject</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>

<p>Except that this won’t actually work because <code>.then()</code> will join the
inner and outer promises before the result is passed to <code>$.join()</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a custom ROM on the Transformer Prime: A start-to-finish guide]]></title>
    <link href="http://sitr.us/2012/05/12/installing-a-custom-rom-on-the-transformer-prime.html"/>
    <updated>2012-05-12T00:00:00-07:00</updated>
    <id>http://sitr.us/2012/05/12/installing-a-custom-rom-on-the-transformer-prime</id>
    <content type="html"><![CDATA[<p>This guide provides step-by-step instructions for installing the <a href="http://www.virtuousrom.com/p/prime.html">Virtuous Prime</a>
community ROM on your Asus Transformer Prime TF201 tablet.  This guide will
be useful to you if you do not have root access to your tablet.</p>

<p>Be aware that following the instructions here will void your warranty and
will wipe all of the data on your tablet.  There is also a danger that you
might brick your tablet.  Proceed at your own risk.</p>

<p>So, why would you want to install a custom ROM on your tablet?  In my case
I wanted to gain root access, which allows one to do all sorts of nifty
things.  Community-made ROMS are also often customized to make the Android
experience more pleasant for power users.  And choosing your own ROM means
that you are no longer dependent on the company that sold you your device
to distribute firmware updates in a timely fashion.  But if you are reading
this then you probably already know why you want to install a custom ROM
- so let’s get on to the next step.</p>

<!-- more -->

<p>This guide specifically covers installing <a href="http://www.virtuousrom.com/p/prime.html">Virtuous Prime</a>, which is
based on the official Asus firmware.  If you like the features that Asus
provides, like the ability to switch between performance profiles and to
toggle IPS+ mode then this is probably the ROM for you.  Virtuous also adds
some features like root access, the ability to overclock the processors to 1.6 GHz,
and so on.  Note to the Virtuous ROM devs: it is really awesome to have you
all putting in the effort to make the Android experience better for
everybody.  It is especially amazing that you give your ROM away for free.
You are virtuous people indeed!  That said, these folks do accept
<a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=DLXKH3V45FFYY">donations</a>.</p>

<p>If you would rather get a vanilla Ice Cream Sandwich experience then you
might check out <a href="http://transformerprimeroot.com/transformer-prime-roms/aokp-ics-rom-for-rooted-transformer-prime/">AOKP</a>.</p>

<p>If you just want root access and you do not want to install a custom ROM
then there is a simpler procedure that you can follow using <a href="http://forum.xda-developers.com/showthread.php?t=1526487">SparkyRoot</a>.
The catch is that SparkyRoot does not work in firmware versions v9.4.2.21
or later.  Part of the reason that I went for a custom ROM is that
I upgraded the firmware on my Prime as soon as I got it - so I missed my
shot at using SparkyRoot.  Don’t be like me: plan ahead!</p>

<p>If you have the newest firmware version <a href="http://forum.xda-developers.com/showthread.php?t=1622628">it is possible to downgrade</a>
in order to use SparkyRoot.  I chose to install a custom ROM instead
because it seemed to me to be a safer option.  Be aware that if you follow
the directions here to install a custom ROM you will not be able to use the
downgrade procedure in that link.</p>

<p>In brief, here are the steps that we are going to follow:</p>

<ol>
  <li>Unlock the bootloader using the official Asus tool.</li>
  <li>Install ClockworkMod Recovery.</li>
  <li>Install the Virtuous Prime ROM, using ClockworkMod.</li>
</ol>

<div style="margin-top:2em"></div>

<h2 id="step-1-unlock-the-bootloader">Step 1: Unlock the bootloader</h2>

<p>I am not completely sure that this step is necessary.  I did not try
installing ClockworkMod Recovery before unlocking.  But even if it is not
necessary, I imagine that there may come a time when I am glad to have an
unlocked bootloader.  You can try skipping this step; at worst nothing will
happen.</p>

<p>The unlocking tool is provided by Asus.  As you will see, Asus makes it
very clear that using the unlock tool will void your warranty.  But on
the upside it will not wipe your data or anything like that.  The only
noticeable change will be that every time you boot up the tablet there
will be a message in the upper-left corner of the screen that says, “The
device is UnLocked”.  I assume that is there so that customer service
representatives can see that they are not supposed to help you.</p>

<p>Download the unlock tool directly onto your tablet from <a href="http://support.asus.com/Download.aspx?SLanguage=en&amp;m=Eee+Pad+Transformer+Prime+TF201&amp;p=20&amp;s=16">the TF201 support
section</a> of the Asus website.  Select “Android” as the OS
and grab the “Unlock Device App” from the “Utilities” section.  The file
that you get is an apk that you will install as an app.</p>

<p>If you have not done so already, you will have to enable unknown software
sources in your tablet settings.  Go to Settings &gt; Security &gt; Device
Administration and check the box that says “Unknown Sources”.</p>

<p>Use your file manager to find the downloaded unlock tool.  It is probably in
<code>/sdcard/Download/UnLock_Device_App_V6.apk</code>.  Tap it to install the app.</p>

<p>You will be prompted to confirm your Google account by entering your Google
password.  If you are using two-factor authentication on your Google
account you will have to set up an application-specific password for this.
You can revoke that password after your tablet is unlocked.</p>

<p>Next you will have to agree to a license and acknowledge a warning.
Again, Asus wants to make it really clear that you are about to void
your warranty.</p>

<p>After you agree to everything your tablet will reboot and your bootloader
is now unlocked.</p>

<h2 id="step-2-install-clockworkmod-recovery">Step 2: Install ClockworkMod Recovery</h2>

<p>ClockworkMod Recovery is a custom recovery image.  The Transformer Prime
comes with a recovery image provided by Asus that lets you do stuff like
manually install OS updates.  But the Asus recovery image will only let you
install updates that are digitally signed by Asus.  To install
a community-made ROM you need a recovery mode that will let you install
unsigned ROMs.  That is what ClockworkMod does.  It also provides extra
features, like the ability to back up and restore your whole OS.</p>

<p>Installing ClockworkMod will probably void your warranty - in case you
somehow got to this point with an intact warranty.  There is also some
danger that you could brick your tablet.  Proceed at your own risk.</p>

<p>These instructions are adapted from
<a href="http://transformerprimeroot.com/transformer-prime-recovery/how-to-install-clockworkmod-recovery-5-8-2-0-on-transformer-prime/">a guide on TransformerPrimeRoot.com</a>.  I’m going to
give you the slightly more complicated version that involves downloading
files directly from ClockworkMod and from Google; and I will provide tips
on what to do if the fastboot tool is not able to find your tablet.
I personally appreciate it when I can get files from sources that I know
I can trust.  But if you are not convinced that is necessary then feel free
to check out the TransformerPrimeRoot.com guide.</p>

<p>For this step you will need a computer.</p>

<p>Download the latest ClockworkMod Recovery image from
<a href="http://www.clockworkmod.com/rommanager">ClockworkMod’s downloads page</a>.  As of this
writing the latest version for the Transformer Prime is 5.8.2.0.  According
to TransformerPrimeRoot.com earlier versions can put your device into
a reboot loop (which you can recover from but it is scary when it happens,
I imagine).</p>

<p>The Touch Recovery image should also work.  It comes with a nicer
touch-based UI.  But the guides that I have read call for the non-touch
version, so that is what I went with.</p>

<p>You will also need the fastboot tool from the Android SDK to install the
recovery image.  <a href="https://developer.android.com/sdk/index.html">Download the SDK</a> from Google and extract
it.  Run the <code>android</code> executable in the <code>tools/</code> directory to launch the
SDK package manager and use that tool to install the Android SDK
Platform-tools: check the box next to “Android SDK Platform-tools” and
click “Install packages…”.  After a few minutes that will add a new
executable, <code>fastboot</code>, in the <code>platform-tools</code> directory in the Android
SDK package.  You will use the fastboot program to send commands to your
tablet while the tablet is in fastboot mode.</p>

<p>Android devices have two boot modes apart from the normal boot-into-the-OS
option: <a href="http://www.androidcentral.com/what-recovery-android-z">recovery mode</a> and <a href="http://www.androidcentral.com/android-z-what-fastboot">fastboot</a>.  Fastboot is a low-level mode that
is used for flashing firmware.  You can use fastboot to replace the
recovery mode image - which is what we will be doing to install
ClockworkMod.  And you can use recovery mode to install a new OS.
Likewise, if your OS breaks you can fix it from recovery mode and if
recovery mode breaks you may be able to fix it from fastboot.  What happens
if fastboot breaks?  Try not to let that happen!  The Android devs have not
yet provided us with an extra-fast-boot.</p>

<p>If you are on Windows then you will have to <a href="http://transformerprimeroot.com/transformer-prime-root/how-to-install-transformer-prime-usb-drivers-on-windows/">install a USB driver</a> before
proceeding.  Linux and Mac users do not need any special drivers.</p>

<p>Make sure that your battery is charged to at least 50%.  Bad things will
happen if your battery dies while you are flashing a recovery image.</p>

<p>Boot your tablet into fastboot by holding down the power and volume-down
buttons.  The tablet will power off and reboot.  Wait until you see several
lines of white text in the upper-left corner of the screen, then let go of
the power and volume buttons.  Then wait for five seconds and you will see
the fastboot options.</p>

<p>Press volume-down to highlight the USB icon and then press volume-up to
select it.  You have ten seconds to do this - after that the tablet will
cold-boot Android instead.  If that happens, don’t worry.  Just start over
by holding down the power and volume-down buttons.</p>

<p>Plug the tablet into your computer using the USB cable that came with your
tablet.</p>

<p>On your computer open a terminal.  Assuming that you have the
ClockworkMod Recovery image and the extracted Android SDK in the same
downloads folder, cd to that folder.  Run this fastboot command to make
sure that your computer is talking to your tablet:</p>

<pre><code>android-sdk_r18/platform-tools/fastboot -i 0x0b05
</code></pre>

<p>The <code>-i 0x0b05</code> part tells fastboot which USB device to communicate with.
The number <code>0b05</code> is the Asus vendor id for USB interfaces.  If you want to
double-check that vendor id you can use the <code>lsusb</code> command on Linux.  On
my machine the output includes a line that looks like this:</p>

<pre><code>Bus 002 Device 018: ID 0b05:4d01 ASUSTek Computer, Inc.
</code></pre>

<p>The vendor id is the portion of the ID before the colon.</p>

<p>Anyway, if the fastboot command that you ran worked you should see output that
looks like this:</p>

<pre><code>finished. total time: 1336881627.143s
</code></pre>

<p>On the other hand, if you see a message that says <code>&lt; waiting for device &gt;</code>,
and you wait a minute or two and nothing happens, then hit Ctrl-c to
cancel.  If you are in Linux you can fix this problem by creating a udev
rule.  Create a new file, <code>/etc/udev/rules.d/99-android.rules</code> and add this
line to it:</p>

<pre><code>SUBSYSTEM=="usb", ATTRS{idVendor}=="0b05", MODE="0666", OWNER="yourusername"
</code></pre>

<p>But make sure to replace “yourusername” with your user name.  Then
restart udev with this command:</p>

<pre><code>sudo restart udev
</code></pre>

<p>Now try the fastboot command again.</p>

<p>Ok, is fastboot talking to your tablet?  Now for the next step: flashing
ClockworkMod.</p>

<p>I recommend checking the md5 checksum on the ClockworkMod Recovery image
to make sure that it has not been corrupted.  On Linux you can use this
command to do that:</p>

<pre><code>md5sum recovery-clockwork-5.8.2.0-tf201.img
</code></pre>

<p>It appears that ClockworkMod does not list md5 checksums on its
downloads page.  But here is the checksum that I got for version 5.8.2.0:</p>

<pre><code>08009bd8fa324116e71982945390cdde
</code></pre>

<p>You should proceed only if the checksums match.</p>

<p>Run this command - and again make sure that the paths match the
locations of the fastboot and ClockworkMod Recovery image files:</p>

<pre><code>android-sdk_r18/platform-tools/fastboot -i 0x0b05 flash recovery recovery-clockwork-5.8.2.0-tf201.img 
</code></pre>

<p>If all goes well you should see some output like this:</p>

<pre><code>sending 'recovery' (5378 KB)...
OKAY [  1.891s]
writing 'recovery'...
OKAY [  1.571s]
finished. total time: 3.462s
</code></pre>

<p>Now you have ClockworkMod Recovery installed.</p>

<h2 id="step-3-install-the-virtuous-prime-rom">Step 3: Install the Virtuous Prime ROM</h2>

<p>Following the instructions here will wipe everything on your tablet.  And
you will void your warranty - again.  Proceed at your own risk.</p>

<p>There are <a href="http://rootzwiki.com/topic/21125-roms-series300312-virtuous-prime-94221-v1/">instructions on RootzWiki</a> for installing Virtuous Prime.  I’m
going to give you the same instructions but with a bit more detail.  But
I recommend reading the information on RootzWiki too as there is a lot
of useful background there.</p>

<p>Download the latest version of <a href="http://www.virtuousrom.com/p/prime.html">Virtuous Prime</a> directly onto your
tablet.  As of this writing that is Virtuous Prime 9.4.2.21 v1, which is
based on the Transformer Prime v9.4.2.21 firmware from Asus.  You will get
a zip file - don’t unzip it!</p>

<p>Next to the download link there will be an MD5 checksum.  We will refer
back to that in a moment.</p>

<p>Use your file manager to move the zip file,
<code>virtuous_prime_s_9.4.2.21_v1.zip</code> from <code>/sdcard/Download/</code> to
<code>/sdcard/</code>.  I think that this step is superfluous; but it makes me feel
better.</p>

<p>This is optional, but highly recommended: install the free <a href="https://play.google.com/store/apps/details?id=com.fab.md5">MD5 Checker</a>
app.  You can use this app to check the MD5 checksum of the file that you
downloaded to make sure that it was not corrupted.  Open MD5 Checker, click
on the button labelled “Load File 1”, browse to the Virtuous Prime zip
file, and wait for MD5 Checker to compute the file’s checksum.  Make sure
that the checksum that you see in MD5 Checker is the same as the one from
the Virtuous Prime downloads page.  If the checksums do not match then do
not proceed!  Download the file again and check the checksum again.</p>

<p>Shut down your tablet.  But make sure that your battery is charged to at
least 50% first.  And make sure that the USB cable is unplugged.</p>

<p>Boot into recovery mode by holding both the power and volume-down buttons.
As with fastboot, when you see several lines of white text in the
upper-left corner of the screen let go of both buttons.  But this time
press volume-up right away.  If you do not press volume-up within five
seconds then the tablet will go into fastboot.  If that happens then just
start over by holding the power and volume-down buttons again.</p>

<p>After a moment you should see the ClockworkMod menu.  You can use the
volume-up and volume-down buttons to highlight the different menu options
and the power button to select the option that you want.</p>

<p>Make a backup of your current ROM.  Select “backup and restore”, then
“backup”.  This will create a timestamped backup directory on your tablet
under <code>/sdcard/clockwork/backup/</code>.</p>

<p>There is a lot of information on backing up and restoring your tablet
<a href="http://www.androidpolice.com/2010/04/16/complete-guide-how-to-fully-back-up-and-restore-your-android-phone-using-nandroid-backup-and-clockworkmod-rom-manager/">here</a>.</p>

<p>The backup process will take a few minutes.  When it is done you will see
the ClockworkMod menu again.</p>

<p>Select “wipe data/factory reset”.  According to RootzWiki this step is
optional, but is highly recommended.  You will have to complete an
elaborate confirmation step to start the wipe.</p>

<p>Once all of your data has been wiped, select “install zip from sdcard”,
then “choose zip from sdcard”.  Browse to the Virtuous Prime ROM and select
it.  And confirm that you are really sure about this.</p>

<p>You will be taken through a guided install process in which you will be
prompted to choose between Typical, Complete, or Minimal install modes.
There is a list of the differences between the three modes on
<a href="http://rootzwiki.com/topic/21125-roms-series300312-virtuous-prime-94221-v1/">RootzWiki</a>.</p>

<p>When the installer is finished your tablet will reboot and you are done!
Congratulations!  Enjoy your new ROM!</p>

<h2 id="more-resources">More Resources</h2>

<p>There is some useful information collected on <a href="http://transformerprimeroot.com/">TransformerPrimeRoot.com</a>.
Much of the information in my guide comes from that site.</p>

<p>If the worst should happen and your tablet becomes a brick, you may still
be able to recover.  Check out the <a href="http://forum.xda-developers.com/showthread.php?t=1514088">recovery guide</a> on
<a href="http://forum.xda-developers.com/">XDA-Developers</a>.</p>

<h2 id="update-2012-05-19">Update 2012-05-19</h2>

<p>After about a week of use, the Virtuous Prime ROM is working very well.
It does everything that the Asus firmware did and more.  But I did run
into some problems that I wanted to report along with some workarounds.</p>

<p>The Hulu Plus app does not work for me anymore.  When I try to play
a video I get this message:</p>

<blockquote>
  <p>Streaming Unavailable [91]</p>

  <p>Sorry, we are unable to stream this video. Please check your Internet
connection, ensure you have the latest official update for your
device, and try again.</p>
</blockquote>

<p>The Hulu app did work for me before I unlocked my tablet.  There are
<a href="http://forum.xda-developers.com/showthread.php?t=1571405">reports that unlocking the bootloader is what causes this problem</a>.
This may not have anything to do with Virtuous Prime directly.</p>

<p>A helpful community member created
<a href="http://forum.xda-developers.com/showthread.php?t=1449110">a modified version of the Hulu Plus app</a> that does work.
From the first post in that thread you can download and install the
Landscape Mod HuluPlus.apk package.  You will need to enable “Unknown
Sources” to install the package.  Before you install this version
I suggest wiping the data of the original Hulu app and uninstalling it.</p>

<p>The home view in the app is distorted; but the queue view works fine.
This mod is based on a phone version of the original Hulu app rather
than a tablet version.  Video quality seems a bit low - I don’t know
whether that is due to my connection or to the app.  With those caveats,
the modified app works great for me.</p>

<p>Netflix works perfectly.  Hooray for Netflix!</p>

<p>The Amazon Kindle app crashes when I try to open a book.  I have tried
wiping the app’s data and reinstalling multiple times.  I have also
tried different books.  And I have confirmed that I am running version 3.5.1.1,
which is the latest version available in the Play Store right now.</p>

<p>I managed to fix the Kindle app by following
<a href="http://forum.xda-developers.com/showthread.php?p=26109294#post26109294">instructions to fix Machinarium</a>, which simply
involves installing a missing font.</p>

<p>An alternative workaround is to use the <a href="https://read.amazon.com">Cloud Reader</a>.  Note that the
Cloud Reader will work in <a href="https://play.google.com/store/apps/details?id=com.android.chrome">Chrome for Android Beta</a>, but will refuse
to run in the default Android browser.  You will not be able to install
the extension that allows Cloud Reader to work offline since the mobile
version of Chrome does not support extensions yet.  So you will have to
be connected to the internet to use the Cloud Reader.</p>

<p>Someone on the XDA Developers forum asked whether the game Machinarium
would install under Virtuous Prime.  I tested this and found that the
game will install - but it crashes on startup.  I did not test this game
before installing Virtuous Prime.  All other games that I have tested
have worked fine.</p>

<p>It turns out that the problem with Machinarium is that there is
a missing font in Virtuous Prime.  Specifically the Droid Sans and Droid
Sans Bold fonts are missing.  There is <a href="http://forum.xda-developers.com/showthread.php?p=26109294#post26109294">a fix</a> reported
in the XDA Developers forum.</p>

<p>So with some digging it seems that I did not encounter any problems that
I could not fix.  Also, having root access to my tablet is excellent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookies are bad for you: Improving web application security]]></title>
    <link href="http://sitr.us/2011/08/26/cookies-are-bad-for-you.html"/>
    <updated>2011-08-26T00:00:00-07:00</updated>
    <id>http://sitr.us/2011/08/26/cookies-are-bad-for-you</id>
    <content type="html"><![CDATA[<p>Most web applications today use browser cookies to keep a user logged in
while she is using the application.  Cookies are a decades-old device
and they do not stand up well to security threats that have emerged on
the modern web.  In particular, cookies are vulnerable to <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">cross-site
request forgery</a>.  Web applications can by made more secure by
using <a href="http://oauth.net/">OAuth</a> for session authentication.</p>

<p>This post is based on <a href="http://opensourcebridge.org/sessions/663">a talk that I gave</a> at <a href="http://opensourcebridge.org/">Open Source
Bridge</a> this year.  The slides for that talk are available
<a href="http://sitr.us/talks/cookies/">here</a>.</p>

<p><img alt="cookie authentication" src="http://sitr.us/talks/cookies/svg/cookies.svg" style="width: 100%" /></p>

<p>When a user logs into a web application the application server sets
a cookie value that is picked up by the user’s browser.  The browser
includes the same cookie value in every request sent to the same host
until the cookie expires.  When the application server receives
a request it can check whether the cookies attached to it contain
a value that identifies a specific user.  If such a cookie value exists
then the server can consider the request to be authenticated.</p>

<p><img alt="attacks that target browser authentication" src="http://sitr.us/talks/cookies/svg/cookie-strengths.svg" style="width: 100%" /></p>

<p>There are many types of attacks that can be performed against a web
application.  Three that specifically target authentication between the
browser and the server are <a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle (<abbr title="man-in-the-middle">MITM</abbr>)</a>, <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">cross-site
request forgery (<abbr title="cross-site request forgery">CSRF</abbr>)</a>, and <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting (<abbr title="cross-site scripting">XSS</abbr>)</a>.
Plain cookie authentication is vulnerable to all three.</p>

<!-- more -->

<p><img alt="session hijacking" src="http://sitr.us/talks/cookies/svg/session_hijacking.svg" style="width: 100%" /></p>

<p>In a <abbr title="man-in-the-middle">MITM</abbr> attack the attacker is in a position to watch traffic that
passes between some user’s browser and an application server.  If that
traffic is not encrypted the attacker could steal private information.
One of the most dangerous things that an attacker can do in this
position is to hijack the user’s session by reading cookie data from an
HTTP request and including that cookie data in the attacker’s own
requests to the same server.  This is a form of privilege escalation
attack.  Using this technique an attacker can convince an application
server that the attacker is actually the user who originally submitted
a given cookie.  Thus the attacker gains access to all of the user’s
protected resources.</p>

<p>Last year a Firefox extension called <a href="http://codebutler.com/firesheep">Firesheep</a> made some waves when
it was released.  The purpose of Firesheep was to raise awareness of the
danger of <abbr title="man-in-the-middle">MITM</abbr> attacks.  Most web applications, at that time and today,
use cookie authentication without an encrypted connection between
browser and server.  Firesheep makes it easy to spy on anybody who is
using well known applications like Facebook and Twitter on a public
network.  With the click of a button you can perform a <abbr title="man-in-the-middle">MITM</abbr> attack
yourself, steal someone’s cookies, and gain access to that person’s
Facebook account.</p>

<p><a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack"><abbr title="man-in-the-middle">MITM</abbr></a> attacks can be effectively blocked by using HTTPS to encrypt
any traffic that contains sensitive information or authentication
credentials.  When using HTTPS you will almost certainly want to set the
“secure” flag on any cookies used for authentication.  That flag
prevents the browser from transmitting cookies over an unencrypted
connection.</p>

<p>More and more web applications are offering HTTPS - often as on opt-in
setting.  Any web site that requires a login should offer HTTPS - and
ideally it should be enabled by default.</p>

<p><img alt="cross-site scripting" src="http://sitr.us/talks/cookies/svg/xss.svg" style="width: 100%" /></p>

<p><a href="http://en.wikipedia.org/wiki/Cross-site_scripting"><abbr title="cross-site scripting">XSS</abbr></a> attacks involve an attacker pushing malicious JavaScript code
into a web application.  When another user visits a page with that
malicious code in it the user’s browser will execute the code.  The
browser has no way of telling the difference between legitimate and
malicious code.  Injected code is another mechanism that an attacker can
use for session hijacking: by default cookies stored by the browser can
be read by JavaScript code.  The injected code can read a user’s cookies
and transmit those cookies to the attacker.  Just like in the <abbr title="man-in-the-middle">MITM</abbr>
scenario, the attacker can use those cookies to disguise herself as the
hapless user.</p>

<p>There are other ways that <abbr title="cross-site scripting">XSS</abbr> be used can be used to mess with a user - but
session hijacking is probably the most dangerous.  Session hijacking via
<abbr title="cross-site scripting">XSS</abbr> can be prevented by setting an “httpOnly” flag on cookies that are
used for authentication.  The browser will not allow JavaScript code to
read or write any cookie that is flagged with “httpOnly”; but those
cookies will still be transmitted in request headers.</p>

<p><img alt="cross-site request forgery" src="http://sitr.us/talks/cookies/svg/csrf.svg" style="width: 100%" /></p>

<p><a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery"><abbr title="cross-site request forgery">CSRF</abbr></a> attacks authentication indirectly.  A malicious web page can
trick a browser into making cross-domain requests to another web site.
If a user visiting the malicious page is already logged in to that web
site then the malicious page can access the site resources as though it
were logged in as the unsuspecting user.  For example, if a malicious
page can trick the browser into making POST requests to a microblogging
site it can post updates with spam links that appear to have been
written by the victim.</p>

<p>If you use Facebook you might have encountered attacks like this
yourself.  You see a post on a friend’s wall with a button that says
<a href="http://www.pcworld.com/businesscenter/article/182940/facebook_worm_spreads_with_a_lurid_lure.html">“Don’t click the button!”</a>  When you click on it you are
taken to another site and the same message ends up posted on your wall.</p>

<p>This works because the browser automatically sends cookies set on
a given domain with every request made to that domain, regardless of
where those requests originated.  The browser has no way of knowing that
the requests initiated by the malicious page are made without the user’s
knowledge.</p>

<p>The malicious page could create a cross-domain request by including an
image with a <code>src</code> attribute pointing to a <abbr title="Uniform Resource Locator">URL</abbr> on the site that it is
trying to hack into.  The <abbr title="Uniform Resource Locator">URL</abbr> does not have to be an image - the browser
will make a GET request to that <abbr title="Uniform Resource Locator">URL</abbr> and will discard the response when
it determines that the response is not image data.  If that GET request
produced any side-effects, like posting a microblogging update, then the
malicious page has successfully performed an attack.</p>

<p>To make a cross-domain POST request the malicious site might include
a hidden HTML form with an <code>action</code> attribute pointing at the site to be
hacked.  The malicious page can use JavaScript to submit the form
without any interaction from the user.  This is another case where the
attacker cannot read the response that comes back but can trigger some
action in the user’s account.</p>

<p>In some cases <abbr title="cross-site request forgery">CSRF</abbr> attacks can also be used to read data.  Because <abbr title="JavaScript Object Notation">JSON</abbr>
is a strict subset of JavaScript, <a href="http://blog.archive.jpsykes.com/47/practical-csrf-and-json-security/">HTTP responses that contain <abbr title="JavaScript Object Notation">JSON</abbr> data
can be loaded into script tags and executed.</a>  In some
browsers a malicious page can override the Object and Array constructors
to capture data from the <abbr title="JavaScript Object Notation">JSON</abbr> response as it is executed so that it can
be sent to an attacker.</p>

<p>The biggest problem with <abbr title="cross-site request forgery">CSRF</abbr> is that cookies provide absolutely no
defense against this type of attack.  If you are using cookie
authentication you must also employ additional measures to protect
against <abbr title="cross-site request forgery">CSRF</abbr>.  The most basic precaution that you can take is to make
sure that your application never performs any side-effects in response
to GET requests.</p>

<p>To protect against cross-domain POST requests a commonly used option is
to use an <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern">anti-forgery token</a> that must be submitted with every POST,
PUT, or DELETE request.  The token is generally injected into the HTML
code for forms in such a way that malicious code on another site does
not have any way to access it.</p>

<p><abbr title="JavaScript Object Notation">JSON</abbr> responses can be protected by pre-pending the <abbr title="JavaScript Object Notation">JSON</abbr> response with
some code that makes the response non-executable.  For example, you
could place a JavaScript loop at the beginning of the response that
never terminates.  Or you could put in a statement that throws an
exception.  Putting the whole <abbr title="JavaScript Object Notation">JSON</abbr> response inside of a comment block
also works.  The only way for a browser to read <abbr title="JavaScript Object Notation">JSON</abbr> data that has been
obfuscated like this is to fetch the resource using <abbr title="XMLHttpRequest">XHR</abbr> and to remove
the extra code before parsing the actual <abbr title="JavaScript Object Notation">JSON</abbr> data.  <abbr title="XMLHttpRequest">XHR</abbr> is limited by
the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same-origin policy</a>; so a malicious page cannot make a cross-site
<abbr title="XMLHttpRequest">XHR</abbr> request.</p>

<p>Such multi-layered approaches to <abbr title="cross-site request forgery">CSRF</abbr> defense work but are a pain to
implement.  I know from experience that the stateful nature of
anti-forgery tokens make them a constant source of bugs in Ajax-driven
applications where users might submit several requests to the server
without ever loading a new page.  It is too easy for the client and
server to get out of sync and to disagree about which anti-forgery
tokens are fresh.  And great care must be taken to include the
anti-forgery feature in every form and Ajax call in an application or
a security hole appears.</p>

<p><abbr title="JavaScript Object Notation">JSON</abbr> obfuscation is easier to apply to every <abbr title="JavaScript Object Notation">JSON</abbr> response as a blanket
policy thanks to server-side filters and client-side hooks, such as
those in jQuery’s Ajax stack.  But then you are not really serving <abbr title="JavaScript Object Notation">JSON</abbr> - you
are serving a <abbr title="JavaScript Object Notation">JSON</abbr>-like type with a proprietary wrapper.  I find that
I spend a lot of time instructing people on the existence of
obfuscation, explaining why it is there, and explaining how to set up
hooks to remove it on the client side.</p>

<p><img alt="protections provided by the &quot;httpOnly&quot; and &quot;secure&quot; flags" src="http://sitr.us/talks/cookies/svg/secure-cookie-plus-https-strengths.svg" style="width: 100%" /></p>

<p>By combining the “secure” and “httpOnly” flags and using HTTPS you can
make your application authentication proof against <abbr title="man-in-the-middle">MITM</abbr> attacks and
against some <abbr title="cross-site scripting">XSS</abbr> attacks.  But there is nothing that will make cookie
authentication resistant to <abbr title="cross-site request forgery">CSRF</abbr> attacks.  The only way to protect
against <abbr title="cross-site request forgery">CSRF</abbr> is to apply additional security measures.  Often multiple
measures are required to combat different possible <abbr title="cross-site request forgery">CSRF</abbr> vectors.  And
those measures are not always simple or transparent.</p>

<p>In my opinion <abbr title="cross-site request forgery">CSRF</abbr> stifles innovation on the web.  Because cross-domain
requests cannot be trusted, even if they appear to be authenticated, web
applications have to be thoroughly locked down to reject any
cross-origin traffic.  There is a relatively new specification for
making cross-origin <abbr title="XMLHttpRequest">XHR</abbr> requests called <a href="http://www.w3.org/TR/cors/">Cross-Origin Resource Sharing
(<abbr title="Cross-Origin Resource Sharing">CORS</abbr>)</a>.  This specification could allow for exciting new mashups
involving rich JavaScript applications and public APIs.  Most modern
browsers support <abbr title="Cross-Origin Resource Sharing">CORS</abbr> too - including Internet Explorer 8.  But <abbr title="Cross-Origin Resource Sharing">CORS</abbr> is
rarely used because it opens up a big hole that could be exploited by
<abbr title="cross-site request forgery">CSRF</abbr>.  Existing <abbr title="cross-site request forgery">CSRF</abbr> countermeasures rely on limiting <abbr title="XMLHttpRequest">XHR</abbr> requests to
the same-origin policy.  For most web developers the risk is too great
to justify experimenting with new technology.</p>

<p>The way to make the web a safer place is to switch to authentication
mechanisms that provide strong protection against <abbr title="cross-site request forgery">CSRF</abbr> at the most basic
level.  The key is to choose a mechanism that is controlled by the web
application, not the browser.  The web browser has no way of
distinguishing legitimate requests from forged ones - it will attach
cookies to both.  On the other hand, application code can be written to
be smarter.</p>

<p><img alt="OAuth" src="http://sitr.us/talks/cookies/svg/Oauth_logo.svg" style="width: 50%; display: block; margin-left: auto; margin-right: auto;" /></p>

<p>There are many authentication schemes that would work well.  I lean
toward OAuth 2.0.  OAuth has some nice advantages: it is standardized;
there are numerous server implementations; and the simplest form of the
<a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-20">OAuth 2.0 draft specification</a> is pretty easy to implement.</p>

<p><img alt="three-legged OAuth" src="http://sitr.us/talks/cookies/svg/oauth_auth_code_step_1.svg" style="width: 100%" /></p>

<p>In a traditional OAuth setup there are three parties: the authorization
server / resource server, the client and the resource owner.  Through
a series of steps the resource owner, typically a user working through
a web browser, submits a password to the authorization server and the
authorization server issues an access token to the client.  You can read
more about the OAuth protocol flow on the <a href="http://oauth.net/2/">OAuth 2.0 web site</a>.</p>

<p><img alt="two-legged OAuth" src="http://sitr.us/talks/cookies/svg/oauth_auth_pass_step_1.svg" style="width: 100%" /></p>

<p>When applying OAuth to session authentication the picture becomes
simpler: the browser acts as both the resource owner and the client; so
some of the indirection of three-legged OAuth can be skipped.  Instead,
a web application can use a protocol flow that the OAuth 2.0
specification calls <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-20#section-4.3">Resource Owner Password Credentials</a> in which the
user enters her password into a login form, the password is submitted to
the application server directly, and the server responds to that request
with an access token.  You can think of this as “two-legged” OAuth.</p>

<p><img alt="a request signed with OAuth" src="http://sitr.us/talks/cookies/svg/oauth_auth_pass_step_3.svg" style="width: 100%" /></p>

<p>In both the two- and three-legged flows requests are signed by adding an
“Authorization” header with one of two possible formats.  In the <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-06">bearer
scheme</a> the authorization header value is just the access
token that was given to the client.  For example:</p>

<pre><code>GET /resource HTTP/1.1
Host: server.example.com
Authorization: Bearer vF9dft4qmT
</code></pre>

<p>The <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-00">HMAC scheme</a> is a bit
more complicated: in that case the client is given an access token id in
addition to the token itself and the authorization header includes the
token id and an HMAC-signed hash of the request <abbr title="Uniform Resource Locator">URL</abbr>, the request method,
a nonce, and possibly a nested hash of the request body.  The OAuth
access token is used as the key in the <a href="http://en.wikipedia.org/wiki/HMAC">HMAC algorithm</a>.</p>

<pre><code>POST /request HTTP/1.1
Host: example.com
Content-Type: application/x-www-form-urlencoded
Authorization: MAC id="jd93dh9dh39D",
             nonce="273156:di3hvdf8",
             bodyhash="k9kbtCly0Cly0Ckl3/FEfpS/olDjk6k=",
             mac="W7bdMZbv9UWOTadASIQHagZyirA="

hello=world%21
</code></pre>

<p>The advantage of the HMAC scheme is that it can provide some protection
against <abbr title="man-in-the-middle">MITM</abbr> attacks even if signed requests are not encrypted with
HTTPS.</p>

<p>I propose a design in which the browser submits credentials from a login
form to the server via <abbr title="XMLHttpRequest">XHR</abbr>, gets an access token back, and uses that
access token to sign subsequent requests.  Full page requests and form
posts are difficult to sign with OAuth - hyperlinks and form tags do not
provide a way to specify an “Authorization” header.  So OAuth-signed
requests would probably be limited to <abbr title="XMLHttpRequest">XHR</abbr>.  The browser could store the
OAuth access token in a persistent client-side store to give the user an
experience that is indistinguishable from a cookie-based application - but
that is more secure.</p>

<p>It is entirely possible for JavaScript code running in a web browser to
sign requests with HMAC.  There are pure JavaScript implementations
available of many cryptographic functions, including <a href="http://jssha.sourceforge.net/">SHA-1 and
SHA-256</a>, which are the hash functions that are used for OAuth HMAC
signing.  However, if your application uses HTTPS to protect every
request then the simpler bearer scheme is entirely sufficient.</p>

<p>In this design form posts would be eliminated.  Instead form data would
be serialized in JavaScript and submitted using Ajax.  That way all
requests that produce side-effects would be channeled through
OAuth-signed <abbr title="XMLHttpRequest">XHR</abbr>.  I am not suggesting eliminating form tags though - form
tags are an essential tool for semantic markup and for accessibility.
I recommend that JavaScript be used to intercept form “submit” events.</p>

<p><img alt="the BigPipe design" src="http://sitr.us/talks/cookies/svg/bigpipe_step_1.svg" style="width: 100%" /></p>

<p>There are a couple of options for dealing with full page loads.  One
possibility is to not require any authentication for requests for HTML
pages and to design your application so that HTML responses do not
include any protected information.  Such an application would serve
pages as skeletons, with empty areas that to be filled in with dynamic
and protected content after page load using Ajax.  The dynamic responses
could be HTML fragments that are protected by OAuth, or they could be
<abbr title="JavaScript Object Notation">JSON</abbr> responses that are rendered as HTML using client-side templates.</p>

<p>Facebook uses a process like this which they call <a href="https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919">BigPipe</a>.
Facebook’s rationale for BigPipe is actually performance, not security.
In my opinion the BigPipe approach gives a best-of-both-worlds blend of
performance and security.  Plus, it lets you put caching headers on full
page responses, even in apps with lots of dynamic content.</p>

<p>A downside of BigPipe is that content that is loaded via Ajax generally
cannot be indexed by search engines.  Google’s recently published
specification for <a href="http://code.google.com/web/ajaxcrawling/">making Ajax applications crawlable</a> may provide
a solution to that problem.  Or you might choose to use the BigPipe
approach everywhere in your application except for publicly accessible
pieces of content.</p>

<p>Another way to handle full page loads would be to continue using cookie
authentication for HTML resources.  HTML responses are less vulnerable
to <abbr title="cross-site request forgery">CSRF</abbr> snooping than <abbr title="JavaScript Object Notation">JSON</abbr> because HTML is not executable in script
tags.  In this case you should still require OAuth signing on requests
for <abbr title="JavaScript Object Notation">JSON</abbr> resources and on any requests that could produce side-effects.
But allowing cookie authentication on non-side-effect-producing GET
requests for HTML resources should be safe.</p>

<p><img alt="strengths of OAuth" src="http://sitr.us/talks/cookies/svg/oauth-plus-https-strengths.svg" style="width: 100%" /></p>

<p>Using JavaScript to manage access tokens rather than relying on
a built-in browser function makes <abbr title="cross-site request forgery">CSRF</abbr> attacks impractical.  A malicious
third-party site can no longer rely on browsers to automatically attach
authentication credentials to requests that it triggers.  Client-side
storage implementations are generally protected by the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin
policy</a> - so only code running in your application can retrieve an
access token and produce an authenticated request.  And if you combine
OAuth with HTTPS then you are also protected against <abbr title="man-in-the-middle">MITM</abbr> attacks.</p>

<p>A drawback is that you lose the <abbr title="cross-site scripting">XSS</abbr> protection that the “httpOnly”
cookie flag provides with cookie authentication.  An application that
uses OAuth will have to use other methods to block <abbr title="cross-site scripting">XSS</abbr>.  But in my
opinion there are better options for dealing with <abbr title="cross-site scripting">XSS</abbr> than there are for
dealing with <abbr title="cross-site request forgery">CSRF</abbr>.  By consistently sanitizing user-generated content
you can effectively block <abbr title="cross-site scripting">XSS</abbr> at the presentation layer of your
application.  That would be necessary anyway, since “httpOnly” only
prevents <abbr title="cross-site scripting">XSS</abbr>-based privilege escalation attacks and by itself does not
prevent other <abbr title="cross-site scripting">XSS</abbr> shenanigans.</p>

<p>To track a session using OAuth applications will need some way to store
access tokens for the duration of a user’s session.  There are various
ways to do that:</p>

<ul>
  <li>
    <p>In the simplest case you can store the token in memory by assigning it
to a JavaScript variable.  This might be useful in a single page
application.  The user will have to log in again if she goes to
another page or opens your app in a new window.</p>
  </li>
  <li>
    <p><a href="https://developer.mozilla.org/en/dom/storage#localStorage">localStorage</a> can be used to store a token so that is persistent
even if the user closes and re-opens the browser.  Data stored in
localStorage is available to all windows on the same domain.  You will
probably want to include a hook to clear local storage when the user
logs out of your application.</p>
  </li>
  <li>
    <p><a href="https://developer.mozilla.org/en/dom/storage#sessionStorage">sessionStorage</a> works like localStorage, except that data is only
accessible from the same window that stored it and the whole store for
a given window is wiped when the user closes that window.  So the user
does not have to log in again if she goes to another page; but she
does have to log in again if she opens your app in a new window.</p>

    <p>sessionStorage can be a more secure option than localStorage - especially
on a shared or a public computer.  If you decide to use a storage
option that does not expire automatically when the browser is closed
I suggest including a “remember me” checkbox in your login form and
using sessionStorage instead when the user does not check that box.</p>
  </li>
  <li>
    <p>Although I have been arguing that cookies are not the best option for
authentication, storing an access token in a cookie works just fine.
The key is that the server should not consider the cookie to be
sufficient for authentication.  Instead it should require that the
access token be copied from the cookie value into an OAuth header.</p>

    <p>For the cookie option to be secure you should set the “secure” flag so
that it is not transmitted over a connection that could be read via
a <abbr title="man-in-the-middle">MITM</abbr> attack.  You should not set the “httpOnly” flag because the
cookie needs to be accessible from JavaScript.</p>

    <p>A nice advantage of the cookie option is that users have been trained
that they can delete cookies to reset a session.  On the other hand,
most users do not know about localStorage and most browsers do not
provide an obvious way to clear localStorage.  So the cookie option is
likely to conform best to user expectations.  Cookies can also be
configured to expire when the browser is closed or to persist for
a long period of time.</p>
  </li>
  <li>
    <p>Other options include <a href="https://developer.mozilla.org/en/IndexedDB">IndexedDB</a>, which is a more sophisticated
store that is similar to localStorage, <a href="http://en.wikipedia.org/wiki/Flash_cookies">Flash cookies</a>, and
<a href="http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx">userData</a> in IE.</p>
  </li>
</ul>

<p>There is a good summary of client-side storage implementations and how
to use them on <a href="http://diveintohtml5.info/storage.html">Dive Into HTML5</a>.  Or if you want
a pre-built solution that avoids most cross-browser headaches you can
use <a href="http://pablotron.org/software/persist-js/">PersistJS</a> or a similar tool.</p>

<p>Web applications that rely on cookie authentication can often be
designed to degrade gracefully, so that if JavaScript is disabled or is
not available the application will still work.  With OAuth that is not
possible.  I can imagine this being a major objection to ditching cookie
authentication.  Some people prefer to disable JavaScript for security
or for privacy reasons.  Many of the more basic mobile and text-only web
browsers do not support JavaScript.  And in the past screen readers have
not handled JavaScript-driven web apps well.</p>

<p>In my opinion the requirement that JavaScript be enabled to use an
application is generally worthwhile.  Mobile browsers that do support
JavaScript are rapidly pushing out those that do not.  Text-only
browsers will have to start supporting JavaScript sooner or later to
keep up.  The people who designed your web browser took great care to
ensure that your security and privacy are protected even when JavaScript
is enabled.  Screen readers are much better than they used to be at
making JavaScript-driven web sites accessible.</p>

<p>You should consider your target audience, your application requirements,
and your security needs and decide for yourself whether dropping the
noscript option is the right choice for your application.</p>

<p>No security protocol is bulletproof.  Do lots of research and use common
sense whenever you are working on an application that needs to be
secure.</p>

<p>Image credits:</p>

<p>The <a href="http://en.wikipedia.org/wiki/File:Oauth_logo.svg">OAuth logo</a> by Chris Messina is licensed under the
<a href="http://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.</p>

<p>Other images used in diagrams are from the <a href="http://en.wikipedia.org/wiki/Open_Clip_Art_Library">Open Clip Art Library</a> and
are in the public domain.</p>

<p>tags: osb11</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Mobile Safari emulates mouse events]]></title>
    <link href="http://sitr.us/2011/07/28/how-mobile-safari-emulates-mouse-events.html"/>
    <updated>2011-07-28T00:00:00-07:00</updated>
    <id>http://sitr.us/2011/07/28/how-mobile-safari-emulates-mouse-events</id>
    <content type="html"><![CDATA[<p>When you are adapting web apps to touchscreen devices particular
challenges come up around events like <code>mouseover</code> and <code>mouseout</code>.
Touchscreen devices like the iPad do not have a cursor, so the user
cannot exactly move the mouse over an HTML element.  However, Mobile
Safari, the web browser that comes with the iPhone and iPad, has
a fallback for websites that require hovering or cursor movement.</p>

<p>Usually when you tap on an element on a link or other clickable element
Mobile Safari translates that into a regular <code>click</code> event.  The browser
also produces some touch events that do not exist in a lot of browsers.
But from the perspective of a web page that was not designed with
a touchscreen in mind, what you get is a plain <code>click</code>.  More
specifically, the browser fires <code>mousedown</code>, <code>mouseup</code>, and <code>click</code> in
that order.  But if a clickable element also does something on
<code>mouseover</code> then tapping on that element will trigger a <code>mouseover</code> event
instead of a <code>click</code>.  Tapping on the same element again will produce
a <code>click</code> event.  A random example of a page that exhibits this behavior
is <a href="http://opensourcebridge.org/events/2011/schedule">the schedule page</a> from the <a href="http://opensourcebridge.org/">Open Source Bridge</a>
website.  Try tapping on session titles and see what happens.</p>

<p>Mobile Safari will only produce mouse events when the user taps on
a clickable element, like a link.  You can make an element clickable by
adding an onClick event handler to it, even if that handler does
nothing.  On tap Mobile Safari fires the events <code>mouseover</code>,
<code>mousemove</code>, <code>mousedown</code>, <code>mouseup</code>, and <code>click</code> in that order - with
some caveats which are explained below.  Those events all fire together
after the user lifts her finger.  You might expect the <code>mousedown</code> event
to fire as soon as the user presses her finger to the screen - but it
does not.  When the user taps on another clickable element the browser
fires a <code>mouseout</code> event on the first element in addition to firing the
aforementioned events on the new element.</p>

<!-- more -->

<p>So how do we get to the behavior where one tap emulates <code>mouseover</code> and
a second tap emulates <code>click</code>?  It turns out that after any <code>mouseover</code>
event handlers run Safari checks the DOM for changes and if the content
has changed it skips the <code>mousedown</code>, <code>mouseup</code>, and <code>click</code> events.  So
these events do not fire.  When the user taps on the same element again
the <code>mouseover</code> event does not fire again, so the browser goes ahead
with the other events.</p>

<p>The <code>mousemove</code> event behaves in a similar way: if the DOM has changed
after any <code>mousemove</code> handlers are finished running then Mobile Safari
skips the remaining events.</p>

<div class="bogus-wrapper"><notextile><figure>
  <figcaption>
    Diagram from <a href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html">Apple&#8217;s
    documentation</a> demonstrating how the browser determines which
    mouse events to fire.
  </figcaption>
  <img src="http://sitr.us/images/events_1_finger.jpg" alt="mouse event firing diagram" />
</figure></notextile></div>

<p>Safari does not accept just any change to a DOM element as a “content
change” though.  Through testing I discovered that adding a regular
element to the DOM or showing a previously hidden element in
a <code>mouseover</code> handler would prevent the <code>click</code> event from firing.  But
removing an element, hiding an element, or changing the content of
a text node do not prevent the <code>click</code> event.  I also tried adding class
names to elements - which Safari also did not treat as a “content
change”.  As far as I can tell only adding or showing an element will
cause the <code>mousedown</code>, <code>mouseup</code>, and <code>click</code> events to be skipped.</p>

<p>I created some fiddles on <a href="http://jsfiddle.net/">jsfiddle.net</a> to test Mobile Safari
behavior.  For your investigative pleasure I have
<a href="http://jsfiddle.net/hallettj/pgpLA/">an example of a <code>mouseover</code> handler that adds elements to the DOM</a>,
<a href="http://jsfiddle.net/hallettj/4wjgk/">another that shows a hidden element</a>,
and <a href="http://jsfiddle.net/hallettj/m5EXk/">a third that makes no changes to the DOM at all</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CouchDB Notes]]></title>
    <link href="http://sitr.us/2009/09/13/couchdb-notes.html"/>
    <updated>2009-09-13T00:00:00-07:00</updated>
    <id>http://sitr.us/2009/09/13/couchdb-notes</id>
    <content type="html"><![CDATA[<p>Recently I gave a talk at <a href="http://pdxruby.org/" title="Portland Ruby Brigade">Portland Ruby Brigade</a> meeting on
<a href="http://couchdb.apache.org/" title="CouchDB">CouchDB</a>, a document-oriented database.  I thought I would share my notes
from that talk.  In some respects this was a followup to <a href="http://groups.google.com/group/pdxruby/browse_thread/thread/6f8734846d3e16d3" title="Comparing MongoDB, Tokyo Tyrant, and CouchDB">an earlier talk that
Igal Koshevoy gave comparing various post-relational databases</a>.
Igal also wrote <a href="http://groups.google.com/group/pdxruby/browse_thread/thread/7865318fbc65d0d1" title="Ruby Persistence with CouchDB">some additional notes on my talk</a>.</p>

<p>In summary, some of the distinguishing features of CouchDB are:</p>

<ul>
  <li>Schema-less data store stores documents containing arbitrary JSON data.</li>
  <li>Incrementally updated map-reduce views provide fast access to data, support powerful data processing, and eliminate lookup penalties for data in large or deeply nested documents.</li>
  <li>Map-reduce views - which are again, incrementally updated - provide fast access to aggregate data, such as sums or averages of document attributes.</li>
  <li>Schema-less design means no schema migrations are ever required.  And new map-reduce views can be installed with no downtime.</li>
  <li>“Crash-only” design protects data integrity in almost every crash scenario.  No recovery process is required when rebooting a crashed database server.</li>
  <li>Lock-free design means that read requests never have to wait for other read or write requests to finish.  Writes are only serialized at the point where data is actually written to the disk.</li>
  <li>Integrated, robust master-master replication with automatic conflict handling</li>
  <li>MVCC, or “optimistic locking”, prevents data loss from multiple writes to the same document from different sources.</li>
  <li>RESTful interface makes it easy to integrate CouchDB with any environment that speaks HTTP.</li>
  <li>Documents can contain binary attachments.  Attachment support combined with the HTTP interface means that CouchDB can serve HTML, JavaScript, images, and anything else required to host a web application directly from the database.</li>
</ul>

<p>More detailed information on all of the above points can be found in <a href="http://couchdb.apache.org/docs/overview.html" title="CouchDB Technical Overview">CouchDB’s
technical overview</a>.</p>

<p>Some of the downsides:</p>

<ul>
  <li>Writes and single-document lookups are slower than other databases due to HTTP overhead and frequent disk access.</li>
  <li>CouchDB optimizes CPU and RAM use by using lots of disk space.  The same data set will take up a lot more space in CouchDB than in other database systems.</li>
  <li>You must create map-reduce views in advance for any queries you want to run.  SQL users are used to processing data at query time; but this is not allowed by the CouchDB design (assuming you are not using temporary views in production, which you should not do.)</li>
  <li>There is a serious learning curve when learning to think in terms of map-reduce views.</li>
  <li>Map-reduce views, though very powerful, are not as flexible as SQL queries.  There may be cases where it is necessary to push data processing to an asynchronous job or to the client.</li>
  <li>CouchDB is a young project and its API is undergoing rapid changes.</li>
  <li>Documentation can be sparse - especially when very new features are involved.  </li>
</ul>

<!-- more -->

<h2 id="ruby-interfaces-to-couchdb">Ruby Interfaces to CouchDB</h2>

<p>I also talked about some of the high-level interfaces to CouchDB that are
available for Ruby.  As ActiveRecord did for SQL, the idea behind these
libraries is to abstract away as much of the database behavior as possible
without sacrificing the powerful features that CouchDB provides.  The term
“ORM” does not quite apply to CouchDB because it is not relational.  The term I
am using for the time being is “object-document mapping”.  The code examples I
showed are all available in <a href="http://gist.github.com/161472" title="ODM Code Examples">a gist</a>.</p>

<p>Sadly I don’t think I can say that any of these libraries are production ready
as is.  If you use one expect to write some patches as you go.  That said I
think that all three show some exciting potential.  And they all provide a
better starting point for your CouchDB project than writing your own ODM or
using a low-level interface.  I plan to submit a few patches to CouchPotato as
I get to know it better.  With some more help I imagine we can turn one or more
of these interfaces into a nicely polished library.</p>

<p>The winner in my mind is <a href="http://upstream-berlin.com/2008/10/27/couch-potato-unleashed-a-couchdb-persistence-layer-in-ruby/" title="CouchPotato">CouchPotato</a>.  The philosophy behind CouchPotato is
to do things differently than ActiveRecord does.  Though it does borrow
features from ActiveRecord, for example dirty attribute tracking, life cycle
callbacks, and validations.  The biggest innovation in CouchPotato in my
opinion is the extensible system for defining views.  As with the other
libraries, support for declaring simple views is built in:</p>

<pre><code>class User
    include CouchPotato::Persistence
    property :name
    view :by_name, :key =&gt; :name
end
</code></pre>

<p>But similar shortcuts for more sophisticated types of views can be added by
creating new view classes and passing a <code>:type</code> option to the <code>view</code>
declaration method.  For example, it might be possible to declare views like
this:</p>

<pre><code>class Invoice
    ...
    property :ordered_at, :type =&gt; Time
    property :items
    view(:total_sales, :type =&gt; :aggregate, :key =&gt; :ordered_at,
         :sum =&gt; 'items[].qty * items[].price_per_unit')
    view(:average_sale, :type =&gt; :aggregate, :key =&gt; :ordered_at,
         :average =&gt; 'items[].qty * items[].price_per_unit')
end
</code></pre>

<p>My runner-up is <a href="http://github.com/jchris/couchrest" title="CouchRest">CouchRest</a>.  CouchRest is a widely used low-level interface
to CouchDB.  But it also includes a high-level interface called
CouchRest::ExtendedDocument.  A neat feature of this library is that you can
declare a different database to use for each model.  It also supports declaring
simple views with dynamic methods for querying those views:</p>

<pre><code>class Comment &lt; CouchRest::ExtendedDocument
    property :post_id
    view_by :post_id
end

Comment.by_post_id :key =&gt; 'foo'
</code></pre>

<p><a href="http://github.com/georgepalmer/couch_foo" title="CouchFoo">CouchFoo</a> is another strong contender.  The goal of CouchFoo is to provide
an API that is as close to ActiveRecord’s as possible.  The project may even be
porting a large amount of ActiveRecord code for this purpose.  The intention is
to make migrating to CouchDB as painless as possible.</p>

<p>An interesting feature is that CouchFoo will create views automatically on
demand.  For example this query will automatically create a view that indexes
Post documents by title:</p>

<pre><code>post = Post.find(:first, :conditions =&gt; { :title =&gt; "First Post" })
</code></pre>

<p>On-demand view creation could be convenient.  But my instinct is that it is a
bad thing to do.  Adding a new view to a large database comes with an expensive
initial build step.  It seems to me that that type of thing should only be done
explicitly.</p>

<h2 id="testimonials">Testimonials</h2>

<p>I mentioned a case where one team found that they got great performance
improvements by pushing some data reporting tasks from a SQL database to
CouchDB.  That story was written up in a series of blog posts.  An explanation
of why this team went with CouchDB is presented in <a href="http://johnpwood.net/2009/07/10/couchdb-views-%E2%80%93-the-advantages/" title="CouchDB: Views - The Advantages">part 3 of that series</a>.</p>

<p>There is <a href="http://wiki.apache.org/couchdb/CouchDB_in_the_wild" title="Sites using CouchDB in production">a list on the CouchDB Wiki of sites that are currently using CouchDB
in production</a>.  A couple of notable examples not on the list that
have used CouchDB are the <a href="http://www.erlang-factory.com/conference/London2009/speakers/endafarrell" title="The BBC on CouchDB">BBC</a> and possibly <a href="http://code.google.com/p/couchdb-lounge/" title="CouchDB Lounge">Meebo</a>.</p>

<p>Of note for Ubuntu fans:  Canonical is working on a project called <a href="http://www.kryogenix.org/days/2009/09/03/desktop-couch-irc-talk" title="Desktop Couch">Desktop
Couch</a> which will be installed by default in Karmic Koala.  The idea is to
create a portable store for stuff like browser bookmarks, contacts, music
playlists and ratings, and so on.  There are already plugins to allow Firefox
and Evolution to store <a href="http://www.kryogenix.org/days/2009/07/06/firefox-bookmarks-in-couchdb" title="Firefox and CouchDB">bookmarks</a> and <a href="http://blogs.gnome.org/rodrigo/2009/06/19/couchdb-contacts-in-evolution" title="Evolution and CouchDB">contact data</a> in CouchDB.  Desktop
Couch will provide CouchDB databases for every user to store this information,
and will include tools for “pairing” computers on the same network.  Desktop
Couch will use CouchDB’s built-in replication features to automatically
replicate data between paired computers; so you will get the same bookmarks and
contacts on all of your computers.  This will all integrate with <a href="https://ubuntuone.com/" title="Ubuntu One">Ubuntu One</a>
too.  Desktop Couch will be able to replicate your data to Ubuntu One’s servers
so that you can replicate that data back down to computers on a different
network.</p>

<h2 id="exploring-further">Exploring Further</h2>

<p>The best resource for learning more about CouchDB is probably CouchDB: The
Definitive Guide.  This is a book that J. Chris Anderson, Jan Lehnardt, and
Noah Slater are writing for O’Reilly.  It is still a work in progress, but the
<a href="http://books.couchdb.org/relax/" title="CouchDB: The Definitive Guide">latest draft</a> is available online.</p>

<p>For API reference my source is the <a href="http://wiki.apache.org/couchdb/" title="CouchDB Wiki">CouchDB Wiki</a>.</p>

<p>Finally, as the CouchDB developers will tell you, the most up-to-date reference
for the latest CouchDB features is the included test suite.  This is a set of
tests written in JavaScript that you can run from CouchDB’s web interface to
verify that your build of the latest SVN checkout is working correctly.  These
tests are run externally and access the database server via its HTTP API; so
you don’t have to know any nitty gritty Erlang stuff to understand what the
tests are doing.  When any changes to the API are introduced this test suite is
updated accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install Haskell "Batteries Included" Platform on Ubuntu Jaunty]]></title>
    <link href="http://sitr.us/2009/07/02/how-to-install-haskell-platform-on-ubuntu-jaunty.html"/>
    <updated>2009-07-02T00:00:00-07:00</updated>
    <id>http://sitr.us/2009/07/02/how-to-install-haskell-platform-on-ubuntu-jaunty</id>
    <content type="html"><![CDATA[<p>Just for kicks I thought I would take another shot at some Haskell programming.
To get all of the common libraries and the automated package installer, cabal,
I set up the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a>. Here is how I did it.</p>

<p>Ubuntu Jaunty includes a package for the Haskell compiler, ghc, at version 6.8.
The Haskell Platform installer will roll its eyes at you if you try to proceed
with this version of ghc. So the first step is to install ghc 6.10.</p>

<p>Paste these lines into <code>/etc/apt/sources.list.d/haskell.list</code>:</p>

<pre><code>deb http://ppa.launchpad.net/someone561/ppa/ubuntu jaunty main
deb-src http://ppa.launchpad.net/someone561/ppa/ubuntu jaunty main
</code></pre>

<p>To get the key to verify packages from that PPA, run this optional command:</p>

<pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E51D9310
</code></pre>

<p>Then update your package list and install Haskell:</p>

<pre><code>sudo apt-get update
sudo apt-get install ghc6 ghc6-prof ghc6-doc haddock
</code></pre>

<p>The Haskell Platform website does not list a package for Ubuntu yet. So
<a href="http://hackage.haskell.org/platform/">download the source installer</a>.</p>

<!-- more -->

<p>Before you run the installer you will want to install the necessary build
dependencies:</p>

<pre><code>sudo apt-get install libglut-dev happy alex libedit-dev zlib1g-dev
</code></pre>

<p>Please leave a comment if you discover that I have left out any dependencies.</p>

<p>To perform the final installation step you will also need to have checkinstall
installed:</p>

<pre><code>sudo apt-get install checkinstall
</code></pre>

<p>Unpack the source installer wherever you like:</p>

<pre><code>tar -xzf haskell-platform-2009.2.0.1.tar.gz
</code></pre>

<p>Finally <code>cd</code> into the installer directory and run the generic installation
procedure:</p>

<pre><code>./configure
make
sudo checkinstall -y
</code></pre>

<p>This will build and install a deb package called <code>haskell-platform</code>.  If you
ever want to remove Haskell Platform just uninstall that package.</p>

<p>If all of the above worked, you should be good to go. You compile Haskell code
with <code>ghc</code>. You can run an interactive read-eval-print-loop with <code>ghci</code>. And
you can install Haskell libraries with <code>cabal</code>.</p>

<p><em>Updated 2009-07-23</em>: Added zlib1g-dev to list of build dependencies.  Thanks Jack Siler and Fernand.<br />
<em>Updated 2009-08-01</em>: Added step for installing checkinstall.  Thanks Paulo.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Queries the CouchDB Way]]></title>
    <link href="http://sitr.us/2009/06/30/database-queries-the-couchdb-way.html"/>
    <updated>2009-06-30T00:00:00-07:00</updated>
    <id>http://sitr.us/2009/06/30/database-queries-the-couchdb-way</id>
    <content type="html"><![CDATA[<p><a href="http://couchdb.apache.org/">CouchDB</a> is a document-oriented database. It has no rows or tables. Instead
CouchDB is a collection of JSON documents. It uses a map-reduce pattern to
index data. Queries in CouchDB pull data from what are essentially stored
procedures called views. A view is made up of a map function and optionally a
reduce function.  Ninety percent of the time all you need is the map function,
so I will focus on map-only views here.</p>

<p>A map function is a JavaScript function that takes a single document as an
argument and emits any number of key/value pairs. Both the key and the value
can be any JSON value you choose. The map function is run on every document in
the database individually and the emitted key/value pairs are used to construct
an index of your data.</p>

<h2 id="a-simple-example">A Simple Example</h2>

<p>Imagine you have a database with user records and you want a view of those
records using the last name of each user as keys.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">last_name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">last_name</span><span class="p">,</span> <span class="nx">doc</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>The above map function will produce and index something like the one below.
Because <code>doc</code> is used as a value for each entry the entire content of each JSON
document will be accessible as the indexed values.</p>

<div class="highlight"><pre><code class="js"><span class="p">[</span>
  <span class="p">...</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Clarke&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">last_name</span><span class="o">:</span> <span class="s2">&quot;Clarke&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Kelly&quot;</span><span class="p">,</span>  <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">last_name</span><span class="o">:</span> <span class="s2">&quot;Kelly&quot;</span><span class="p">,</span>  <span class="p">...</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>  <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">last_name</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>  <span class="p">...</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">...</span>
<span class="p">]</span>
</code></pre></div>

<p>Notice that the map function checks each document for a <code>last_name</code> attribute
before emitting a key/value pair. There may be documents in the database that
are not user records. By performing that check the view excludes any
non-user-record documents from the resulting index.</p>

<!-- more -->

<p>If you include the <a href="http://github.com/halorgium/couchdb/blob/2c5f780d8284be5e2cb39f7f61acc5ef8d6fb50d/share/www/script/couch.js">couch.js</a> library in a web page you can create
client-side queries to pull data from CouchDB over HTTP.  The function below
will fetch all of the user records from your database by returning the <code>value</code>
of each key/value pair emitted by the view above.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">users</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;users/last_names&#39;</span><span class="p">).</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// Run the query and output data to the console.</span>
<span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CouchDB</span><span class="p">(</span><span class="s1">&#39;database-with-users&#39;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">users</span><span class="p">(</span><span class="nx">db</span><span class="p">));</span>
</code></pre></div>

<p>Map functions operate on one document at a time and cannot access data from
other documents. The advantage of this is that the functions can process data
in any order and can run on any piece of a data set independent of the rest of
the set.  CouchDB builds static indexes from the output of view map functions
so that queries against those views will run quickly.  When any documents
change CouchDB can incrementally rebuild the indexes for just those documents
without having to rebuild entire indexes from scratch.</p>

<p>The CouchDB design gets you great performance on large data sets. But it means
that you cannot pass dynamic parameters to your map function when you run a
query. You cannot ask for it to emit only user records with a given last name
unless you want to maintain a special view for that particular last name. In
most cases it is not practical to build separate views for every query that you
might want to run someday. So what you can do is to run a query against the
general purpose view above and request only key/value pairs that match a
particular key.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">find_users_by_last_name</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">last_name</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">matches</span><span class="p">;</span>
    <span class="nx">matches</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;users/last_names&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">last_name</span> <span class="p">});</span>
    <span class="k">return</span> <span class="nx">matches</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>

<p>This client code creates a query that requests data from the <code>last_names</code> view
with a <code>key</code> parameter. CouchDB will only send back key/value pairs with keys
that match the <code>key</code> parameter. In this case the query will return all user
records with last names matching the <code>last_name</code> argument.</p>

<p>In a more advanced case you may want to take the first few letters of a last
name and look up user records that match.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">find_users_whose_last_names_start_with</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">matches</span><span class="p">;</span>
    <span class="nx">matches</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;users/last_names&#39;</span><span class="p">,</span>
                      <span class="p">{</span> <span class="nx">startkey</span><span class="o">:</span> <span class="nx">query</span><span class="p">,</span>
                        <span class="nx">endkey</span><span class="o">:</span>   <span class="nx">query</span> <span class="o">+</span> <span class="s2">&quot;\u9999&quot;</span> <span class="p">});</span>
    <span class="k">return</span> <span class="nx">matches</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>

<p>Data returned by a query is always sorted by key. In the case where the keys
are strings the sorting will be lexicographic.  The <code>startkey</code> and <code>endkey</code>
parameters restrict the results of the query to key/value pairs that fall in
the given range according to CouchDB’s sort order.</p>

<p>When the above function is given the query string “Ha”, it will fetch documents
with keys sorted after “Ha” lexicographically, e.g. “Hallett”, “Hathaway”, and
“Hazzold”. The <code>endkey</code> is created by appending “\u9999” to the <code>startkey</code>.
“\u9999” is a unicode character that comes after most other characters in
lexicographic order and that is unlikely to appear in a data set. Effectively
the string “Ha\u9999” sorts after every other string that begins with “Ha”, but
before any string that starts with “Hb”.</p>

<p>Note that CouchDB uses the <a href="http://www.unicode.org/unicode/reports/tr10/">Unicode Collation Algorithm</a> to sort strings.
Sorting comes out differently than you may be used to if your are accustomed to
the ASCII way. UCA collation is intended to mimic the order of strings you
would see in a dictionary. For example, two strings that differ only in case
will appear together in sorted order. The lower-case string will appear
immediately before the upper-case string. So if you force your <code>startkey</code> to
lower-case and your <code>endkey</code> to upper-case you will get case-insensitive
matches. See the <a href="http://wiki.apache.org/couchdb/View_collation">CouchDB wiki</a> for more details.</p>

<h2 id="search-by-keyword">Search by Keyword</h2>

<p>Indexing text content can be a hard problem because you need a large index if
you want to query data by arbitrary keywords or substrings.  Fortunately
CouchDB excels at managing large indexes.</p>

<p>Here is a map function that creates an index of all the words that appear in
the text field of every document in a database.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">tokens</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">tokens</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/[^A-Z0-9\-_]+/i</span><span class="p">).</span><span class="nx">uniq</span><span class="p">();</span>
        <span class="nx">tokens</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">emit</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">doc</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>The code splits text on word boundaries stripping out non-alphanumeric
characters. It runs the resulting list of tokens through a unique filter so
that only one index key is produced for each word in the text of a single
document.</p>

<p>This is an example of a view that emits more than one key/value pair for each
document. The values in each pair are the same for the same document. But a
different key is recorded for each word in the document’s text attribute. The
index that would be created by this view for a document with the text “Live
long and prosper” is below.</p>

<div class="highlight"><pre><code class="js"><span class="p">[</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;and&quot;</span><span class="p">,</span>     <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Live long and prosper.&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Live&quot;</span><span class="p">,</span>    <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Live long and prosper.&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;long&quot;</span><span class="p">,</span>    <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Live long and prosper.&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;prosper&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Live long and prosper.&quot;</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>

<p>To look up documents that contain a given keyword you just need to create a
query with that keyword as the <code>key</code> parameter. But what if you want to look
for documents that contain a list of keywords? You could create index keys for
every combination of words in each document. But that index would grow
exponentially and might get to be unreasonably large. A better way might be to
pick one keyword to perform your query and then to use client code to select
the documents that match all of the keywords out of the results returned by
CouchDB.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">find_documents_by_keywords</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">keywords</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">possible_matches</span><span class="p">;</span>

    <span class="c1">// Query documents that include the first keyword.</span>
    <span class="nx">possible_matches</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;documents/keywords&#39;</span><span class="p">,</span> 
                               <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">});</span>

    <span class="c1">// Pull the value attribute out of each returned key/value</span>
    <span class="c1">// pair.</span>
    <span class="nx">possible_matches</span> <span class="o">=</span> <span class="nx">possible_matches</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">));</span>

    <span class="c1">// Pick out the documents that include all of the given</span>
    <span class="c1">// keywords.</span>
    <span class="k">return</span> <span class="nx">possible_matches</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">keywords</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">keyword</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">keyword</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">match</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>When you want more dynamic data processing than you can get with pure-CouchDB
views, some client-side processing can make up the difference nicely. From a
perspective of deploying applications leveraging your users’ CPU cycles for
data processing can really help getting your application to scale.</p>

<p>There is another approach to full text search documented <a href="http://wiki.apache.org/couchdb/Full_text_index_with_view">on the CouchDB
wiki</a>.</p>

<h2 id="search-by-substring">Search by Substring</h2>

<p>Maybe keyword search isn’t good enough. Maybe you need to be able to search for
occurrences of any substring in a data set.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="nx">doc</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p>For each document, this map function emits a key/value pair for every possible
substring that runs to the end of the document’s text. The idea is that the
beginning of any substring in the data set can be lined up with the beginning
of one of these keys.  Here is an example of the index created for a document
with the text “Hello, world!”:</p>

<div class="highlight"><pre><code class="js"><span class="p">[</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot; world!&quot;</span><span class="p">,</span>       <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;, world!&quot;</span><span class="p">,</span>      <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;!&quot;</span><span class="p">,</span>             <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;d!&quot;</span><span class="p">,</span>            <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;ello, world!&quot;</span><span class="p">,</span>  <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;ld!&quot;</span><span class="p">,</span>           <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;llo, world!&quot;</span><span class="p">,</span>   <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;lo, world!&quot;</span><span class="p">,</span>    <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;o, world!&quot;</span><span class="p">,</span>     <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;orld!&quot;</span><span class="p">,</span>         <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;rld!&quot;</span><span class="p">,</span>          <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">},</span>
  <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;world!&quot;</span><span class="p">,</span>        <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Hello, world!&quot;</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>

<p>The substring that you want to search for can begin at any character within
some document’s text. It may or may not run until the end of that document’s
text field. We have an index with the beginning characters for every possible
substring. So we can create a query that asks for a key range that encompasses
both the given substring and a substring that runs all the way to the end of
the document text.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">find_all_by_substring</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;documents/substrings&#39;</span><span class="p">,</span>
                   <span class="p">{</span> <span class="nx">startkey</span><span class="o">:</span> <span class="nx">str</span><span class="p">,</span>
                     <span class="nx">endkey</span><span class="o">:</span> <span class="nx">str</span> <span class="o">+</span> <span class="s2">&quot;\u9999&quot;</span> <span class="p">}</span>
                  <span class="p">).</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>

<p>CouchDB does not just sort data when responding to queries. In its internal
representation indexes are always sorted by key.  So a query with a key range
targets a contiguous block of data from the database.  Because of that CouchDB
can serve up a key range very efficiently.</p>

<p>Just as with the keyword search, if you want to search for documents that match
a list of substrings then get the matches for one of the substrings from
CouchDB and use client code to select results that contain all of the rest of
the given substrings.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">find_all_by_substrings</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">strs</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">matches</span><span class="p">;</span>
    <span class="nx">matches</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;documents/substrings&#39;</span><span class="p">,</span>
                      <span class="p">{</span> <span class="nx">startkey</span><span class="o">:</span> <span class="nx">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                        <span class="nx">endkey</span><span class="o">:</span> <span class="nx">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;\u9999&quot;</span> <span class="p">});</span>
    <span class="k">return</span> <span class="nx">matches</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dot</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)).</span><span class="nx">select</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">strs</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

<p>If the text of your documents tends to be very long you can avoid a lot of
really long keys by limiting the lengths of substring keys in your view. In
that case make sure to truncate the key parameters in your queries so that they
are not longer than the index keys.</p>

<p><em>Updated 2009-07-05</em>: Updated examples to demonstrate that CouchDB stores
indexes sorted by key. Thanks to J. Chris Anderson for pointing that out.<br />
<em>Updated 2009-08-06</em>: Added link to full text search implementation on
CouchDB wiki.<br />
<em>Updated 2009-08-09</em>: Fixed a typo.  </p>

<h2 id="appendix-helper-function-definitions">Appendix: Helper Function Definitions</h2>

<p>Some of the functions that I used in the examples above are not built into
JavaScript or <a href="http://github.com/halorgium/couchdb/blob/2c5f780d8284be5e2cb39f7f61acc5ef8d6fb50d/share/www/script/couch.js">couch.js</a>. Here are definitions of those functions for
reference.</p>

<p>Given an attribute name, <code>dot</code> returns a function that when given an object
returns the value of the specified attribute. This function is used in examples
above to get the <code>value</code> attributes of rows fetched by CouchDB queries.</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span> <span class="nx">dot</span><span class="p">(</span><span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">attr</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

<p><a href="http://en.wikipedia.org/wiki/Map_%28higher-order_function%29"><code>map</code></a> is an Array method that given a function that takes a single
argument returns a new array formed by applying the given function to every
element of the original array in turn.</p>

<div class="highlight"><pre><code class="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">func</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">r</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>

<p><a href="http://en.wikipedia.org/wiki/Reduce_%28higher-order_function%29"><code>reduce</code></a> is an Array method that given an initial value and a
function that takes two arguments returns a single value produced by applying
the given function to every element of the array in turn with the value from
the previous function invocation and returning the last result.</p>

<div class="highlight"><pre><code class="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">val</span> <span class="o">=</span> <span class="nx">func</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>

<p><code>select</code> is an Array method that given a test function returns a new array made
up of only elements in the original array that pass the test.</p>

<div class="highlight"><pre><code class="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">test</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reduce</span><span class="p">([],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">test</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">e</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">r</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div>

<p><code>uniq</code> is an Array method that returns a new array with any duplicate values
from the original array removed.</p>

<div class="highlight"><pre><code class="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">uniq</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reduce</span><span class="p">([],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">e</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">list</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use RSpec to describe a Sinatra application]]></title>
    <link href="http://sitr.us/2008/07/29/how-to-use-rspec-to-describe-a-sinatra-application.html"/>
    <updated>2008-07-29T00:00:00-07:00</updated>
    <id>http://sitr.us/2008/07/29/how-to-use-rspec-to-describe-a-sinatra-application</id>
    <content type="html"><![CDATA[<p>This information was written a long time ago and has become pretty outdated.</p>

<p><a href="http://sinatrarb.com/">Sinatra</a> is a fun little web application microframework. Recently I
started working on an application using Sinatra - and since I am
working on good programming habits, before I dove into any coding I
sat down to work out how to write specs for a Sinatra application.</p>

<p>Sinatra comes bundled with support for <a href="http://chneukirchen.org/repos/testspec/README">test/spec</a>: a spec framework
that builds on top of Rail’s own Test::Unit to provide support for
writing specs. Which is a really neat idea. But I have been using
<a href="http://rspec.info/">RSpec</a> for my other work, and I wanted to continue doing so.</p>

<p>It turns out that RSpec takes a little bit of manual work to get
going with Sinatra. I read a <a href="http://www.gittr.com/index.php/archive/sinatra-rspec-integration-without-a-patch-with-examples/">helpful article on gittr.com</a> that
pointed me in the right direction. The article advised me to add these
lines to my spec files:</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/your_application&#39;</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">&#39;spec&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;spec/interop/test&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;sinatra/test/unit&#39;</span>
</code></pre></div>

<p>The first line loads your application; the second line loads RSpec;
the third loads an RSpec-Test::Unit compatibility layer; and the
fourth loads Sinatra’s test helpers, which are written for
Test::Unit.</p>

<!-- more -->

<p>Contrary to Sinatra’s instructions for writing tests, you
want to avoid loading ‘sinatra/test/spec’, which defines Sinatra’s
helper methods for test/spec, because that would load test/spec itself
which conflicts with RSpec.</p>

<p>Those instructions mostly worked. I could write and run specs. But I
had trouble with matchers. For example, this example:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">it</span> <span class="s2">&quot;should not have a cookie&quot;</span>
  <span class="n">instance</span><span class="o">.</span><span class="n">cookie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_nil</span>
<span class="k">end</span>
</code></pre></div>

<p>Would give an error message like this:</p>

<pre><code>undefined method `be_nil' for nil:NilClass
</code></pre>

<p>Which I’m sure you can imagine is pretty annoying.</p>

<p>It was easy enough to identify ‘sinatra/test/unit’ as the root of the
problem. When I removed that line RSpec’s matchers worked fine; but
then I didn’t get Sinatra’s test helpers, which make spec-writing much
easier. So that wasn’t a great solution either.</p>

<p>Examining Sinatra’s code, I found that all ‘sinatra/test/unit’ does is
to load ‘sinatra/test/methods’ - the actual helper methods - and mixes
them into Test::Unit::TestCase. So I bypassed ‘sinatra/test/unit’ by
copying and adapting some code from it to make the top of my spec file
look like this:</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/your_application&#39;</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">&#39;spec&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;spec/interop/test&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;sinatra/test/methods&#39;</span>

<span class="kp">include</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">Methods</span>

<span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">default_options</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span>
  <span class="ss">:env</span> <span class="o">=&gt;</span> <span class="ss">:test</span><span class="p">,</span>
  <span class="ss">:run</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
  <span class="ss">:raise_errors</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
  <span class="ss">:logging</span> <span class="o">=&gt;</span> <span class="kp">false</span>
<span class="p">)</span>

<span class="no">Sinatra</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span>
</code></pre></div>

<p>Since that is a fair amount of setup, I moved all of it into a
separate file called spec_helper.rb, which I loaded into my actual
spec files. Because I am weird enough to write a Sinatra application
that is split into multiple files and multiple spec files.</p>

<p>Anyway, now my specs run just as they should, with Sinatra’s helpers
and everything:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">it</span> <span class="s2">&quot;should deliver a cookie&quot;</span> <span class="k">do</span>
  <span class="n">get_it</span> <span class="s1">&#39;/cookie&#39;</span>
  <span class="vi">@response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_ok</span>
  <span class="vi">@response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;application/x-baked-goods&#39;</span>
  <span class="vi">@response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_empty</span>
<span class="k">end</span>
</code></pre></div>

<p>The next challenge was to write specs for Sinatra helpers. Although
Sinatra actions and helpers generally appear in the outermost
namespace, the DSL methods that define them actually bind the helpers
to Sinatra::EventContext. You can’t invoke helper methods directly
from an example context; you have to create an instance of
Sinatra::EventContext and send the method call to that - much the same
way Rails instantiates a subclass of ActionController::Base to handle a
controller action. Here is the code you will want in your example
groups:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">before</span> <span class="ss">:all</span> <span class="k">do</span>
  <span class="n">request</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">&quot;request&quot;</span><span class="p">)</span>
  <span class="n">response</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">&quot;response&quot;</span><span class="p">,</span> <span class="ss">:body</span><span class="o">=</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
  <span class="n">route_params</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">&quot;route_params&quot;</span><span class="p">)</span>
  <span class="vi">@event_context</span> <span class="o">=</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:EventContext</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">route_params</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<p>A <code>body=</code> method has to be defined on the response mock to prevent an
error. But it doesn’t have to actually do anything. With that setup
code in place, you can do this:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">it</span> <span class="s2">&quot;should use a helper to make cookies&quot;</span> <span class="k">do</span>
  <span class="vi">@event_context</span><span class="o">.</span><span class="n">bake_a_cookie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">Cookie</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<p>and write something like this in your application:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">helper</span> <span class="k">do</span>
  <span class="k">def</span> <span class="nf">bake_a_cookie</span>
    <span class="no">Cookie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:kind</span> <span class="o">=&gt;</span> <span class="ss">:chocolate_chip</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>

<p>And now you have a reasonably complete speccing setup. There are still
a couple of issues though. For one thing, the spec helpers are missing
a much needed <code>assigns[]</code> method. As it stands there is no good way to
pry apart the behavior of an action if there is no convenient method
call to stub. You can only define the parameters that are passed to
it, and read response. On the upside, this does help to enforce good
behavior-driven development.</p>

<p>The other issue is more of an annoyance than a serious problem. It
seems that somewhere in all of this there are one or two
<code>method_missing</code> definitions that bounce calls back and forth. If call
a method that is not defined, you generally won’t get an “undefined
method” error, you will get a “stack level too deep” error
instead. This is particularly unhelpful because it does not tell you
what class received the undefined method, or which method is
undefined. So a little extra manual stack tracing is required when
this happens.</p>

<p><em>Update</em> 10/11/08:
The Sinatra application that led to this article is now open source and is available at <a href="http://github.com/hallettj/restful_captcha">http://github.com/hallettj/restful_captcha</a>. If you want to see the RSpec techniques that I used in context, check out the code there.</p>

<p><em>Updated 2009-08-09</em>: This article is pretty outdated.  Added a note to that effect.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[International Phonetic Alphabet]]></title>
    <link href="http://sitr.us/2007/10/02/international-phonetic-alphabet.html"/>
    <updated>2007-10-02T00:00:00-07:00</updated>
    <id>http://sitr.us/2007/10/02/international-phonetic-alphabet</id>
    <content type="html"><![CDATA[<p>In <a href="http://sitr.us/ling/2007/09/24/anatomy-of-a-syllable/">last week’s post</a> I provided phonetic
transcriptions of some example words using the International Phonetic
Alphabet, or IPA for short. I thought it would be helpful to follow
that up with some information about what the IPA is, and how to read
it. And as a bonus, after learning about IPA transcription you will be
able to better read pronunciation guides on Wikipedia.</p>

<p>You have probably seen many phonetic transcriptions before -
especially as pronunciation guides in dictionaries. In dictionaries it
is common to see a transcription convention that uses English spelling
conventions to represent sounds. For example, the word “elucidate”
might be transcribed as (ee-LOO-suh-date). That system is handy
because it is immediately familiar to anyone who has experience
reading stuff in English. But it has drawbacks too. There are a few
main problems that are especially important for linguists; there are
lots of linguists all over the world who are used to languages with
entirely different spelling conventions. For example, the sound in
English that is represented as “y” - the consonant, not the vowel - is
written in Icelandic as “j”. There are also a lot of languages with
sounds that just don’t exist in English. Linguists need to be able to
transcribe those sounds; but since they don’t exist in English there
is no spelling convention to represent them. In fact there is no one
language with enough spelling conventions to represent every sound in
every language in the world. And finally, English spelling is
ambiguous, as is the spelling of almost any language. That is already
demonstrated by the need to add a note to distinguish “y” the
consonant from “y” the vowel or any of the other vowel sounds
represented by “y”.</p>

<!-- more -->

<p>To solve all these problems, a group of linguistics developed the
International Phonetic Alphabet in the late nineteenth century. The
first standardized version was created in 1888. But it has been
revised somewhat since then. The purpose of IPA is to provide a
standard set of symbols that are used to represent sounds so that the
same symbols always represent the sounds, even to people from
different language backgrounds. Using the IPA it is theoretically
possible to represent every sound in every language in the
world. Though occasionally a new language is discovered with a new
sound that we didn’t know anything about before, which has to be
quickly added to the IPA.</p>

<p>IPA was originally developed by French and British linguists, so it
uses characters derived from the Latin alphabet and symbols are
matched to sounds in a ways that are generally familiar to
Europeans. But even in the Western world people have different ideas
about how to spell things, so the IPA adopts some different phonetic
conventions from different languages. For example, I mentioned earlier
that the sound represented by “y” in English is spelled “j” in, among
others languages, Icelandic; and in fact the symbol for that sound in
IPA is [j]. Here is <a href="http://www.linguiste.org/phonetics/ipa/chart/">the complete IPA chart in its most recent
revision</a>. And by the way: in IPA, the word
“elucidate” is transcribed [i’lu.sə.deɪt].</p>

<p>The sound an IPA symbol represents is described by the <em>place of
articulation</em> of the sound, an the <em>manner of articulation</em>. When you
voice a consonant you, you press your tongue against the roof of your
mouth, or in some cases you press your lips together or put the tip of
your tongue between your teeth. The exact spot on where you press your
tongue is the place of articulation. For example, when you say [t] you
press the tip of your tongue against a spot towards the front of your
mouth called the alveolar ridge; whereas when you say [k] you press
the back of your tongue against your soft palate, which linguists call
the velum. [t] and [k] have the same manner of articulation - they are
both plosives, which means that they are articulated by completely
stopping air from flowing out of the mouth for a moment. But they have
different places of articulation. Early on in a linguist’s career he
learns all about the structures of the mouth, throat, and nose to
learn how each can be used to produce various sounds. I will explain
some of the details in future articles; in the meantime it would
probably be easiest to look up IPA symbols using <a href="http://en.wikipedia.org/wiki/IPA_Chart_for_English">this IPA chart on
Wikipedia</a>, which is specially designed for
English speakers and provides example words to illustrate each sound.</p>

<p>Wikipedia provides the transcription for the English “r” as [ɹ]. This
is the most technically correct transcription, since in IPA [r]
represents a rolled “r”, which is heard in Spanish. In linguistics
speak, [r] is a trill and [ɹ] is a liquid. However, English doesn’t
have a trill, so people transcribing English often use [r] instead of
[ɹ] because the former is more familiar - and easier to type. It is
considered acceptable to make substitutions like that in cases where
readers are unlikely to be confused by the switch. So when I
transcribe an English word using [r] instead of [ɹ] I’m not actually
trying to make you practice pronouncing trills.</p>

<p>As an aside, the rolled “r” in French is not the same sound as the
rolled “r” in Spanish. The French “r” is transcribed [ʀ]. Both sounds
are trills, so they share the same manner of articulation; but they
have different places of articulation. [ɹ] is alveolar, meaning that
to pronounce it the tip of the tongue is positioned on the alveolar
ridge, in the same spot it is placed when pronouncing [t]. The sound
is produced by vibrating the tongue against the roof of the mouth,
which is what makes it a trill. To pronounce [ʀ], the back of the
tongue is placed against the uvula and vibrates against that.</p>

<p>To make the alphabet more flexible, IPA employs a number of
diacritics. Diacritics are small marks placed above or below a
character. In IPA they are used to describe characteristics of a sound
that differ slightly from the sound usually represented by a bare
character. Last week I talked about consonants that are used as
syllable nuclei, which are called syllabic consonants. Syllabicity is
considered a phonological feature, so it is indicated with a
diacritic. For example, the syllabic version of [n] is [n̩].</p>

<p>Another example of a diacritic is ʰ, which is used to indicate
aspiration. Did you know that the letter “p” in English is used to
represent two different sounds? The “p” sounds in “pull” and “stop”
are slightly different. You can tell if you put your hand in front of
your mouth, less than an inch away, and say each word. You will feel a
puff of air on your hand when you say the “p” in “pull”; there is a
puff when you say “stop” too, but it is not nearly as strong. A sound
that makes that strong puff of air is said to be <em>aspirated</em>, and is
marked with a diacritic that looks like a superscripted “h”. So the
IPA representation for an aspirated “p” is /pʰ/ and an unaspirated “p”
is simply /p/.</p>

<p>Even though they are technically different sounds, English speakers
treat /p/ and /pʰ/ as being the same. So they are written with the
same letter. And in IPA they are usually both transcribed as [p] for
simplicity. But on occasion it is important to have the ability to
distinguish the two. The difference between sounds that are exactly
the same and sounds that are treated as the same by language speakers
is a very important consideration in linguistics - and it has to do
with the sudden switch from square brackets to slashes surrounding the
transcriptions above. I will talk about that in a future article too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Syllable]]></title>
    <link href="http://sitr.us/2007/09/24/anatomy-of-a-syllable.html"/>
    <updated>2007-09-24T00:00:00-07:00</updated>
    <id>http://sitr.us/2007/09/24/anatomy-of-a-syllable</id>
    <content type="html"><![CDATA[<p>The syllable is a constant feature in every spoken language in the
world. Each language has its own rules about what kinds of syllables
are allowed, and what kinds aren’t - but the general structure is the
same everywhere.</p>

<p>A syllable has as many as three parts: <em>onset</em>, <em>nucleus</em>, and
<em>coda</em>. The onset and the coda are consonants, or consonant clusters,
that appear at the beginning and the end of the syllable
respectively. The nucleus forms the the core of the syllable; it is
most often a vowel, or a combination of vowels - but there are many
exceptions to that. If you examine enough languages you can find
almost every kind phone used as a syllable nucleus. In the word “far”,
[f] is the syllable onset, [a] is the nucleus, and [r] the coda. If a
coda is present in a syllable, the nucleus and the coda form a single
unit called a <em>rhyme</em>; otherwise the nucleus makes up the rhyme by
itself. Looking at “far” again, [ar] forms the rhyme. A syllable does
not necessarily have to have an onset or a coda - depending on the
language - but a nucleus is always present.</p>

<p>Even in English, syllable nuclei are not restricted to vowels. For
example, in the monosyllabic word, “hmm”, the syllable nucleus is [ṃ],
which is a consonant but is more specifically a <em>nasal</em>. Another
nasal, [n], can be seen as a syllable nucleus in the word “isn’t”,
which is transcribed into the <a href="http://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet (IPA)</a>
as [ɪzzṇt]. In this case there are two syllables, and [ṇ] forms the
nucleus of the second syllable.</p>

<!-- more -->

<p>The small dot underneath the characters ṇ and ṃ indicates that the
sound represented is a <em>syllabic consonant</em>, which is any consonant
that forms a syllable nucleus. Vowels are not marked with the same
diacritic because they are always considered to be syllabic. Usually
syllabicity is marked in IPA with a vertical stroke under the character
instead of a dot; but in this case a dot was as close as I could get.</p>

<p>Anyone following closely may notice that it is difficult to decide
exactly how to divide “isn’t” into syllables. It seems like it should
be either [‘ɪz.ṇt], or [‘ɪ.zṇt], where the dot (.) represents a
syllable boundary and the apostrophe (‘) represents the beginning of a
stressed syllable; but it is tricky to figure out whether the [z] is
the coda of the first syllable or the onset of the second
syllable. That is because in the [z] in “isn’t” demonstrates
<em>ambisyllabicity</em>, a common feature in English that I will write about
in a future article. The short explanation is that [z] is both an
onset and a coda, which is why I transcribed the word with two
[z]’s. Anyway, in both analyses [ṇ] forms the nucleus of the second
syllable, so we don’t need to worry about the placement of [z] for
now.</p>

<p>There are also arguably cases where a <em>liquid</em> forms the nucleus of a
syllable in English. The liquids in English are [l] and [r]. Consider
the word “sir” and the second syllable of “apple”. If it is the case
that the liquids in these syllables are the nuclei, then the words
would be transcribed as [sṛ] and [æppḷ] respectively. However, not
everybody agrees with that interpretation, and so these words are
often analyzed as [sər] and [æppəl]. That would make the syllable
nuclei [ə], which is a vowel. And by the way, the [p] in “apple” is
also ambisyllabic.</p>

<p>The reason vowels are so likely to form syllable nuclei is that they
are the most <em>sonorous</em> sounds available in spoken language. It is a
general rule that syllable nuclei are formed by sonorous
phones. Liquids and nasals are right behind vowels in that they are
more sonorous than any other type of consonant. But it is possible to
find syllable nuclei in other languages that are considerably less
sonorant than any of the above. For example, there is at least one
<a href="http://en.wikipedia.org/wiki/Berber_languages">Berber language</a> that contains syllables like [tḳt], where the
nucleus of the syllable is [ḳ].</p>

<p>The onset and coda are always made up of consonants. Many languages
have strict rules about how many consonants can appear, and what sort
of order they appear in. English is relatively lax in this respect, so
we can see syllables with several consonants clustered together in
both positions. For example, “scrumptious”, transcribed as
[‘skrʌmp.ʃəs], has three distinct consonant phones in the onset and
two in the coda of the first syllable. But notice that you would never
see a word in English like [‘rksʌpm.ʃəs], which would probably be
spelled “rksupmtious”. Try pronouncing that and see what happens - and
remember that it’s cheating to make the [r] or the [m] into separate
syllables!</p>

<p>Consonants in syllable onsets and codas are also governed by
sonority. There is a rule, called the <em>sonority sequencing
generalization</em>, that says that the sonority of a syllable peaks at
the nucleus and decreases toward either boundary. So the sonority of
consonants in the onset is supposed to increase going forward, and the
sonority in the coda is supposed to fall of. This is a generalization,
so there are exceptions - but if you deviate too much from the rule the
result becomes difficult to pronounce. In the made-up word above I
reversed the order of the consonants in the onset and coda of the
first syllable, thus making the sonority sequence “wrong”.</p>

<p>Every sound in a language has a place somewhere in the sonority
hierarchy. And every language has its own sonority hierarchy
ordering. So for example [star] is easy for English speakers to
pronounce, but you don’t see a word like [tsar]: [t] is more sonorous
than [s] in English. But in Russian it is not uncommon to see a word
like [tsar].</p>

<p>Restrictions on what is allowed in a syllable vary from language to
language. Not all languages allow as many consonants to be clustered
in a syllable onset as English does, while some allow more. Some
languages require every syllable to have an onset, while others allow
naked nuclei. Syllable codas are especially restricted. For example,
in Mandarin Chinese the only syllable codas that are allowed are
nasals. There are no languages that forbid onsets, but many languages
don’t allow syllable codas to appear at all.</p>

<p>For more information, and some neat diagrams, visit <a href="http://www.sil.org/LINGUISTICS/GlossaryOfLinguisticTerms/WhatIsASyllable.htm">What is a
syllable?</a> and <a href="http://en.wikipedia.org/wiki/Syllable">the Wikipedia entry for “Syllable”</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deixis]]></title>
    <link href="http://sitr.us/2007/09/17/deixis.html"/>
    <updated>2007-09-17T00:00:00-07:00</updated>
    <id>http://sitr.us/2007/09/17/deixis</id>
    <content type="html"><![CDATA[<p>When someone says to you, “here” or “now”, you probably know what he
means. “Here” might the room that you are both sitting in. “Now” would
be the span of time you spent sitting together. But if either word
were uttered under different circumstances, it could mean something
very different. For example, if I called you from the Andes and I used
the word, “here”, it would mean a mountainside somewhere - possibly
thousands of miles away from the aforementioned room. The same word
can mean both the room and the mountainside because of <a href="http://en.wikipedia.org/wiki/Deixis">deixis</a>.</p>

<p>Deixis is a form of <a href="http://en.wikipedia.org/wiki/Exophora">exophora</a>, which is an utterance that is given
meaning by the context it is uttered in. Specifically, deixis
represents the speech event itself: deictic expressions reference the
speaker, the speaker’s utterances, the speaker’s location, and the
time at which the speech event occurs. There are different types of
deictic expressions that refer to each particular aspect.</p>

<p><a href="http://en.wikipedia.org/wiki/Personal_pronoun">Personal pronouns</a>, such as “I”, “you”, “he”, and “she”, are deictic
expressions. “I” refers simply to the speaker. The other pronouns are
defined by the relation the referenced person has to the speaker in
the discourse. As the role of speaker switches from person to person,
the context represented by deixis in understood by participants of the
discourse to change too.</p>

<!-- more -->

<p>Location and time are a little more complicated. Whenever someone
speaks - or writes, or is quoted, etc. - there is an implicit deictic
center that is formed in the minds of the speaker and any listeners. A
deictic center is the point in space and time that spatial and
temporal deictic expressions refer to. “Here” and “now” are the
simplest examples. The verbs “to come” and to “to go” are also spatial
deictic expressions: “to come” means motion towards the deictic
center, and “to go” means motion away.</p>

<p>Based on this analysis, the phrase “come here” seems redundant at
first. But actually the addition of “here” can be important, due to a
phenomenon called <em>sympathetic deixis</em>. It is not uncommon, especially
in phone conversations, to hear an utterance like, “I will come by
later”. For the speaker to move toward the deictic center is almost
nonsensical when the speaker is the deictic center. But in this case
sympathetic deixis causes the deictic center to shift from the
speaker’s location to the listener’s location. So motion towards the
deictic center actually translates to motion toward the listener.</p>

<p>Note that the shift caused by sympathetic deixis does not necessarily
affect all the aspects of deixis. In the example above the meanings of
personal pronouns do not change after the deictic center has shifted;
in a similar sentence, “I will come to see you”, “I” refers to the
speaker, and “you” refers to the listener - as would be expected with
or without a shifted deictic center.</p>

<p>An especially fun deictic puzzle is often heard in answering machine
messages like, “I’m not here right now”. It isn’t possible that the
deictic center is fixed upon the speaker during this message, because
it is not possible for the speaker to not occupy his own location. So
there must be sympathetic deixis in effect to shift the deictic center
either spatially or temporally. As someone who has been on the
receiving end of this message, I expect “here” to mean the location
where the message was recorded, and “now” to be the time when I am
calling. By that analysis the spatial location of the deictic center
remains fixed on the location of the speech event, while the temporal
aspect shifts to the listening event via sympathetic deixis. There is
another possible analysis where both spatial and temporal sympathetic
deictic shifts occur. In that case the spatial shift does not move the
location of the deictic center to the listener, but instead moves it
to the place where the listener expects it to be: in this case
wherever the speaker’s phone is. Under either analysis, the answering
machine example demonstrates that deictic shifts can be temporal as
well as spatial.</p>

<p>There are other forms of deictic expressions. There is a more complete
list in <a href="http://en.wikipedia.org/wiki/Deixis">the Wikipedia article on deixis</a>.</p>
]]></content>
  </entry>
  
</feed>
